package idlize.internal.interop;

interface Node {
    pointer CreateNode(i32 node_t, i32 arg0, i32 arg1);
    pointer GetNodeFinalizer();
    pointer GetNodeByViewStack();
    void DisposeNode(pointer ptr0);
    void DumpTreeNode(pointer ptr0);
    i32 AddChild(pointer ptr1, pointer ptr2);
    void RemoveChild(pointer ptr0, pointer ptr2);
    i32 InsertChildAfter(pointer ptr0, pointer ptr1, pointer ptr2);
    i32 InsertChildBefore(pointer ptr0, pointer ptr1, pointer ptr2);
    i32 InsertChildAt(pointer ptr0, pointer ptr1, i32 arg);
    void ApplyModifierFinish(pointer ptr0);
    void MarkDirty(pointer ptr0, u32 arg);
    boolean IsBuilderNode(pointer ptr0);
    f32 ConvertLengthMetricsUnit(f32 arg0, i32 arg1, i32 arg2);
    void SetCustomCallback(pointer ptr0, i32 arg);
    void MeasureLayoutAndDraw(pointer ptr0);
    i32 MeasureNode(pointer ptr0, sequence<f32> arr);
    i32 LayoutNode(pointer ptr0, sequence<f32> arr);
    i32 DrawNode(pointer ptr0, sequence<f32> arr);
    void SetMeasureWidth(pointer ptr0, i32 arg);
    i32 GetMeasureWidth(pointer ptr0);
    void SetMeasureHeight(pointer ptr0, i32 arg);
    i32 GetMeasureHeight(pointer ptr0);
    void SetX(pointer ptr0, i32 arg);
    i32 GetX(pointer ptr0);
    void SetY(pointer ptr0, i32 arg);
    i32 GetY(pointer ptr0);
    void SetAlignment(pointer ptr0, i32 arg);
    i32 GetAlignment(pointer ptr0);
    i32 IndexerChecker(pointer ptr0);
    void SetRangeUpdater(pointer ptr0, i32 arg);
    void SetLazyItemIndexer(pointer ptr0, i32 arg);
    pointer GetPipelineContext(pointer ptr0);
    // TODO: Actually Promise<void>, fix!
    Object VSyncAwait(pointer pipeline);
    void SetVsyncCallback(pointer pipeline);
    void UnblockVsyncWait(pointer pipeline);
    void SetChildTotalCount(pointer ptr0, i32 arg);
    void ShowCrash(String message);

    // TODO: rename to smth more sensible!
    // i32 CheckArkoalaGeneratedEvents(sequence<u8> result, i32 size);
    // i32 InjectEvent(sequence<u8> data, i32 size);

    void StartPerf(String str1);
    void EndPerf(String str1);
    pointer DumpPerf(i32 arg);
    i32 CheckCallbackEvent(sequence<u8> buffer, i32 bufferLength);
    void HoldCallbackResource(i32 resourceId);
    void ReleaseCallbackResource(i32 resourceId);
    Object LoadUserView(String userClass, String params);
};
