/* propertyTypeReplacements */

[Entity=Interface]
interface Resource {
    [Optional]
    attribute sequence<String> params;
};

[Entity=Interface]
interface RectOptions {
    [Optional]
    attribute (number or String or sequence<(number or String)>) radius;
};

[Entity=Interface]
interface PluginComponentOptions {
    attribute String data;
};

[Entity=Interface]
interface SliderBlockStyle {
    [Optional]
    attribute String shape;
};

[Entity=Interface]
interface AlertDialogParam {
    [Optional]
    attribute TextStyle_alert_dialog textStyle;
};

[Entity=Interface]
interface BorderImageOption {
    [Optional]
    attribute (String or Resource or LinearGradient_common) source;
};

[Synthetic, Entity=Tuple, Synthetic]
interface AnimationRange_Number {
    attribute number value0;
    attribute number value1;
};

[Entity=Interface]
interface ContextMenuAnimationOptions {
    [Optional]
    attribute AnimationRange_Number scale;
    [Optional]
    attribute AnimationRange_Number hoverScale;
};

/* parameterTypeReplacements */

[Entity=Class]
interface AnimatorAttribute: [TypeArguments="AnimatorAttribute"] CommonMethod {
    AnimatorAttribute motion(SpringMotion value);
};

[Entity=Class, TypeParameters="T"]
interface ScrollableCommonMethod: [TypeArguments="T"] CommonMethod {
    T onWillScroll((ScrollOnWillScrollCallback or undefined) handler);
    T onDidScroll(ScrollOnScrollCallback handler);
    [Deprecated]
    T onScroll(Callback_Number_Number_Void event);
};

[Entity=Class]
interface ScrollAttribute: [TypeArguments="ScrollAttribute"] ScrollableCommonMethod {
    ScrollAttribute onWillScroll((ScrollOnWillScrollCallback or undefined) handler);
    ScrollAttribute onDidScroll(ScrollOnScrollCallback handler);
};

[Entity=Class, TypeParameters="T"]
interface CommonMethod {
    T size(SizeOptions value);
    T clip((boolean or undefined) value);
    T clip((boolean or undefined) clip);
    T mask((ProgressMask or undefined) value);
    T mask((ProgressMask or undefined) mask);
};

[Entity=Class]
interface FormComponentAttribute: [TypeArguments="FormComponentAttribute"] CommonMethod {
    FormComponentAttribute size(SizeOptions value);
};

[Entity=Class]
interface LineAttribute: [TypeArguments="LineAttribute"] CommonShapeMethod {
    LineAttribute startPoint(sequence<Length> value);
    LineAttribute endPoint(sequence<Length> value);
};

[Entity=Class]
interface RectAttribute: [TypeArguments="RectAttribute"] CommonShapeMethod {
    RectAttribute radius((number or String or sequence<(number or String)>) value);
};

[Entity=Class]
interface CanvasRenderingContext2D: CanvasRenderer {
    String toDataURL(optional String type, optional f32 quality);
};

[Entity=Class]
interface OffscreenCanvasRenderingContext2D: CanvasRenderer {
    String toDataURL(optional String type, optional f32 quality);
};

[Entity=Class, TypeParameters="T"]
interface CommonShapeMethod: [TypeArguments="T"] CommonMethod {
    T strokeDashArray(sequence<Length> value);
};

[Entity=Class]
interface ShapeAttribute: [TypeArguments="ShapeAttribute"] CommonMethod {
    ShapeAttribute strokeDashArray(sequence<Length> value);
    ShapeAttribute mesh(sequence<number> value, number column, number row);
};

[Synthetic]
callback GridAttribute_onItemDragStart_event_type = CustomBuilder (ItemDragInfo event, number itemIndex);

[Entity=Class]
interface GridAttribute: [TypeArguments="GridAttribute"] ScrollableCommonMethod {
    GridAttribute onItemDragStart(GridAttribute_onItemDragStart_event_type event);
    [Deprecated]
    GridAttribute onScroll(Callback_Number_Number_Void event);
};

[Synthetic]
callback ListAttribute_onItemDragStart_event_type = CustomBuilder (ItemDragInfo event, number itemIndex);

[Entity=Class]
interface ListAttribute: [TypeArguments="ListAttribute"] ScrollableCommonMethod {
    ListAttribute onItemDragStart(ListAttribute_onItemDragStart_event_type event);
    [Deprecated]
    ListAttribute onScroll(Callback_Number_Number_Void event);
};


/////////

typedef (TextStyle_styled_string or DecorationStyle or BaselineOffsetStyle or LetterSpacingStyle or TextShadowStyle or GestureStyle or ImageAttachment or ParagraphStyle or LineHeightStyle or UrlStyle or CustomSpan or UserDataSpan or BackgroundColorStyle) StyledStringValue;