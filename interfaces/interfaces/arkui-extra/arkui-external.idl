package arkui.component.idlize;

import arkui.component.units;
import ohos.graphics.text.text;
import arkui.component.enums;
import ohos.multimedia.image.image;

[Entity=Interface]
interface WebHeader {
    attribute String headerKey;
    attribute String headerValue;
};

/**
 * The componentSnapshot API declaration , part for M2 app
 */
[Entity=Interface]
interface SnapshotOptions {
    [Optional]
    attribute number scale;
    [Optional]
    attribute boolean waitUntilRenderFinished;
};
[Async, Synthetic]
callback AsyncCallback_image_PixelMap_Void = void (PixelMap result);

[Entity=Class]
interface GlobalScope_ohos_arkui_componentSnapshot { // TODO WTF? Why GlobalScope in the name?
    static void get(String id, AsyncCallback_image_PixelMap_Void callback, optional SnapshotOptions options);
};

/**
 * The performanceMonitor API declaration, part for M2 app
 */
dictionary PerfMonitorActionType {

    number LAST_DOWN = 0;
    number LAST_UP = 1;
    number FIRST_MOVE = 2;

};
dictionary PerfMonitorSourceType {

    number PERF_TOUCH_EVENT = 0;
    number PERF_MOUSE_EVENT = 1;
    number PERF_TOUCHPAD_EVENT = 2;
    number PERF_JOYSTICK_EVENT = 3;
    number PERF_KEY_EVENT = 4;

};
[Entity=Class]
interface GlobalScope_ohos_arkui_performanceMonitor {
    static void begin(String scene, PerfMonitorActionType startInputType, optional String note);
    static void end(String scene);
    static void recordInputEventTime(PerfMonitorActionType actionType, PerfMonitorSourceType sourceType, i64 time);
};

/**
 * The common shapes API declarations
 */
[Entity=Class]
interface CommonShape {
    CommonShape offset(Position offset);
    CommonShape fill(ResourceColor color);
    CommonShape position(Position position);
};
[Entity=Class]
interface BaseShape {
    BaseShape width(Length width);
    BaseShape height(Length height);
    BaseShape size(SizeOptions size);
};

[Entity=Class]
interface GlobalScope_ohos_font {
    static void registerFont(FontOptions options);
    static sequence<String> getSystemFontList();
    static FontInfo getFontByName(String fontName);
};

[Entity=Class]
interface GlobalScope_ohos_measure_utils {
    static number measureText(MeasureOptions options);
    static SizeOptions measureTextSize(MeasureOptions options);
};

/**
 * The SymbolEffect,ReplaceSymbolEffect,ScaleSymbolEffect API declaration, part for M2 app
 */

[Entity=Interface]
interface IndicatorStyle {
    [Optional] attribute Length height;
    [Optional] attribute Length width;
    [Optional] attribute Length borderRadius;
    [Optional] attribute Length marginTop;
    [Optional] attribute ResourceColor color;
    [Optional, Deprecated] attribute ResourceColor selectedColor;
    [Optional, Deprecated] attribute Length left;
    [Optional, Deprecated] attribute Length top;
    [Optional, Deprecated] attribute Length right;
    [Optional, Deprecated] attribute Length bottom;
    [Optional, Deprecated] attribute Length size;
    [Optional, Deprecated] attribute boolean mask;
};
