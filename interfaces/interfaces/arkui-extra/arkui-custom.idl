package arkui.component.idlize;

import arkui.component.units;
import arkui.component.common;
import arkui.Graphics.Frame as Frame;
import global.resource.Resource as Resource; 

callback Callback_RangeUpdate = void (i32 start, i32 end);
callback Callback_CreateItem = pointer (i32 index);

[Entity=Class]
interface LazyForEachOps {
    // provide necessary info and callbacks to the ScrollView in the backend
    static void Sync(pointer node, i32 totalCount, Callback_CreateItem creator, Callback_RangeUpdate updater);
};

[Entity=Class]
interface SystemOps {
    static pointer StartFrame();
    static void EndFrame(pointer root);
    static void syncInstanceId(i32 instanceId);
    static void restoreInstanceId();
    static i32 getResourceId(String bundleName, String moduleName, sequence<String> params);
    static void resourceManagerReset();
    static void setFrameCallback(Callback_Number_Void onFrameCallback, Callback_Number_Void onIdleCallback, number delayTime);
    static sequence<number> colorMetricsResourceColor(Resource color);
};

[Entity=Class]
interface FocusController {
    static void requestFocus(String key);
};

[Entity=Class]
interface Scene {
    // attribute Environment environment;
    // readonly attribute sequence<Animation> animations;
    // readonly attribute (Node or undefined) root;
    static async Scene load(optional ResourceStr uri);
    // (Node or undefined) getNodeByPath(String path, optional NodeType type);
    // SceneResourceFactory getResourceFactory();
    void destroy();
};

[Entity=Interface]
interface CustomColors {
    [Optional] attribute ResourceColor brand;
    [Optional] attribute ResourceColor warning;
    [Optional] attribute ResourceColor alert;
    [Optional] attribute ResourceColor confirm;
    [Optional] attribute ResourceColor fontPrimary;
    [Optional] attribute ResourceColor fontSecondary;
    [Optional] attribute ResourceColor fontTertiary;
    [Optional] attribute ResourceColor fontFourth;
    [Optional] attribute ResourceColor fontEmphasize;
    [Optional] attribute ResourceColor fontOnPrimary;
    [Optional] attribute ResourceColor fontOnSecondary;
    [Optional] attribute ResourceColor fontOnTertiary;
    [Optional] attribute ResourceColor fontOnFourth;
    [Optional] attribute ResourceColor iconPrimary;
    [Optional] attribute ResourceColor iconSecondary;
    [Optional] attribute ResourceColor iconTertiary;
    [Optional] attribute ResourceColor iconFourth;
    [Optional] attribute ResourceColor iconEmphasize;
    [Optional] attribute ResourceColor iconSubEmphasize;
    [Optional] attribute ResourceColor iconOnPrimary;
    [Optional] attribute ResourceColor iconOnSecondary;
    [Optional] attribute ResourceColor iconOnTertiary;
    [Optional] attribute ResourceColor iconOnFourth;
    [Optional] attribute ResourceColor backgroundPrimary;
    [Optional] attribute ResourceColor backgroundSecondary;
    [Optional] attribute ResourceColor backgroundTertiary;
    [Optional] attribute ResourceColor backgroundFourth;
    [Optional] attribute ResourceColor backgroundEmphasize;
    [Optional] attribute ResourceColor compForegroundPrimary;
    [Optional] attribute ResourceColor compBackgroundPrimary;
    [Optional] attribute ResourceColor compBackgroundPrimaryTran;
    [Optional] attribute ResourceColor compBackgroundPrimaryContrary;
    [Optional] attribute ResourceColor compBackgroundGray;
    [Optional] attribute ResourceColor compBackgroundSecondary;
    [Optional] attribute ResourceColor compBackgroundTertiary;
    [Optional] attribute ResourceColor compBackgroundEmphasize;
    [Optional] attribute ResourceColor compBackgroundNeutral;
    [Optional] attribute ResourceColor compEmphasizeSecondary;
    [Optional] attribute ResourceColor compEmphasizeTertiary;
    [Optional] attribute ResourceColor compDivider;
    [Optional] attribute ResourceColor compCommonContrary;
    [Optional] attribute ResourceColor compBackgroundFocus;
    [Optional] attribute ResourceColor compFocusedPrimary;
    [Optional] attribute ResourceColor compFocusedSecondary;
    [Optional] attribute ResourceColor compFocusedTertiary;
    [Optional] attribute ResourceColor interactiveHover;
    [Optional] attribute ResourceColor interactivePressed;
    [Optional] attribute ResourceColor interactiveFocus;
    [Optional] attribute ResourceColor interactiveActive;
    [Optional] attribute ResourceColor interactiveSelect;
    [Optional] attribute ResourceColor interactiveClick;
};

[Entity=Interface]
interface WorkerOptions {
    [Optional] attribute String type;
    [Optional] attribute String name;
    [Optional] attribute boolean shared;
};

[Entity=Interface]
interface Event {
    readonly attribute String type;
    readonly attribute i64 timeStamp;
};

[Entity=Interface]
interface ErrorEvent: Event {
    readonly attribute String message;
    readonly attribute String filename;
    readonly attribute number lineno;
    readonly attribute number colno;
    readonly attribute Object error;
};

[Entity=Interface]
interface MessageEvents: Event {
    readonly attribute any data;
};

[Entity=Interface]
interface WorkerEventListener {
    [CallSignature]
    async void invoke(Event event);
};

[Entity=Interface]
interface PostMessageOptions {
    [Optional] attribute sequence<Object> transfer;
};

callback RestrictedWorker_onexit_Callback = void (number code);
callback RestrictedWorker_onerror_Callback = void (ErrorEvent ev);
callback RestrictedWorker_onmessage_Callback = void (MessageEvents event);

// [Entity=Class]
// interface RestrictedWorker {
//     constructor(String scriptURL, optional WorkerOptions options);
//     [Optional] attribute RestrictedWorker_onexit_Callback onexit;
//     [Optional] attribute RestrictedWorker_onerror_Callback onerror;
//     [Optional] attribute RestrictedWorker_onmessage_Callback onmessage;
//     [Optional] attribute RestrictedWorker_onmessage_Callback onmessageerror;
//     [Throws] void postMessage(Object message, sequence<buffer> transfer);
//     [Throws] void postMessage(Object message, optional PostMessageOptions options);
//   [Throws] void postMessageWithSharedSendable(Object message, optional sequence<buffer> transfer);
//     [Throws] void on(String Type, WorkerEventListener listener);
//   [Throws] void once(String Type, WorkerEventListener listener);
// [Throws] void off(String Type, optional WorkerEventListener listener);
//    [Throws] void terminate();
//    [Throws] void addEventListener(String Type, WorkerEventListener listener);
//    [Throws] boolean dispatchEvent(Event event);
//    [Throws] void removeEventListener(String Type, optional WorkerEventListener callback_);
//    [Throws] void removeAllListener();
//    [Throws] void registerGlobalCallObject(String instanceName, Object globalCallObject);
//    [Throws] void unregisterGlobalCallObject(optional String instanceName);
//};
callback Callback_StateStylesChange = void (i32 currentState);

[Entity=Class]
interface StateStylesOps {
    static void onStateStyleChange(pointer node, Callback_StateStylesChange stateStyleChange);
};

[Entity=Class]
interface UIContextAtomicServiceBar {
    static Frame getBarRect();
};

[Entity=Class]
interface BuilderNodeOptions {
    [Optional] attribute  Size selfIdealSize;
    [Optional] attribute  number type;
    [Optional] attribute  String surfaceId;
};

[Entity=Class]
interface BuilderNodeOps {
    constructor();
    void create(Callback_Void buildFunc);
    void disposeNode();
    void setUpdateConfigurationCallback(Callback_Void configurationUpdateFunc);
    void setOptions(BuilderNodeOptions options);
    boolean postTouchEvent(TouchEvent event);
    pointer setRootFrameNodeInBuilderNode(pointer node);
};
