package arkui.RenderNode;

import arkui.component.units;
import arkui.Graphics;

typedef Vector2 Offset_graphics;  // TODO must be removed when names collision problem is resolved

[Entity=Interface]
interface BorderRadiuses_graphics { // TODO must be removed when names collision problem is resolved
    attribute number topLeft;
    attribute number topRight;
    attribute number bottomLeft;
    attribute number bottomRight;
};

[Entity=Interface]
interface RenderNode {
    constructor();
    attribute number backgroundColor;
    attribute boolean clipToFrame;
    attribute number opacity;
    attribute Size size;
    attribute Position position;
    attribute Frame frame;
    attribute Pivot pivot;
    attribute Scale scale;
    attribute Translation translation;
    attribute Rotation rotation;
    attribute Matrix4 transform;
    attribute number shadowColor;
    attribute Offset_graphics shadowOffset;
    attribute String label;
    attribute number shadowAlpha;
    attribute number shadowElevation;
    attribute number shadowRadius;
    attribute EdgeStyles borderStyle;
    attribute Edges borderWidth;
    attribute Edges borderColor;
    attribute BorderRadiuses_graphics borderRadius;
    attribute ShapeMask shapeMask;
    attribute ShapeClip shapeClip;
    attribute boolean markNodeGroup;
    attribute LengthMetricsUnit lengthMetricsUnit;
    void appendChild(RenderNode node);
    void insertChildAfter(RenderNode child, (RenderNode or undefined) sibling);
    void removeChild(RenderNode node);
    void clearChildren();
    (RenderNode or undefined) getChild(number index);
    (RenderNode or undefined) getFirstChild();
    (RenderNode or undefined) getNextSibling();
    (RenderNode or undefined) getPreviousSibling();
    void draw(DrawContext context);
    void invalidate();
    void dispose();
};