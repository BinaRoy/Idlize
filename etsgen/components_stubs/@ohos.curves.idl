package ohos.curves;
[DefaultExport]
namespace curves {
    dictionary Curve {
        [OriginalEnumMemberName=Linear]
        number LINEAR = 0;
        [OriginalEnumMemberName=Ease]
        number EASE = 1;
        [OriginalEnumMemberName=EaseIn]
        number EASE_IN = 2;
        [OriginalEnumMemberName=EaseOut]
        number EASE_OUT = 3;
        [OriginalEnumMemberName=EaseInOut]
        number EASE_IN_OUT = 4;
        [OriginalEnumMemberName=FastOutSlowIn]
        number FAST_OUT_SLOW_IN = 5;
        [OriginalEnumMemberName=LinearOutSlowIn]
        number LINEAR_OUT_SLOW_IN = 6;
        [OriginalEnumMemberName=FastOutLinearIn]
        number FAST_OUT_LINEAR_IN = 7;
        [OriginalEnumMemberName=ExtremeDeceleration]
        number EXTREME_DECELERATION = 8;
        [OriginalEnumMemberName=Sharp]
        number SHARP = 9;
        [OriginalEnumMemberName=Rhythm]
        number RHYTHM = 10;
        [OriginalEnumMemberName=Smooth]
        number SMOOTH = 11;
        [OriginalEnumMemberName=Friction]
        number FRICTION = 12;
    };
    interface ICurve {
        number interpolate(number fraction);
    };
    ICurve initCurve(optional Curve curve);
    ICurve stepsCurve(number count, boolean end);
    [Synthetic]
    callback Callback_Number_Number = number (number fraction);
    ICurve customCurve(Callback_Number_Number interpolate);
    ICurve cubicBezierCurve(number x1, number y1, number x2, number y2);
    ICurve springCurve(number velocity, number mass, number stiffness, number damping);
    ICurve springMotion(optional number response, optional number dampingFraction, optional number overlapDuration);
    ICurve responsiveSpringMotion(optional number response, optional number dampingFraction, optional number overlapDuration);
    ICurve interpolatingSpring(number velocity, number mass, number stiffness, number damping);
};