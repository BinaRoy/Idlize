package api.internal.component.ets;


/**
 * Defines the controller of node container.Provides lifecycle callbacks for the associated NodeContainer
 * and methods to control the child node of the NodeContainer.
 */
[Entity=Class]
interface NodeController {};


/**
 * Defines Text Modifier
 */
[Entity=Class, Interfaces="AttributeModifier", ParentTypeArguments="<object>"]
interface TextModifier {};

/*[Namespace=text]*/
dictionary RectWidthStyle {
    number TIGHT = 0;
    number MAX = 1;
};

/*[Namespace=text]*/
dictionary RectHeightStyle {
    number TIGHT = 0;
    number MAX = 1;
    number INCLUDE_LINE_SPACE_MIDDLE = 2;
    number INCLUDE_LINE_SPACE_TOP = 3;
    number INCLUDE_LINE_SPACE_BOTTOM = 4;
    number STRUT = 5;
};


/**
 * Want is the basic communication component of the system.
 */
[Entity=Class]
interface Want {
    /**
     * bundle name
     */
    [Optional]
    attribute String bundleName;

    /**
     * ability name
     */
    [Optional]
    attribute String abilityName;

    /**
     * device id
     */
    [Optional]
    attribute String deviceId;

    /**
     * The description of a URI in a Want.
     */
    [Optional]
    attribute String uri;

    /**
     * The description of the type in this Want.
     */
    [Optional]
    attribute String type;

    /**
     * The options of the flags in this Want.
     */
    [Optional]
    attribute number flags;

    /**
     * The description of an action in an want.
     */
    [Optional]
    attribute String action;

    /**
     * The description of the WantParams object in an Want
     */
    [Optional]
    attribute record<String, Object> parameters;

    /**
     * The description of a entities in a Want.
     */
    [Optional]
    attribute sequence<String> entities;

    /**
     * The description of an module name in an want.
     */
    [Optional]
    attribute String moduleName;
};


/**
 * Defines the Length Unit.
 */
dictionary LengthUnit {
  /**
   * Logical pixel used in Ace1.0. It's based on frontend design width.
   * For example, when a frontend with 750px design width running on a
   * device with 1080 pixels width, 1px represents 1.44 pixels.
   */
  number PX = 0;

  /**
   * Density independent pixels, one vp is one pixel on a 160 dpi screen.
   */
  number VP = 1;

  /**
   * Scale independent pixels. This is like VP but will be scaled by
   * user's font size preference.
   */
  number FP = 2;

  /**
   * The percentage of either a value from the element's parent or from
   * another property of the element itself.
   */
  number PERCENT = 3;

  /**
   * Logic pixels used in ACE2.0 instead of PX, and PX is the physical pixels in ACE2.0.
   */
  number LPX = 4;
};


/**
 * Defines the Length Metrics.
 */
[Entity=Class]
interface LengthMetrics {
  /**
   * The unit of the LengthMetrics. The default value is LengthUnit::VP.
   */
  attribute LengthUnit unit;

  /**
   * The value of the LengthMetrics.
   */
  attribute number value;

  /**
   * expand for M2 app
   */
  static LengthMetrics px(number value);
  static LengthMetrics vp(number value);
  static LengthMetrics fp(number value);
  static LengthMetrics percent(number value);
  static LengthMetrics lpx(number value);
  static LengthMetrics resource(Resource value);
};

/**
 * The ColorMetrics API declaration, part for M2 app
 */
[Entity=Class]
interface ColorMetrics {
    [Accessor=Getter]
    readonly attribute String color;
    [Accessor=Getter]
    readonly attribute number red;
    [Accessor=Getter]
    readonly attribute number green;
    [Accessor=Getter]
    readonly attribute number blue;
    [Accessor=Getter]
    readonly attribute number alpha;
    static ColorMetrics numeric(number value);
    static ColorMetrics rgba(number red, number green, number blue, optional number alpha);
    static ColorMetrics resourceColor(ResourceColor color);
    ColorMetrics blendColor(ColorMetrics overlayColor);
};

[Entity=Interface]
interface WebHeader {
    attribute String headerKey;
    attribute String headerValue;
};

[Entity=Class]
interface WebviewController {
  static void initializeWebEngine();
  void loadUrl((String or Resource) url, optional sequence<WebHeader> headers);
};

/**
 * The componentSnapshot API declaration , part for M2 app
 */
[Entity=Interface]
interface SnapshotOptions {
    [Optional]
    attribute number scale;
    [Optional]
    attribute boolean waitUntilRenderFinished;
};
[Async, Synthetic]
callback AsyncCallback_image_PixelMap_Void = void (PixelMap result);

[Entity=Class]
interface GlobalScope_ohos_arkui_componentSnapshot {
    static void get(String id, AsyncCallback_image_PixelMap_Void callback, optional SnapshotOptions options);
};

/**
 * The performanceMonitor API declaration, part for M2 app
 */
dictionary PerfMonitorActionType {

    number LAST_DOWN = 0;
    number LAST_UP = 1;
    number FIRST_MOVE = 2;

};
dictionary PerfMonitorSourceType {

    number PERF_TOUCH_EVENT = 0;
    number PERF_MOUSE_EVENT = 1;
    number PERF_TOUCHPAD_EVENT = 2;
    number PERF_JOYSTICK_EVENT = 3;
    number PERF_KEY_EVENT = 4;

};
[Entity=Class]
interface GlobalScope_ohos_arkui_performanceMonitor {
    static void begin(String scene, PerfMonitorActionType startInputType, optional String note);
    static void end(String scene);
    static void recordInputEventTime(PerfMonitorActionType actionType, PerfMonitorSourceType sourceType, number time);
};

callback ErrorCallback = void (BusinessError err);

/**
 * The common shapes API declarations
 */
[Entity=Class]
interface CommonShape {
    CommonShape offset(Position offset);
    CommonShape fill(ResourceColor color);
    CommonShape position(Position position);
};
[Entity=Class]
interface BaseShape {
    BaseShape width(Length width);
    BaseShape height(Length height);
    BaseShape size(SizeOptions size);
};

/**
 * The RectShape declaration
 */
[Entity=Interface]
interface ShapeSize {
    [Optional]
    attribute (number or String) width;
    [Optional]
    attribute (number or String) height;
};
[Entity=Interface]
interface RectShapeOptions: ShapeSize {
    [Optional]
    attribute (number or String or sequence<(number or String)>) radius;
};
[Entity=Interface]
interface RoundRectShapeOptions: ShapeSize {
    [Optional]
    attribute (number or String) radiusWidth;
    [Optional]
    attribute (number or String) radiusHeight;
};

[Entity=Class]
interface RectShape {
    constructor(optional (RectShapeOptions or RoundRectShapeOptions) options);

    // the CommonShapeMethod part
    RectShape offset(Position offset);
    RectShape fill(ResourceColor color);
    RectShape position(Position position);

    // the BaseShape part
    RectShape width(Length width);
    RectShape height(Length height);
    RectShape size(SizeOptions size);

    RectShape radiusWidth((number or String) rWidth);
    RectShape radiusHeight((number or String) rHeight);
    RectShape radius((number or String or sequence<(number or String)>) radius);
};

/**
 *  The CircleShape declaration
 */
[Entity=Class]
interface CircleShape {

    constructor(optional ShapeSize options);

    // the CommonShapeMethod part
    CircleShape offset(Position offset);
    CircleShape fill(ResourceColor color);
    CircleShape position(Position position);

    // the BaseShape part
    CircleShape width(Length width);
    CircleShape height(Length height);
    CircleShape size(SizeOptions size);
};

/**
 *  The EllipseShape declaration
 */
[Entity=Class]
interface EllipseShape {
    constructor(optional ShapeSize options);

    // the CommonShapeMethod part
    EllipseShape offset(Position offset);
    EllipseShape fill(ResourceColor color);
    EllipseShape position(Position position);

    // the BaseShape part
    EllipseShape width(Length width);
    EllipseShape height(Length height);
    EllipseShape size(SizeOptions size);
};

/**
 *  The PathShape declaration
 */
[Entity=Interface]
interface PathShapeOptions {
    [Optional]
    attribute String commands;
};

[Entity=Class]
interface PathShape {
    constructor(optional PathShapeOptions options);

    // the CommonShapeMethod part
    PathShape offset(Position offset);
    PathShape fill(ResourceColor color);
    PathShape position(Position position);

    PathShape commands(String commands);
};

/**
 * The font API declaration, part for M2 app
 */
[Entity=Interface]
interface FontOptions {
    attribute (String or Resource) familyName;
    attribute (String or Resource) familySrc;
};

[Entity=Interface]
interface FontInfo {
    attribute String path;
    attribute String postScriptName;
    attribute String fullName;
    attribute String family;
    attribute String subfamily;
    attribute number weight;
    attribute number width;
    attribute boolean italic;
    attribute boolean monoSpace;
    attribute boolean symbolic;
};

[Entity=Class]
interface GlobalScope_ohos_font {
    static void registerFont(FontOptions options);
    static sequence<String> getSystemFontList();
    static FontInfo getFontByName(String fontName);
};

/**
 * The MeasureUtils API declaration
 */
[Entity=Interface]
interface MeasureOptions {
    attribute (String or Resource) textContent;
    [Optional]
    attribute (number or String or Resource) constraintWidth;
    [Optional]
    attribute (number or String or Resource) fontSize;
    [Optional]
    attribute (number or FontStyle) fontStyle;
    [Optional]
    attribute (number or String or FontWeight) fontWeight;
    [Optional]
    attribute (String or Resource) fontFamily;
    [Optional]
    attribute (number or String) letterSpacing;
    [Optional]
    attribute (number or TextAlign) textAlign;
    [Optional]
    attribute (number or TextOverflow) overflow;
    [Optional]
    attribute number maxLines;
    [Optional]
    attribute (number or String or Resource) lineHeight;
    [Optional]
    attribute (number or String) baselineOffset;
    [Optional]
    attribute (number or TextCase) textCase;
    [Optional]
    attribute (number or String) textIndent;
    [Optional]
    attribute WordBreak wordBreak;
};

[Entity=Class]
interface GlobalScope_ohos_measure_utils {
    static number measureText(MeasureOptions options);
    static SizeOptions measureTextSize(MeasureOptions options);
};

/**
 * The SymbolEffect,ReplaceSymbolEffect,ScaleSymbolEffect API declaration, part for M2 app
 */
dictionary EffectDirection {
    number DOWN = 0;
    number UP = 1;
};

dictionary EffectScope {
    number LAYER = 0;
    number WHOLE = 1;
};

[Entity=Class]
interface SymbolEffect {
};

[Entity=Class]
interface ScaleSymbolEffect: SymbolEffect {
    constructor(optional EffectScope scope, optional EffectDirection direction);
    [Optional]
    attribute EffectScope scope;
    [Optional]
    attribute EffectDirection direction;
};

[Entity=Class]
interface ReplaceSymbolEffect: SymbolEffect {
    constructor(optional EffectScope scope);
    [Optional]
    attribute EffectScope scope;
};

[Entity=Interface]
interface FontInfo {
    attribute String path;
    attribute String postScriptName;
    attribute String fullName;
    attribute String family;
    attribute String subfamily;
    attribute number weight;
    attribute number width;
    attribute boolean italic;
    attribute boolean monoSpace;
    attribute boolean symbolic;
};

[Entity=Interface]
interface TouchPoint {

    attribute Dimension x;
    attribute Dimension y;

};