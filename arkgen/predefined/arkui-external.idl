package org.openharmony.arkui;


/**
 * Defines the controller of node container.Provides lifecycle callbacks for the associated NodeContainer
 * and methods to control the child node of the NodeContainer.
 */
[Entity=Class]
interface NodeController {};


/**
 * Defines Text Modifier
 */
[Entity=Class, Interfaces="AttributeModifier", ParentTypeArguments="<object>"]
interface TextModifier {};

/*[Namespace=text]*/
dictionary RectWidthStyle {
    number TIGHT = 0;
    number MAX = 1;
};

/*[Namespace=text]*/
dictionary RectHeightStyle {
    number TIGHT = 0;
    number MAX = 1;
    number INCLUDE_LINE_SPACE_MIDDLE = 2;
    number INCLUDE_LINE_SPACE_TOP = 3;
    number INCLUDE_LINE_SPACE_BOTTOM = 4;
    number STRUT = 5;
};


/**
 * Want is the basic communication component of the system.
 */
[Entity=Class]
interface Want {
    /**
     * bundle name
     */
    [Optional]
    attribute String bundleName;

    /**
     * ability name
     */
    [Optional]
    attribute String abilityName;

    /**
     * device id
     */
    [Optional]
    attribute String deviceId;

    /**
     * The description of a URI in a Want.
     */
    [Optional]
    attribute String uri;

    /**
     * The description of the type in this Want.
     */
    [Optional]
    attribute String type;

    /**
     * The options of the flags in this Want.
     */
    [Optional]
    attribute number flags;

    /**
     * The description of an action in an want.
     */
    [Optional]
    attribute String action;

    /**
     * The description of the WantParams object in an Want
     */
    [Optional]
    attribute record<String, Object> parameters;

    /**
     * The description of a entities in a Want.
     */
    [Optional]
    attribute sequence<String> entities;

    /**
     * The description of an module name in an want.
     */
    [Optional]
    attribute String moduleName;
};


/**
 * Defines the Length Unit.
 */
dictionary LengthUnit {
  /**
   * Logical pixel used in Ace1.0. It's based on frontend design width.
   * For example, when a frontend with 750px design width running on a
   * device with 1080 pixels width, 1px represents 1.44 pixels.
   */
  number PX = 0;

  /**
   * Density independent pixels, one vp is one pixel on a 160 dpi screen.
   */
  number VP = 1;

  /**
   * Scale independent pixels. This is like VP but will be scaled by
   * user's font size preference.
   */
  number FP = 2;

  /**
   * The percentage of either a value from the element's parent or from
   * another property of the element itself.
   */
  number PERCENT = 3;

  /**
   * Logic pixels used in ACE2.0 instead of PX, and PX is the physical pixels in ACE2.0.
   */
  number LPX = 4;
};


/**
 * Defines the Length Metrics.
 */
[Entity=Class]
interface LengthMetrics {
  /**
   * The unit of the LengthMetrics. The default value is LengthUnit::VP.
   */
  attribute LengthUnit unit;

  /**
   * The value of the LengthMetrics.
   */
  attribute number value;

  /**
   * expand for M2 app
   */
  static LengthMetrics px(number value);
  static LengthMetrics resource(Resource value);
};

[Entity=Interface]
interface WebHeader {
    attribute String headerKey;
    attribute String headerValue;
};

[Entity=Class]
interface WebviewController {
  static void initializeWebEngine();
  void loadUrl((String or Resource) url, optional sequence<WebHeader> headers);
};

/**
 * The componentSnapshot API declaration , part for M2 app
 */
[Entity=Interface]
interface SnapshotOptions {
    [Optional]
    attribute number scale;
    [Optional]
    attribute boolean waitUntilRenderFinished;
};
[Async, Synthetic]
callback AsyncCallback_image_PixelMap_Void = void (PixelMap result);

[Entity=Class]
interface GlobalScope_ohos_arkui_componentSnapshot {
    static void get(String id, AsyncCallback_image_PixelMap_Void callback, optional SnapshotOptions options);
};

/**
 * The performanceMonitor API declaration, part for M2 app
 */
dictionary PerfMonitorActionType {

    number LAST_DOWN = 0;
    number LAST_UP = 1;
    number FIRST_MOVE = 2;

};
dictionary PerfMonitorSourceType {

    number PERF_TOUCH_EVENT = 0;
    number PERF_MOUSE_EVENT = 1;
    number PERF_TOUCHPAD_EVENT = 2;
    number PERF_JOYSTICK_EVENT = 3;
    number PERF_KEY_EVENT = 4;

};
[Entity=Class]
interface GlobalScope_ohos_arkui_performanceMonitor {
    static void begin(String scene, PerfMonitorActionType startInputType, optional String note);
    static void end(String scene);
    static void recordInputEventTime(PerfMonitorActionType actionType, PerfMonitorSourceType sourceType, number time);
};