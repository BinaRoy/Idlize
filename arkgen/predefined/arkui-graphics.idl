package org.openharmony.arkui;

[Entity=Interface]
interface Size {

    attribute number width;
    attribute number height;

};
[Entity=Class]
interface DrawContext {

    [Accessor=Getter]
    readonly attribute Size size;
    [Accessor=Getter]
    readonly attribute Size sizeInPixel;
    [Accessor=Getter]
    readonly attribute DrawingCanvas canvas;

};
[Entity=Interface]
interface Vector2 {

    attribute number x;
    attribute number y;

};
[Entity=Interface]
interface Vector3 {

    attribute number x;
    attribute number y;
    attribute number z;

};
[Entity=Tuple]
interface Matrix4 {

    attribute number value0;
    attribute number value1;
    attribute number value2;
    attribute number value3;
    attribute number value4;
    attribute number value5;
    attribute number value6;
    attribute number value7;
    attribute number value8;
    attribute number value9;
    attribute number value10;
    attribute number value11;
    attribute number value12;
    attribute number value13;
    attribute number value14;
    attribute number value15;

};

[Entity=Interface]
interface Frame {

    attribute number x;
    attribute number y;
    attribute number width;
    attribute number height;

};

[Entity=Interface]
interface Edges {

    [Optional]
    attribute Dimension top;
    [Optional]
    attribute Dimension left;
    [Optional]
    attribute Dimension bottom;
    [Optional]
    attribute Dimension right;

};

/**
 * Defines the Length Unit.
 */
dictionary LengthUnit {
  /**
   * Logical pixel used in Ace1.0. It's based on frontend design width.
   * For example, when a frontend with 750px design width running on a
   * device with 1080 pixels width, 1px represents 1.44 pixels.
   */
  number PX = 0;

  /**
   * Density independent pixels, one vp is one pixel on a 160 dpi screen.
   */
  number VP = 1;

  /**
   * Scale independent pixels. This is like VP but will be scaled by
   * user's font size preference.
   */
  number FP = 2;

  /**
   * The percentage of either a value from the element's parent or from
   * another property of the element itself.
   */
  number PERCENT = 3;

  /**
   * Logic pixels used in ACE2.0 instead of PX, and PX is the physical pixels in ACE2.0.
   */
  number LPX = 4;
};

// [Entity=Interface, TypeParameters="T"]
// interface SizeT {
//
//     attribute T width;
//     attribute T height;
//
// };

dictionary LengthMetricsUnit {

    number DEFAULT = 0;
    number PX = 1;

};

/**
 * Defines the Length Metrics.
 */
[Entity=Class]
interface LengthMetrics {
  /**
   * The unit of the LengthMetrics. The default value is LengthUnit::VP.
   */
  attribute LengthUnit unit;

  /**
   * The value of the LengthMetrics.
   */
  attribute number value;

  static LengthMetrics px(number value);
  static LengthMetrics vp(number value);
  static LengthMetrics fp(number value);
  static LengthMetrics percent(number value);
  static LengthMetrics lpx(number value);
  static LengthMetrics resource(Resource value);
};
[Entity=Class]
interface ColorMetrics {

    [Accessor=Getter]
    readonly attribute String color;
    [Accessor=Getter]
    readonly attribute number red;
    [Accessor=Getter]
    readonly attribute number green;
    [Accessor=Getter]
    readonly attribute number blue;
    [Accessor=Getter]
    readonly attribute number alpha;
    static ColorMetrics numeric(number value);
    static ColorMetrics rgba(number red, number green, number blue, optional number alpha);
    static ColorMetrics resourceColor(ResourceColor color);
    ColorMetrics blendColor(ColorMetrics overlayColor);

};


[Entity=Interface]
interface CornerRadius {

    attribute Vector2 topLeft;
    attribute Vector2 topRight;
    attribute Vector2 bottomLeft;
    attribute Vector2 bottomRight;

};

[Entity=Interface]
interface BorderRadiuses {

    attribute number topLeft;
    attribute number topRight;
    attribute number bottomLeft;
    attribute number bottomRight;

};

[Entity=Interface]
interface Rect {

    attribute number left;
    attribute number top;
    attribute number right;
    attribute number bottom;

};

[Entity=Interface]
interface RoundRect {

    attribute Rect rect;
    attribute CornerRadius corners;

};
[Entity=Interface]
interface Circle {

    attribute number centerX;
    attribute number centerY;
    attribute number radius;

};
[Entity=Interface]
interface CommandPath {

    attribute String commands;

};
[Entity=Class]
interface ShapeMask {

    constructor();
    attribute number fillColor;
    attribute number strokeColor;
    attribute number strokeWidth;
    void setRectShape(Rect rect);
    void setRoundRectShape(RoundRect roundRect);
    void setCircleShape(Circle circle);
    void setOvalShape(Rect oval);
    void setCommandPath(CommandPath path);

};
[Entity=Class]
interface ShapeClip {

    constructor();
    void setRectShape(Rect rect);
    void setRoundRectShape(RoundRect roundRect);
    void setCircleShape(Circle circle);
    void setOvalShape(Rect oval);
    void setCommandPath(CommandPath path);

};

Edges edgeColors(number all);
Edges edgeWidths(number all);
// EdgeStyles borderStyles(BorderStyle all);
BorderRadiuses borderRadiuses(number all);
