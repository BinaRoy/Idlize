/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


typedef (String or f64 or boolean) es2panda_variantDoubleCharArrayBool;


[Entity=Class] interface es2panda_Config {};
[Entity=Class] interface es2panda_Context {};
[Entity=Class] interface es2panda_Program {};
[Entity=Class] interface es2panda_ExternalSource {};
[Entity=Class] interface es2panda_ArkTsConfig {};
[Entity=Class] interface es2panda_AstNode {};
[Entity=Class] interface es2panda_FunctionSignature {};
[Entity=Class] interface es2panda_SourcePosition {};
[Entity=Class] interface es2panda_SourceRange {};
[Entity=Class] interface es2panda_SrcDumper {};
[Entity=Class] interface es2panda_AstDumper {};
[Entity=Class] interface es2panda_LabelPair {};
[Entity=Class] interface es2panda_ScriptFunctionData {};
[Entity=Class] interface es2panda_ImportSource {};
[Entity=Class] interface es2panda_Signature {};
[Entity=Class] interface es2panda_SignatureInfo {};
[Entity=Class] interface es2panda_CheckerContext {};
[Entity=Class] interface es2panda_ResolveResult {};
[Entity=Class] interface es2panda_ValidationInfo {};
[Entity=Class] interface es2panda_Type {};
[Entity=Class] interface es2panda_TypeRelation {};
[Entity=Class] interface es2panda_IndexInfo {};
[Entity=Class] interface es2panda_GlobalTypesHolder {};
[Entity=Class] interface es2panda_ObjectDescriptor {};
[Entity=Class] interface es2panda_Variable {};
[Entity=Class] interface es2panda_Scope {};
[Entity=Class] interface es2panda_ScopeFindResult {};
[Entity=Class] interface es2panda_BindingProps {};
[Entity=Class] interface es2panda_Declaration {};
[Entity=Class] interface es2panda_RecordTable {};
[Entity=Class] interface es2panda_BoundContext {};
[Entity=Class] interface es2panda_AstVisitor {};
[Entity=Class] interface es2panda_AstVerifier {};
[Entity=Class] interface es2panda_VerifierMessage {};
[Entity=Class] interface es2panda_CodeGen {};
[Entity=Class] interface es2panda_VReg {};
[Entity=Class] interface es2panda_IRNode {};
[Entity=Class] interface es2panda_ErrorLogger {};
[Entity=Class] interface es2panda_VerificationContext {};


interface NodeTraverser {
    void Do(es2panda_AstNode e2p_node);
};

interface NodeTransformer {
    es2panda_AstNode Do(es2panda_AstNode e2p_node);
};

interface NodePredicate {
    boolean Do(es2panda_AstNode e2p_node);
};

interface PropertyProcessor {
    es2panda_Variable Do(es2panda_Variable e2p_variable, es2panda_Type e2p_type);
};

interface PropertyTraverser {
    void Do(es2panda_Variable e2p_variable);
};

interface ClassBuilder {
    void Do(sequence<es2panda_AstNode> e2p_node, u32 size);
};

interface MethodBuilder {
    void Do(sequence<es2panda_AstNode> statements, u32 sizeStatements, sequence<es2panda_AstNode> expression,
        u32 sizeExpression, sequence<es2panda_Type> e2p_type);
};

interface ClassInitializerBuilder {
    void Do(sequence<es2panda_AstNode> statements, u32 sizeStatements, sequence<es2panda_AstNode> expression,
        u32 sizeExpression);
};

interface es2panda_DynamicImportData {
    attribute es2panda_AstNode import_node;
    attribute es2panda_AstNode specifier;
    attribute es2panda_Variable variable;
};

dictionary es2panda_ContextState {
    i32 ES2PANDA_STATE_NEW = 0;
    i32 ES2PANDA_STATE_PARSED = 1;
    i32 ES2PANDA_STATE_SCOPE_INITED = 2;
    i32 ES2PANDA_STATE_BOUND = 3;
    i32 ES2PANDA_STATE_CHECKED = 4;
    i32 ES2PANDA_STATE_LOWERED = 5;
    i32 ES2PANDA_STATE_ASM_GENERATED = 6;
    i32 ES2PANDA_STATE_BIN_GENERATED = 7;
    i32 ES2PANDA_STATE_ERROR = 8;
};

[Entity=Class] interface VoidPtr {}; // void *


dictionary Es2pandaAstNodeType {
    i32 AST_NODE_TYPE_ARROW_FUNCTION_EXPRESSION = 0;
    i32 AST_NODE_TYPE_ANNOTATION_DECLARATION = 1;
    i32 AST_NODE_TYPE_ANNOTATION_USAGE = 2;
    i32 AST_NODE_TYPE_ASSERT_STATEMENT = 3;
    i32 AST_NODE_TYPE_AWAIT_EXPRESSION = 4;
    i32 AST_NODE_TYPE_BIGINT_LITERAL = 5;
    i32 AST_NODE_TYPE_BINARY_EXPRESSION = 6;
    i32 AST_NODE_TYPE_BLOCK_STATEMENT = 7;
    i32 AST_NODE_TYPE_BOOLEAN_LITERAL = 8;
    i32 AST_NODE_TYPE_BREAK_STATEMENT = 9;
    i32 AST_NODE_TYPE_CALL_EXPRESSION = 10;
    i32 AST_NODE_TYPE_CATCH_CLAUSE = 11;
    i32 AST_NODE_TYPE_CHAIN_EXPRESSION = 12;
    i32 AST_NODE_TYPE_CHAR_LITERAL = 13;
    i32 AST_NODE_TYPE_CLASS_DEFINITION = 14;
    i32 AST_NODE_TYPE_CLASS_DECLARATION = 15;
    i32 AST_NODE_TYPE_CLASS_EXPRESSION = 16;
    i32 AST_NODE_TYPE_CLASS_PROPERTY = 17;
    i32 AST_NODE_TYPE_CLASS_STATIC_BLOCK = 18;
    i32 AST_NODE_TYPE_CONDITIONAL_EXPRESSION = 19;
    i32 AST_NODE_TYPE_CONTINUE_STATEMENT = 20;
    i32 AST_NODE_TYPE_DEBUGGER_STATEMENT = 21;
    i32 AST_NODE_TYPE_DECORATOR = 22;
    i32 AST_NODE_TYPE_DIRECT_EVAL = 23;
    i32 AST_NODE_TYPE_DO_WHILE_STATEMENT = 24;
    i32 AST_NODE_TYPE_EMPTY_STATEMENT = 25;
    i32 AST_NODE_TYPE_EXPORT_ALL_DECLARATION = 26;
    i32 AST_NODE_TYPE_EXPORT_DEFAULT_DECLARATION = 27;
    i32 AST_NODE_TYPE_EXPORT_NAMED_DECLARATION = 28;
    i32 AST_NODE_TYPE_EXPORT_SPECIFIER = 29;
    i32 AST_NODE_TYPE_EXPRESSION_STATEMENT = 30;
    i32 AST_NODE_TYPE_FOR_IN_STATEMENT = 31;
    i32 AST_NODE_TYPE_FOR_OF_STATEMENT = 32;
    i32 AST_NODE_TYPE_FOR_UPDATE_STATEMENT = 33;
    i32 AST_NODE_TYPE_FUNCTION_DECLARATION = 34;
    i32 AST_NODE_TYPE_FUNCTION_EXPRESSION = 35;
    i32 AST_NODE_TYPE_IDENTIFIER = 36;
    i32 AST_NODE_TYPE_DUMMYNODE = 37;
    i32 AST_NODE_TYPE_IF_STATEMENT = 38;
    i32 AST_NODE_TYPE_IMPORT_DECLARATION = 39;
    i32 AST_NODE_TYPE_IMPORT_EXPRESSION = 40;
    i32 AST_NODE_TYPE_IMPORT_DEFAULT_SPECIFIER = 41;
    i32 AST_NODE_TYPE_IMPORT_NAMESPACE_SPECIFIER = 42;
    i32 AST_NODE_TYPE_IMPORT_SPECIFIER = 43;
    i32 AST_NODE_TYPE_LABELLED_STATEMENT = 44;
    i32 AST_NODE_TYPE_MEMBER_EXPRESSION = 45;
    i32 AST_NODE_TYPE_META_PROPERTY_EXPRESSION = 46;
    i32 AST_NODE_TYPE_METHOD_DEFINITION = 47;
    i32 AST_NODE_TYPE_NAMED_TYPE = 48;
    i32 AST_NODE_TYPE_NAMESPACE_DECLARATION = 49;
    i32 AST_NODE_TYPE_NAMESPACE_DEFINITION = 50;
    i32 AST_NODE_TYPE_NEW_EXPRESSION = 51;
    i32 AST_NODE_TYPE_NULL_LITERAL = 52;
    i32 AST_NODE_TYPE_UNDEFINED_LITERAL = 53;
    i32 AST_NODE_TYPE_NUMBER_LITERAL = 54;
    i32 AST_NODE_TYPE_OMITTED_EXPRESSION = 55;
    i32 AST_NODE_TYPE_PREFIX_ASSERTION_EXPRESSION = 56;
    i32 AST_NODE_TYPE_PROPERTY = 57;
    i32 AST_NODE_TYPE_REGEXP_LITERAL = 58;
    i32 AST_NODE_TYPE_REEXPORT_STATEMENT = 59;
    i32 AST_NODE_TYPE_RETURN_STATEMENT = 60;
    i32 AST_NODE_TYPE_SCRIPT_FUNCTION = 61;
    i32 AST_NODE_TYPE_SEQUENCE_EXPRESSION = 62;
    i32 AST_NODE_TYPE_STRING_LITERAL = 63;
    i32 AST_NODE_TYPE_ETS_NULL_TYPE = 64;
    i32 AST_NODE_TYPE_ETS_UNDEFINED_TYPE = 65;
    i32 AST_NODE_TYPE_ETS_NEVER_TYPE = 66;
    i32 AST_NODE_TYPE_ETS_STRING_LITERAL_TYPE = 67;
    i32 AST_NODE_TYPE_ETS_FUNCTION_TYPE = 68;
    i32 AST_NODE_TYPE_ETS_WILDCARD_TYPE = 69;
    i32 AST_NODE_TYPE_ETS_PRIMITIVE_TYPE = 70;
    i32 AST_NODE_TYPE_ETS_PACKAGE_DECLARATION = 71;
    i32 AST_NODE_TYPE_ETS_CLASS_LITERAL = 72;
    i32 AST_NODE_TYPE_ETS_TYPE_REFERENCE = 73;
    i32 AST_NODE_TYPE_ETS_TYPE_REFERENCE_PART = 74;
    i32 AST_NODE_TYPE_ETS_UNION_TYPE = 75;
    i32 AST_NODE_TYPE_ETS_LAUNCH_EXPRESSION = 76;
    i32 AST_NODE_TYPE_ETS_NEW_ARRAY_INSTANCE_EXPRESSION = 77;
    i32 AST_NODE_TYPE_ETS_NEW_MULTI_DIM_ARRAY_INSTANCE_EXPRESSION = 78;
    i32 AST_NODE_TYPE_ETS_NEW_CLASS_INSTANCE_EXPRESSION = 79;
    i32 AST_NODE_TYPE_ETS_IMPORT_DECLARATION = 80;
    i32 AST_NODE_TYPE_ETS_PARAMETER_EXPRESSION = 81;
    i32 AST_NODE_TYPE_ETS_TUPLE = 82;
    i32 AST_NODE_TYPE_ETS_SCRIPT = 83;
    i32 AST_NODE_TYPE_SUPER_EXPRESSION = 84;
    i32 AST_NODE_TYPE_STRUCT_DECLARATION = 85;
    i32 AST_NODE_TYPE_SWITCH_CASE_STATEMENT = 86;
    i32 AST_NODE_TYPE_SWITCH_STATEMENT = 87;
    i32 AST_NODE_TYPE_TS_ENUM_DECLARATION = 88;
    i32 AST_NODE_TYPE_TS_ENUM_MEMBER = 89;
    i32 AST_NODE_TYPE_TS_EXTERNAL_MODULE_REFERENCE = 90;
    i32 AST_NODE_TYPE_TS_NUMBER_KEYWORD = 91;
    i32 AST_NODE_TYPE_TS_ANY_KEYWORD = 92;
    i32 AST_NODE_TYPE_TS_STRING_KEYWORD = 93;
    i32 AST_NODE_TYPE_TS_BOOLEAN_KEYWORD = 94;
    i32 AST_NODE_TYPE_TS_VOID_KEYWORD = 95;
    i32 AST_NODE_TYPE_TS_UNDEFINED_KEYWORD = 96;
    i32 AST_NODE_TYPE_TS_UNKNOWN_KEYWORD = 97;
    i32 AST_NODE_TYPE_TS_OBJECT_KEYWORD = 98;
    i32 AST_NODE_TYPE_TS_BIGINT_KEYWORD = 99;
    i32 AST_NODE_TYPE_TS_NEVER_KEYWORD = 100;
    i32 AST_NODE_TYPE_TS_NON_NULL_EXPRESSION = 101;
    i32 AST_NODE_TYPE_TS_NULL_KEYWORD = 102;
    i32 AST_NODE_TYPE_TS_ARRAY_TYPE = 103;
    i32 AST_NODE_TYPE_TS_UNION_TYPE = 104;
    i32 AST_NODE_TYPE_TS_TYPE_LITERAL = 105;
    i32 AST_NODE_TYPE_TS_PROPERTY_SIGNATURE = 106;
    i32 AST_NODE_TYPE_TS_METHOD_SIGNATURE = 107;
    i32 AST_NODE_TYPE_TS_SIGNATURE_DECLARATION = 108;
    i32 AST_NODE_TYPE_TS_PARENT_TYPE = 109;
    i32 AST_NODE_TYPE_TS_LITERAL_TYPE = 110;
    i32 AST_NODE_TYPE_TS_INFER_TYPE = 111;
    i32 AST_NODE_TYPE_TS_CONDITIONAL_TYPE = 112;
    i32 AST_NODE_TYPE_TS_IMPORT_TYPE = 113;
    i32 AST_NODE_TYPE_TS_INTERSECTION_TYPE = 114;
    i32 AST_NODE_TYPE_TS_MAPPED_TYPE = 115;
    i32 AST_NODE_TYPE_TS_MODULE_BLOCK = 116;
    i32 AST_NODE_TYPE_TS_THIS_TYPE = 117;
    i32 AST_NODE_TYPE_TS_TYPE_OPERATOR = 118;
    i32 AST_NODE_TYPE_TS_TYPE_PARAMETER = 119;
    i32 AST_NODE_TYPE_TS_TYPE_PARAMETER_DECLARATION = 120;
    i32 AST_NODE_TYPE_TS_TYPE_PARAMETER_INSTANTIATION = 121;
    i32 AST_NODE_TYPE_TS_TYPE_PREDICATE = 122;
    i32 AST_NODE_TYPE_TS_PARAMETER_PROPERTY = 123;
    i32 AST_NODE_TYPE_TS_MODULE_DECLARATION = 124;
    i32 AST_NODE_TYPE_TS_IMPORT_EQUALS_DECLARATION = 125;
    i32 AST_NODE_TYPE_TS_FUNCTION_TYPE = 126;
    i32 AST_NODE_TYPE_TS_CONSTRUCTOR_TYPE = 127;
    i32 AST_NODE_TYPE_TS_TYPE_ALIAS_DECLARATION = 128;
    i32 AST_NODE_TYPE_TS_TYPE_REFERENCE = 129;
    i32 AST_NODE_TYPE_TS_QUALIFIED_NAME = 130;
    i32 AST_NODE_TYPE_TS_INDEXED_ACCESS_TYPE = 131;
    i32 AST_NODE_TYPE_TS_INTERFACE_DECLARATION = 132;
    i32 AST_NODE_TYPE_TS_INTERFACE_BODY = 133;
    i32 AST_NODE_TYPE_TS_INTERFACE_HERITAGE = 134;
    i32 AST_NODE_TYPE_TS_TUPLE_TYPE = 135;
    i32 AST_NODE_TYPE_TS_NAMED_TUPLE_MEMBER = 136;
    i32 AST_NODE_TYPE_TS_INDEX_SIGNATURE = 137;
    i32 AST_NODE_TYPE_TS_TYPE_QUERY = 138;
    i32 AST_NODE_TYPE_TS_AS_EXPRESSION = 139;
    i32 AST_NODE_TYPE_TS_CLASS_IMPLEMENTS = 140;
    i32 AST_NODE_TYPE_TS_TYPE_ASSERTION = 141;
    i32 AST_NODE_TYPE_TAGGED_TEMPLATE_EXPRESSION = 142;
    i32 AST_NODE_TYPE_TEMPLATE_ELEMENT = 143;
    i32 AST_NODE_TYPE_TEMPLATE_LITERAL = 144;
    i32 AST_NODE_TYPE_THIS_EXPRESSION = 145;
    i32 AST_NODE_TYPE_TYPEOF_EXPRESSION = 146;
    i32 AST_NODE_TYPE_THROW_STATEMENT = 147;
    i32 AST_NODE_TYPE_TRY_STATEMENT = 148;
    i32 AST_NODE_TYPE_UNARY_EXPRESSION = 149;
    i32 AST_NODE_TYPE_UPDATE_EXPRESSION = 150;
    i32 AST_NODE_TYPE_VARIABLE_DECLARATION = 151;
    i32 AST_NODE_TYPE_VARIABLE_DECLARATOR = 152;
    i32 AST_NODE_TYPE_WHILE_STATEMENT = 153;
    i32 AST_NODE_TYPE_YIELD_EXPRESSION = 154;
    i32 AST_NODE_TYPE_OPAQUE_TYPE_NODE = 155;
    i32 AST_NODE_TYPE_BLOCK_EXPRESSION = 156;
    i32 AST_NODE_TYPE_ERROR_TYPE_NODE = 157;
    i32 AST_NODE_TYPE_ARRAY_EXPRESSION = 158;
    i32 AST_NODE_TYPE_ARRAY_PATTERN = 159;
    i32 AST_NODE_TYPE_ASSIGNMENT_EXPRESSION = 160;
    i32 AST_NODE_TYPE_ASSIGNMENT_PATTERN = 161;
    i32 AST_NODE_TYPE_OBJECT_EXPRESSION = 162;
    i32 AST_NODE_TYPE_OBJECT_PATTERN = 163;
    i32 AST_NODE_TYPE_SPREAD_ELEMENT = 164;
    i32 AST_NODE_TYPE_REST_ELEMENT = 165;
};

dictionary Es2pandaScopeType {
    i32 SCOPE_TYPE_PARAM = 0;
    i32 SCOPE_TYPE_CATCH_PARAM = 1;
    i32 SCOPE_TYPE_FUNCTION_PARAM = 2;
    i32 SCOPE_TYPE_CATCH = 3;
    i32 SCOPE_TYPE_CLASS = 4;
    i32 SCOPE_TYPE_ANNOTATION = 5;
    i32 SCOPE_TYPE_ANNOTATIONPARAMSCOPE = 6;
    i32 SCOPE_TYPE_LOCAL = 7;
    i32 SCOPE_TYPE_LOCAL_WITH_ALIAS = 8;
    i32 SCOPE_TYPE_LOOP = 9;
    i32 SCOPE_TYPE_LOOP_DECL = 10;
    i32 SCOPE_TYPE_FUNCTION = 11;
    i32 SCOPE_TYPE_GLOBAL = 12;
    i32 SCOPE_TYPE_MODULE = 13;
};

dictionary Es2pandaDeclType {
    i32 DECL_TYPE_NONE = 0;
    i32 DECL_TYPE_VAR = 1;
    i32 DECL_TYPE_LET = 2;
    i32 DECL_TYPE_CONST = 3;
    i32 DECL_TYPE_LABEL = 4;
    i32 DECL_TYPE_READONLY = 5;
    i32 DECL_TYPE_FUNC = 6;
    i32 DECL_TYPE_PARAM = 7;
    i32 DECL_TYPE_IMPORT = 8;
    i32 DECL_TYPE_DYNAMIC_IMPORT = 9;
    i32 DECL_TYPE_EXPORT = 10;
    i32 DECL_TYPE_ANNOTATIONDECL = 11;
    i32 DECL_TYPE_ANNOTATIONUSAGE = 12;
    i32 DECL_TYPE_TYPE_ALIAS = 13;
    i32 DECL_TYPE_NAMESPACE = 14;
    i32 DECL_TYPE_INTERFACE = 15;
    i32 DECL_TYPE_ENUM_LITERAL = 16;
    i32 DECL_TYPE_TYPE_PARAMETER = 17;
    i32 DECL_TYPE_PROPERTY = 18;
    i32 DECL_TYPE_CLASS = 19;
    i32 DECL_TYPE_METHOD = 20;
    i32 DECL_TYPE_ENUM = 21;
};

dictionary Es2pandaResolveBindingOptions {
    i32 RESOLVE_BINDING_OPTIONS_BINDINGS = 0;
    i32 RESOLVE_BINDING_OPTIONS_INTERFACES = 1;
    i32 RESOLVE_BINDING_OPTIONS_VARIABLES = 2;
    i32 RESOLVE_BINDING_OPTIONS_METHODS = 4;
    i32 RESOLVE_BINDING_OPTIONS_DECLARATION = 8;
    i32 RESOLVE_BINDING_OPTIONS_STATIC_VARIABLES = 16;
    i32 RESOLVE_BINDING_OPTIONS_STATIC_METHODS = 32;
    i32 RESOLVE_BINDING_OPTIONS_STATIC_DECLARATION = 64;
    i32 RESOLVE_BINDING_OPTIONS_TYPE_ALIASES = 128;
    i32 RESOLVE_BINDING_OPTIONS_ALL = 256;
    i32 RESOLVE_BINDING_OPTIONS_ALL_NON_TYPE = 512;
    i32 RESOLVE_BINDING_OPTIONS_ALL_VARIABLES = 18;
    i32 RESOLVE_BINDING_OPTIONS_ALL_METHOD = 36;
    i32 RESOLVE_BINDING_OPTIONS_ALL_DECLARATION = 72;
    i32 RESOLVE_BINDING_OPTIONS_ALL_STATIC = 112;
    i32 RESOLVE_BINDING_OPTIONS_ALL_NON_STATIC = 14;
    i32 RESOLVE_BINDING_OPTIONS_LAST = 128;
};

dictionary Es2pandaVariableKind {
    i32 VARIABLE_KIND_NONE = 0;
    i32 VARIABLE_KIND_VAR = 1;
    i32 VARIABLE_KIND_LEXICAL = 2;
    i32 VARIABLE_KIND_FUNCTION = 3;
    i32 VARIABLE_KIND_MODULE = 4;
};


typedef u64 Es2pandaVariableFlags;

dictionary Es2pandaLetOrConstStatus {
    i32 LET_OR_CONST_STATUS_INITIALIZED = 0;
    i32 LET_OR_CONST_STATUS_UNINITIALIZED = 1;
};

dictionary Es2pandaScopeFlags {
    i32 SCOPE_FLAGS_NONE = 0;
    i32 SCOPE_FLAGS_SET_LEXICAL_FUNCTION = 1;
    i32 SCOPE_FLAGS_USE_ARGS = 2;
    i32 SCOPE_FLAGS_USE_SUPER = 4;
    i32 SCOPE_FLAGS_INNER_ARROW = 8;
    i32 SCOPE_FLAGS_NO_REG_STORE = 16;
    i32 SCOPE_FLAGS_DECL_SCOPE = 32;
    i32 SCOPE_FLAGS_FIELD_SCOPE = 64;
    i32 SCOPE_FLAGS_METHOD_SCOPE = 128;
    i32 SCOPE_FLAGS_STATIC = 256;
    i32 SCOPE_FLAGS_TYPE_ALIAS = 512;
    i32 SCOPE_FLAGS_LOOP_SCOPE = 1024;
    i32 SCOPE_FLAGS_STATIC_DECL_SCOPE = 288;
    i32 SCOPE_FLAGS_STATIC_FIELD_SCOPE = 320;
    i32 SCOPE_FLAGS_STATIC_METHOD_SCOPE = 384;
};

dictionary Es2pandaEnum {
    i32 ENUM_NODE_HAS_PARENT = 0;
    i32 ENUM_NODE_HAS_SOURCE_RANGE = 1;
    i32 ENUM_EVERY_CHILD_HAS_VALID_PARENT = 2;
    i32 ENUM_EVERY_CHILD_IN_PARENT_RANGE = 3;
    i32 ENUM_VARIABLE_HAS_SCOPE = 4;
    i32 ENUM_NODE_HAS_TYPE = 5;
    i32 ENUM_IDENTIFIER_HAS_VARIABLE = 6;
    i32 ENUM_REFERENCE_TYPE_ANNOTATION_IS_NULL = 7;
    i32 ENUM_ARITHMETIC_OPERATION_VALID = 8;
    i32 ENUM_SEQUENCE_EXPRESSION_HAS_LAST_TYPE = 9;
    i32 ENUM_CHECK_INFINITE_LOOP = 10;
    i32 ENUM_FOR_LOOP_CORRECTLY_INITIALIZED = 11;
    i32 ENUM_VARIABLE_HAS_ENCLOSING_SCOPE = 12;
    i32 ENUM_MODIFIER_ACCESS_VALID = 13;
    i32 ENUM_VARIABLE_NAME_IDENTIFIER_NAME_SAME = 14;
    i32 ENUM_CHECK_ABSTRACT_METHOD = 15;
    i32 ENUM_GETTER_SETTER_VALIDATION = 16;
    i32 ENUM_CHECK_SCOPE_DECLARATION = 17;
    i32 ENUM_CHECK_CONST_PROPERTIES = 18;
    i32 ENUM_COUNT = 19;
    i32 ENUM_AFTER_SCOPES_INIT_PHASE_FIRST = 0;
    i32 ENUM_AFTER_SCOPES_INIT_PHASE_LAST = 4;
    i32 ENUM_AFTER_CHECKER_PHASE_FIRST = 5;
    i32 ENUM_AFTER_CHECKER_PHASE_LAST = 18;
    i32 ENUM_FIRST = 0;
    i32 ENUM_LAST = 18;
    i32 ENUM_INVALID = 19;
};

dictionary Es2pandaRegExpFlags {
    i32 REG_EXP_FLAGS_EMPTY = 0;
    i32 REG_EXP_FLAGS_GLOBAL = 1;
    i32 REG_EXP_FLAGS_IGNORE_CASE = 2;
    i32 REG_EXP_FLAGS_MULTILINE = 4;
    i32 REG_EXP_FLAGS_DOTALL = 8;
    i32 REG_EXP_FLAGS_UNICODE = 16;
    i32 REG_EXP_FLAGS_STICKY = 32;
};

dictionary Es2pandaId {
    i32 ID_AS = 0;
    i32 ID_JS = 1;
    i32 ID_TS = 2;
    i32 ID_ETS = 3;
    i32 ID_COUNT = 4;
};

dictionary Es2pandaTokenType {
    i32 TOKEN_TYPE_EOS = 0;
    i32 TOKEN_TYPE_LITERAL_IDENT = 1;
    i32 TOKEN_TYPE_LITERAL_STRING = 2;
    i32 TOKEN_TYPE_LITERAL_CHAR = 3;
    i32 TOKEN_TYPE_LITERAL_NUMBER = 4;
    i32 TOKEN_TYPE_LITERAL_REGEXP = 5;
    i32 TOKEN_TYPE_LITERAL_TRUE = 6;
    i32 TOKEN_TYPE_LITERAL_FALSE = 7;
    i32 TOKEN_TYPE_LITERAL_NULL = 8;
    i32 TOKEN_TYPE_PUNCTUATOR_NULLISH_COALESCING = 9;
    i32 TOKEN_TYPE_PUNCTUATOR_LOGICAL_OR = 10;
    i32 TOKEN_TYPE_PUNCTUATOR_LOGICAL_AND = 11;
    i32 TOKEN_TYPE_PUNCTUATOR_BITWISE_OR = 12;
    i32 TOKEN_TYPE_PUNCTUATOR_BITWISE_XOR = 13;
    i32 TOKEN_TYPE_PUNCTUATOR_BITWISE_AND = 14;
    i32 TOKEN_TYPE_PUNCTUATOR_EQUAL = 15;
    i32 TOKEN_TYPE_PUNCTUATOR_NOT_EQUAL = 16;
    i32 TOKEN_TYPE_PUNCTUATOR_STRICT_EQUAL = 17;
    i32 TOKEN_TYPE_PUNCTUATOR_NOT_STRICT_EQUAL = 18;
    i32 TOKEN_TYPE_PUNCTUATOR_LESS_THAN = 19;
    i32 TOKEN_TYPE_PUNCTUATOR_LESS_THAN_EQUAL = 20;
    i32 TOKEN_TYPE_PUNCTUATOR_GREATER_THAN = 21;
    i32 TOKEN_TYPE_PUNCTUATOR_GREATER_THAN_EQUAL = 22;
    i32 TOKEN_TYPE_PUNCTUATOR_LEFT_SHIFT = 23;
    i32 TOKEN_TYPE_PUNCTUATOR_RIGHT_SHIFT = 24;
    i32 TOKEN_TYPE_PUNCTUATOR_UNSIGNED_RIGHT_SHIFT = 25;
    i32 TOKEN_TYPE_PUNCTUATOR_PLUS = 26;
    i32 TOKEN_TYPE_PUNCTUATOR_MINUS = 27;
    i32 TOKEN_TYPE_PUNCTUATOR_MULTIPLY = 28;
    i32 TOKEN_TYPE_PUNCTUATOR_DIVIDE = 29;
    i32 TOKEN_TYPE_PUNCTUATOR_MOD = 30;
    i32 TOKEN_TYPE_KEYW_IN = 31;
    i32 TOKEN_TYPE_KEYW_INSTANCEOF = 32;
    i32 TOKEN_TYPE_PUNCTUATOR_EXPONENTIATION = 33;
    i32 TOKEN_TYPE_PUNCTUATOR_LEFT_PARENTHESIS = 34;
    i32 TOKEN_TYPE_PUNCTUATOR_RIGHT_PARENTHESIS = 35;
    i32 TOKEN_TYPE_PUNCTUATOR_LEFT_BRACE = 36;
    i32 TOKEN_TYPE_PUNCTUATOR_RIGHT_BRACE = 37;
    i32 TOKEN_TYPE_PUNCTUATOR_PERIOD = 38;
    i32 TOKEN_TYPE_PUNCTUATOR_PERIOD_PERIOD_PERIOD = 39;
    i32 TOKEN_TYPE_PUNCTUATOR_PERIOD_QUESTION = 40;
    i32 TOKEN_TYPE_PUNCTUATOR_COMMA = 41;
    i32 TOKEN_TYPE_PUNCTUATOR_COLON = 42;
    i32 TOKEN_TYPE_PUNCTUATOR_SEMI_COLON = 43;
    i32 TOKEN_TYPE_PUNCTUATOR_LEFT_SQUARE_BRACKET = 44;
    i32 TOKEN_TYPE_PUNCTUATOR_RIGHT_SQUARE_BRACKET = 45;
    i32 TOKEN_TYPE_PUNCTUATOR_QUESTION_MARK = 46;
    i32 TOKEN_TYPE_PUNCTUATOR_QUESTION_DOT = 47;
    i32 TOKEN_TYPE_PUNCTUATOR_TILDE = 48;
    i32 TOKEN_TYPE_PUNCTUATOR_EXCLAMATION_MARK = 49;
    i32 TOKEN_TYPE_PUNCTUATOR_PLUS_PLUS = 50;
    i32 TOKEN_TYPE_PUNCTUATOR_MINUS_MINUS = 51;
    i32 TOKEN_TYPE_PUNCTUATOR_SUBSTITUTION = 52;
    i32 TOKEN_TYPE_PUNCTUATOR_UNSIGNED_RIGHT_SHIFT_EQUAL = 53;
    i32 TOKEN_TYPE_PUNCTUATOR_RIGHT_SHIFT_EQUAL = 54;
    i32 TOKEN_TYPE_PUNCTUATOR_LEFT_SHIFT_EQUAL = 55;
    i32 TOKEN_TYPE_PUNCTUATOR_PLUS_EQUAL = 56;
    i32 TOKEN_TYPE_PUNCTUATOR_MINUS_EQUAL = 57;
    i32 TOKEN_TYPE_PUNCTUATOR_MULTIPLY_EQUAL = 58;
    i32 TOKEN_TYPE_PUNCTUATOR_DIVIDE_EQUAL = 59;
    i32 TOKEN_TYPE_PUNCTUATOR_MOD_EQUAL = 60;
    i32 TOKEN_TYPE_PUNCTUATOR_BITWISE_AND_EQUAL = 61;
    i32 TOKEN_TYPE_PUNCTUATOR_BITWISE_OR_EQUAL = 62;
    i32 TOKEN_TYPE_PUNCTUATOR_BITWISE_XOR_EQUAL = 63;
    i32 TOKEN_TYPE_PUNCTUATOR_LOGICAL_AND_EQUAL = 64;
    i32 TOKEN_TYPE_PUNCTUATOR_LOGICAL_OR_EQUAL = 65;
    i32 TOKEN_TYPE_PUNCTUATOR_LOGICAL_NULLISH_EQUAL = 66;
    i32 TOKEN_TYPE_PUNCTUATOR_EXPONENTIATION_EQUAL = 67;
    i32 TOKEN_TYPE_PUNCTUATOR_ARROW = 68;
    i32 TOKEN_TYPE_PUNCTUATOR_BACK_TICK = 69;
    i32 TOKEN_TYPE_PUNCTUATOR_HASH_MARK = 70;
    i32 TOKEN_TYPE_PUNCTUATOR_AT = 71;
    i32 TOKEN_TYPE_PUNCTUATOR_FORMAT = 72;
    i32 TOKEN_TYPE_PUNCTUATOR_DOLLAR_DOLLAR = 73;
    i32 TOKEN_TYPE_KEYW_GET = 74;
    i32 TOKEN_TYPE_KEYW_SET = 75;
    i32 TOKEN_TYPE_KEYW_OF = 76;
    i32 TOKEN_TYPE_KEYW_FROM = 77;
    i32 TOKEN_TYPE_KEYW_AS = 78;
    i32 TOKEN_TYPE_KEYW_META = 79;
    i32 TOKEN_TYPE_KEYW_REQUIRE = 80;
    i32 TOKEN_TYPE_KEYW_ABSTRACT = 81;
    i32 TOKEN_TYPE_KEYW_TARGET = 82;
    i32 TOKEN_TYPE_KEYW_OUT = 83;
    i32 TOKEN_TYPE_FIRST_KEYW = 84;
    i32 TOKEN_TYPE_KEYW_AWAIT = 85;
    i32 TOKEN_TYPE_KEYW_BIGINT = 86;
    i32 TOKEN_TYPE_KEYW_BOOLEAN = 87;
    i32 TOKEN_TYPE_KEYW_BYTE = 88;
    i32 TOKEN_TYPE_KEYW_BREAK = 89;
    i32 TOKEN_TYPE_KEYW_CASE = 90;
    i32 TOKEN_TYPE_KEYW_CATCH = 91;
    i32 TOKEN_TYPE_KEYW_CHAR = 92;
    i32 TOKEN_TYPE_KEYW_CLASS = 93;
    i32 TOKEN_TYPE_KEYW_CONST = 94;
    i32 TOKEN_TYPE_KEYW_CONSTRUCTOR = 95;
    i32 TOKEN_TYPE_KEYW_CONTINUE = 96;
    i32 TOKEN_TYPE_KEYW_DEBUGGER = 97;
    i32 TOKEN_TYPE_KEYW_DEFAULT = 98;
    i32 TOKEN_TYPE_KEYW_DELETE = 99;
    i32 TOKEN_TYPE_KEYW_DO = 100;
    i32 TOKEN_TYPE_KEYW_DOUBLE = 101;
    i32 TOKEN_TYPE_KEYW_ELSE = 102;
    i32 TOKEN_TYPE_KEYW_ENUM = 103;
    i32 TOKEN_TYPE_KEYW_EXPORT = 104;
    i32 TOKEN_TYPE_KEYW_EXTENDS = 105;
    i32 TOKEN_TYPE_KEYW_FINALLY = 106;
    i32 TOKEN_TYPE_KEYW_FLOAT = 107;
    i32 TOKEN_TYPE_KEYW_FOR = 108;
    i32 TOKEN_TYPE_KEYW_FUNCTION = 109;
    i32 TOKEN_TYPE_KEYW_IF = 110;
    i32 TOKEN_TYPE_KEYW_IMPORT = 111;
    i32 TOKEN_TYPE_KEYW_INT = 112;
    i32 TOKEN_TYPE_KEYW_LAUNCH = 113;
    i32 TOKEN_TYPE_KEYW_LONG = 114;
    i32 TOKEN_TYPE_KEYW_NATIVE = 115;
    i32 TOKEN_TYPE_KEYW_NEVER = 116;
    i32 TOKEN_TYPE_KEYW_NEW = 117;
    i32 TOKEN_TYPE_KEYW_NUMBER = 118;
    i32 TOKEN_TYPE_KEYW_OBJECT = 119;
    i32 TOKEN_TYPE_KEYW_FINAL = 120;
    i32 TOKEN_TYPE_KEYW_OVERRIDE = 121;
    i32 TOKEN_TYPE_KEYW_REGEXP = 122;
    i32 TOKEN_TYPE_KEYW_RETHROWS = 123;
    i32 TOKEN_TYPE_KEYW_RETURN = 124;
    i32 TOKEN_TYPE_KEYW_SHORT = 125;
    i32 TOKEN_TYPE_KEYW_STRING = 126;
    i32 TOKEN_TYPE_KEYW_STRUCT = 127;
    i32 TOKEN_TYPE_KEYW_SUPER = 128;
    i32 TOKEN_TYPE_KEYW_SWITCH = 129;
    i32 TOKEN_TYPE_KEYW_THIS = 130;
    i32 TOKEN_TYPE_KEYW_THROW = 131;
    i32 TOKEN_TYPE_KEYW_THROWS = 132;
    i32 TOKEN_TYPE_KEYW_TYPE = 133;
    i32 TOKEN_TYPE_KEYW_TRY = 134;
    i32 TOKEN_TYPE_KEYW_TYPEOF = 135;
    i32 TOKEN_TYPE_KEYW_UNDEFINED = 136;
    i32 TOKEN_TYPE_KEYW_UNKNOWN = 137;
    i32 TOKEN_TYPE_KEYW_VAR = 138;
    i32 TOKEN_TYPE_KEYW_VOID = 139;
    i32 TOKEN_TYPE_KEYW_WHILE = 140;
    i32 TOKEN_TYPE_KEYW_WITH = 141;
    i32 TOKEN_TYPE_KEYW_I8 = 142;
    i32 TOKEN_TYPE_KEYW_I16 = 143;
    i32 TOKEN_TYPE_KEYW_I32 = 144;
    i32 TOKEN_TYPE_KEYW_I64 = 145;
    i32 TOKEN_TYPE_KEYW_ISIZE = 146;
    i32 TOKEN_TYPE_KEYW_U8 = 147;
    i32 TOKEN_TYPE_KEYW_U16 = 148;
    i32 TOKEN_TYPE_KEYW_U32 = 149;
    i32 TOKEN_TYPE_KEYW_U64 = 150;
    i32 TOKEN_TYPE_KEYW_USIZE = 151;
    i32 TOKEN_TYPE_KEYW_F32 = 152;
    i32 TOKEN_TYPE_KEYW_F64 = 153;
    i32 TOKEN_TYPE_KEYW_V128 = 154;
    i32 TOKEN_TYPE_KEYW_FUNCREF = 155;
    i32 TOKEN_TYPE_KEYW_EXTERNREF = 156;
    i32 TOKEN_TYPE_KEYW_ANYREF = 157;
    i32 TOKEN_TYPE_KEYW_EQREF = 158;
    i32 TOKEN_TYPE_KEYW_I31REF = 159;
    i32 TOKEN_TYPE_KEYW_DATAREF = 160;
    i32 TOKEN_TYPE_KEYW_ASYNC = 161;
    i32 TOKEN_TYPE_KEYW_READONLY = 162;
    i32 TOKEN_TYPE_KEYW_KEYOF = 163;
    i32 TOKEN_TYPE_KEYW_MODULE = 164;
    i32 TOKEN_TYPE_KEYW_NAMESPACE = 165;
    i32 TOKEN_TYPE_KEYW_INFER = 166;
    i32 TOKEN_TYPE_KEYW_DECLARE = 167;
    i32 TOKEN_TYPE_KEYW_ARGUMENTS = 168;
    i32 TOKEN_TYPE_KEYW_EVAL = 169;
    i32 TOKEN_TYPE_KEYW_STATIC = 170;
    i32 TOKEN_TYPE_KEYW_GLOBAL = 171;
    i32 TOKEN_TYPE_KEYW_IS = 172;
    i32 TOKEN_TYPE_KEYW_ASSERTS = 173;
    i32 TOKEN_TYPE_KEYW_ASSERT = 174;
    i32 TOKEN_TYPE_KEYW_TRAP = 175;
    i32 TOKEN_TYPE_KEYW_PRIVATE = 176;
    i32 TOKEN_TYPE_KEYW_PROTECTED = 177;
    i32 TOKEN_TYPE_KEYW_PUBLIC = 178;
    i32 TOKEN_TYPE_KEYW_INTERNAL = 179;
    i32 TOKEN_TYPE_KEYW_IMPLEMENTS = 180;
    i32 TOKEN_TYPE_KEYW_INTERFACE = 181;
    i32 TOKEN_TYPE_KEYW_PACKAGE = 182;
    i32 TOKEN_TYPE_KEYW_LET = 183;
    i32 TOKEN_TYPE_KEYW_YIELD = 184;
    i32 TOKEN_TYPE_KEYW_ANY = 84;
};

dictionary Es2pandaAstNodeFlags {
    i32 AST_NODE_FLAGS_NO_OPTS = 0;
    i32 AST_NODE_FLAGS_CHECKCAST = 1;
    i32 AST_NODE_FLAGS_CONVERT_TO_STRING = 2;
    i32 AST_NODE_FLAGS_ALLOW_REQUIRED_INSTANTIATION = 4;
    i32 AST_NODE_FLAGS_HAS_EXPORT_ALIAS = 8;
    i32 AST_NODE_FLAGS_GENERATE_VALUE_OF = 16;
    i32 AST_NODE_FLAGS_GENERATE_GET_NAME = 32;
    i32 AST_NODE_FLAGS_RECHECK = 64;
};

dictionary Es2pandaModifierFlags {
    i32 MODIFIER_FLAGS_NONE = 0;
    i32 MODIFIER_FLAGS_STATIC = 1;
    i32 MODIFIER_FLAGS_ASYNC = 2;
    i32 MODIFIER_FLAGS_PUBLIC = 4;
    i32 MODIFIER_FLAGS_PROTECTED = 8;
    i32 MODIFIER_FLAGS_PRIVATE = 16;
    i32 MODIFIER_FLAGS_DECLARE = 32;
    i32 MODIFIER_FLAGS_READONLY = 64;
    i32 MODIFIER_FLAGS_OPTIONAL = 128;
    i32 MODIFIER_FLAGS_DEFINITE = 256;
    i32 MODIFIER_FLAGS_ABSTRACT = 512;
    i32 MODIFIER_FLAGS_CONST = 1024;
    i32 MODIFIER_FLAGS_FINAL = 2048;
    i32 MODIFIER_FLAGS_NATIVE = 4096;
    i32 MODIFIER_FLAGS_OVERRIDE = 8192;
    i32 MODIFIER_FLAGS_CONSTRUCTOR = 16384;
    i32 MODIFIER_FLAGS_SYNCHRONIZED = 32768;
    i32 MODIFIER_FLAGS_FUNCTIONAL = 65536;
    i32 MODIFIER_FLAGS_IN = 131072;
    i32 MODIFIER_FLAGS_OUT = 262144;
    i32 MODIFIER_FLAGS_INTERNAL = 524288;
    i32 MODIFIER_FLAGS_EXPORT = 1048576;
    i32 MODIFIER_FLAGS_GETTER = 2097152;
    i32 MODIFIER_FLAGS_SETTER = 4194304;
    i32 MODIFIER_FLAGS_DEFAULT_EXPORT = 8388608;
    i32 MODIFIER_FLAGS_EXPORT_TYPE = 16777216;
    i32 MODIFIER_FLAGS_SUPER_OWNER = 33554432;
    i32 MODIFIER_FLAGS_ANNOTATION_DECLARATION = 67108864;
    i32 MODIFIER_FLAGS_ANNOTATION_USAGE = 134217728;
    i32 MODIFIER_FLAGS_READONLY_PARAMETER = 268435456;
    i32 MODIFIER_FLAGS_ACCESS = 524316;
    i32 MODIFIER_FLAGS_ALL = 524927;
    i32 MODIFIER_FLAGS_ALLOWED_IN_CTOR_PARAMETER = 524380;
    i32 MODIFIER_FLAGS_INTERNAL_PROTECTED = 524296;
    i32 MODIFIER_FLAGS_ACCESSOR_MODIFIERS = 2560;
    i32 MODIFIER_FLAGS_GETTER_SETTER = 6291456;
    i32 MODIFIER_FLAGS_EXPORTED = 26214400;
};

dictionary Es2pandaPrivateFieldKind {
    i32 PRIVATE_FIELD_KIND_FIELD = 0;
    i32 PRIVATE_FIELD_KIND_METHOD = 1;
    i32 PRIVATE_FIELD_KIND_GET = 2;
    i32 PRIVATE_FIELD_KIND_SET = 3;
    i32 PRIVATE_FIELD_KIND_STATIC_FIELD = 4;
    i32 PRIVATE_FIELD_KIND_STATIC_METHOD = 5;
    i32 PRIVATE_FIELD_KIND_STATIC_GET = 6;
    i32 PRIVATE_FIELD_KIND_STATIC_SET = 7;
};

dictionary Es2pandaScriptFunctionFlags {
    i32 SCRIPT_FUNCTION_FLAGS_NONE = 0;
    i32 SCRIPT_FUNCTION_FLAGS_GENERATOR = 1;
    i32 SCRIPT_FUNCTION_FLAGS_ASYNC = 2;
    i32 SCRIPT_FUNCTION_FLAGS_ARROW = 4;
    i32 SCRIPT_FUNCTION_FLAGS_EXPRESSION = 8;
    i32 SCRIPT_FUNCTION_FLAGS_OVERLOAD = 16;
    i32 SCRIPT_FUNCTION_FLAGS_CONSTRUCTOR = 32;
    i32 SCRIPT_FUNCTION_FLAGS_METHOD = 64;
    i32 SCRIPT_FUNCTION_FLAGS_STATIC_BLOCK = 128;
    i32 SCRIPT_FUNCTION_FLAGS_HIDDEN = 256;
    i32 SCRIPT_FUNCTION_FLAGS_IMPLICIT_SUPER_CALL_NEEDED = 512;
    i32 SCRIPT_FUNCTION_FLAGS_ENUM = 1024;
    i32 SCRIPT_FUNCTION_FLAGS_EXTERNAL = 2048;
    i32 SCRIPT_FUNCTION_FLAGS_PROXY = 4096;
    i32 SCRIPT_FUNCTION_FLAGS_THROWS = 8192;
    i32 SCRIPT_FUNCTION_FLAGS_RETHROWS = 16384;
    i32 SCRIPT_FUNCTION_FLAGS_GETTER = 32768;
    i32 SCRIPT_FUNCTION_FLAGS_SETTER = 65536;
    i32 SCRIPT_FUNCTION_FLAGS_ENTRY_POINT = 131072;
    i32 SCRIPT_FUNCTION_FLAGS_INSTANCE_EXTENSION_METHOD = 262144;
    i32 SCRIPT_FUNCTION_FLAGS_HAS_RETURN = 524288;
    i32 SCRIPT_FUNCTION_FLAGS_ASYNC_IMPL = 1048576;
    i32 SCRIPT_FUNCTION_FLAGS_EXTERNAL_OVERLOAD = 2097152;
    i32 SCRIPT_FUNCTION_FLAGS_HAS_THROW = 4194304;
};

dictionary Es2pandaTSOperatorType {
    i32 TS_OPERATOR_TYPE_READONLY = 0;
    i32 TS_OPERATOR_TYPE_KEYOF = 1;
    i32 TS_OPERATOR_TYPE_UNIQUE = 2;
};

dictionary Es2pandaMappedOption {
    i32 MAPPED_OPTION_NO_OPTS = 0;
    i32 MAPPED_OPTION_PLUS = 1;
    i32 MAPPED_OPTION_MINUS = 2;
};

dictionary Es2pandaBoxingUnboxingFlags {
    i32 BOXING_UNBOXING_FLAGS_NONE = 0;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_BOOLEAN = 1;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_BYTE = 2;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_SHORT = 4;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_CHAR = 8;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_INT = 16;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_LONG = 32;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_FLOAT = 64;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_DOUBLE = 128;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_ENUM = 256;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_BOOLEAN = 512;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_BYTE = 1024;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_SHORT = 2048;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_CHAR = 4096;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_INT = 8192;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_LONG = 16384;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_FLOAT = 32768;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_DOUBLE = 65536;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_ENUM = 131072;
    i32 BOXING_UNBOXING_FLAGS_BOXING_FLAG = 511;
    i32 BOXING_UNBOXING_FLAGS_UNBOXING_FLAG = 261632;
};

dictionary Es2pandaClassDefinitionModifiers {
    i32 CLASS_DEFINITION_MODIFIERS_NONE = 0;
    i32 CLASS_DEFINITION_MODIFIERS_DECLARATION = 1;
    i32 CLASS_DEFINITION_MODIFIERS_ID_REQUIRED = 2;
    i32 CLASS_DEFINITION_MODIFIERS_GLOBAL = 4;
    i32 CLASS_DEFINITION_MODIFIERS_HAS_SUPER = 8;
    i32 CLASS_DEFINITION_MODIFIERS_SET_CTOR_ID = 16;
    i32 CLASS_DEFINITION_MODIFIERS_EXTERN = 32;
    i32 CLASS_DEFINITION_MODIFIERS_ANONYMOUS = 64;
    i32 CLASS_DEFINITION_MODIFIERS_GLOBAL_INITIALIZED = 128;
    i32 CLASS_DEFINITION_MODIFIERS_CLASS_DECL = 256;
    i32 CLASS_DEFINITION_MODIFIERS_INNER = 512;
    i32 CLASS_DEFINITION_MODIFIERS_FROM_EXTERNAL = 1024;
    i32 CLASS_DEFINITION_MODIFIERS_LOCAL = 2048;
    i32 CLASS_DEFINITION_MODIFIERS_CLASSDEFINITION_CHECKED = 4096;
    i32 CLASS_DEFINITION_MODIFIERS_DECLARATION_ID_REQUIRED = 3;
};

dictionary Es2pandaOperandKind {
    i32 OPERAND_KIND_SRC_VREG = 0;
    i32 OPERAND_KIND_DST_VREG = 1;
    i32 OPERAND_KIND_SRC_DST_VREG = 2;
    i32 OPERAND_KIND_IMM = 3;
    i32 OPERAND_KIND_ID = 4;
    i32 OPERAND_KIND_STRING_ID = 5;
    i32 OPERAND_KIND_LABEL = 6;
};

dictionary Es2pandaOperandType {
    i32 OPERAND_TYPE_REF = 0;
    i32 OPERAND_TYPE_B32 = 1;
    i32 OPERAND_TYPE_B64 = 2;
    i32 OPERAND_TYPE_ANY = 3;
    i32 OPERAND_TYPE_NONE = 4;
};

dictionary Es2pandaTypeRelationFlag {
    i32 TYPE_RELATION_FLAG_NONE = 0;
    i32 TYPE_RELATION_FLAG_NARROWING = 1;
    i32 TYPE_RELATION_FLAG_WIDENING = 2;
    i32 TYPE_RELATION_FLAG_BOXING = 4;
    i32 TYPE_RELATION_FLAG_UNBOXING = 8;
    i32 TYPE_RELATION_FLAG_CAPTURE = 16;
    i32 TYPE_RELATION_FLAG_STRING = 32;
    i32 TYPE_RELATION_FLAG_VALUE_SET = 64;
    i32 TYPE_RELATION_FLAG_UNCHECKED = 128;
    i32 TYPE_RELATION_FLAG_NO_THROW = 256;
    i32 TYPE_RELATION_FLAG_SELF_REFERENCE = 512;
    i32 TYPE_RELATION_FLAG_NO_RETURN_TYPE_CHECK = 1024;
    i32 TYPE_RELATION_FLAG_DIRECT_RETURN = 2048;
    i32 TYPE_RELATION_FLAG_NO_WIDENING = 4096;
    i32 TYPE_RELATION_FLAG_NO_BOXING = 8192;
    i32 TYPE_RELATION_FLAG_NO_UNBOXING = 16384;
    i32 TYPE_RELATION_FLAG_ONLY_CHECK_WIDENING = 32768;
    i32 TYPE_RELATION_FLAG_ONLY_CHECK_BOXING_UNBOXING = 65536;
    i32 TYPE_RELATION_FLAG_IN_ASSIGNMENT_CONTEXT = 131072;
    i32 TYPE_RELATION_FLAG_IN_CASTING_CONTEXT = 262144;
    i32 TYPE_RELATION_FLAG_UNCHECKED_CAST = 524288;
    i32 TYPE_RELATION_FLAG_IGNORE_TYPE_PARAMETERS = 1048576;
    i32 TYPE_RELATION_FLAG_CHECK_PROXY = 2097152;
    i32 TYPE_RELATION_FLAG_NO_CHECK_TRAILING_LAMBDA = 4194304;
    i32 TYPE_RELATION_FLAG_NO_THROW_GENERIC_TYPEALIAS = 8388608;
    i32 TYPE_RELATION_FLAG_OVERRIDING_CONTEXT = 16777216;
    i32 TYPE_RELATION_FLAG_IGNORE_REST_PARAM = 33554432;
    i32 TYPE_RELATION_FLAG_STRING_TO_CHAR = 67108864;
    i32 TYPE_RELATION_FLAG_ASSIGNMENT_CONTEXT = 14;
    i32 TYPE_RELATION_FLAG_BRIDGE_CHECK = 17826816;
    i32 TYPE_RELATION_FLAG_CASTING_CONTEXT = 524303;
};

dictionary Es2pandaRelationResult {
    i32 RELATION_RESULT_TRUE = 0;
    i32 RELATION_RESULT_FALSE = 1;
    i32 RELATION_RESULT_UNKNOWN = 2;
    i32 RELATION_RESULT_MAYBE = 3;
    i32 RELATION_RESULT_CACHE_MISS = 4;
    i32 RELATION_RESULT_ERROR = 5;
};

dictionary Es2pandaRelationType {
    i32 RELATION_TYPE_COMPARABLE = 0;
    i32 RELATION_TYPE_ASSIGNABLE = 1;
    i32 RELATION_TYPE_IDENTICAL = 2;
    i32 RELATION_TYPE_UNCHECKED_CASTABLE = 3;
    i32 RELATION_TYPE_SUPERTYPE = 4;
};

dictionary Es2pandaImportKinds {
    i32 IMPORT_KINDS_VALUE = 0;
    i32 IMPORT_KINDS_TYPE = 1;
};


typedef u64 Es2pandaTypeFlag;

dictionary Es2pandaPropertyKind {
    i32 PROPERTY_KIND_INIT = 0;
    i32 PROPERTY_KIND_GET = 1;
    i32 PROPERTY_KIND_SET = 2;
    i32 PROPERTY_KIND_PROTO = 3;
};

dictionary Es2pandaConstant {
    i32 CONSTANT_PROP_NULL = 0;
    i32 CONSTANT_PROP_UNDEFINED = 1;
    i32 CONSTANT_EMPTY_ARRAY = 2;
};

dictionary Es2pandaTSSignatureDeclarationKind {
    i32 TS_SIGNATURE_DECLARATION_KIND_CALL_SIGNATURE = 0;
    i32 TS_SIGNATURE_DECLARATION_KIND_CONSTRUCT_SIGNATURE = 1;
};

dictionary Es2pandaTSIndexSignatureKind {
    i32 TS_INDEX_SIGNATURE_KIND_NUMBER = 0;
    i32 TS_INDEX_SIGNATURE_KIND_STRING = 1;
};

dictionary Es2pandaEnumLiteralTypeKind {
    i32 ENUM_LITERAL_TYPE_KIND_NUMERIC = 0;
    i32 ENUM_LITERAL_TYPE_KIND_LITERAL = 1;
};

dictionary Es2pandaIdentifierFlags {
    i32 IDENTIFIER_FLAGS_NONE = 0;
    i32 IDENTIFIER_FLAGS_OPTIONAL = 1;
    i32 IDENTIFIER_FLAGS_TDZ = 2;
    i32 IDENTIFIER_FLAGS_PRIVATE = 4;
    i32 IDENTIFIER_FLAGS_GET = 8;
    i32 IDENTIFIER_FLAGS_SET = 16;
    i32 IDENTIFIER_FLAGS_IGNORE_BOX = 32;
    i32 IDENTIFIER_FLAGS_ANNOTATIONDECL = 64;
    i32 IDENTIFIER_FLAGS_ANNOTATIONUSAGE = 128;
    i32 IDENTIFIER_FLAGS_ERROR_PLACEHOLDER = 256;
};

dictionary Es2pandaMemberExpressionKind {
    i32 MEMBER_EXPRESSION_KIND_NONE = 0;
    i32 MEMBER_EXPRESSION_KIND_ELEMENT_ACCESS = 1;
    i32 MEMBER_EXPRESSION_KIND_PROPERTY_ACCESS = 2;
    i32 MEMBER_EXPRESSION_KIND_GETTER = 4;
    i32 MEMBER_EXPRESSION_KIND_SETTER = 8;
};

dictionary Es2pandaTSTupleKind {
    i32 TS_TUPLE_KIND_NONE = 0;
    i32 TS_TUPLE_KIND_NAMED = 1;
    i32 TS_TUPLE_KIND_DEFAULT = 2;
};

dictionary Es2pandaMetaPropertyKind {
    i32 META_PROPERTY_KIND_NEW_TARGET = 0;
    i32 META_PROPERTY_KIND_IMPORT_META = 1;
};

dictionary Es2pandaElementFlags {
    i32 ELEMENT_FLAGS_NO_OPTS = 0;
    i32 ELEMENT_FLAGS_REQUIRED = 1;
    i32 ELEMENT_FLAGS_OPTIONAL = 2;
    i32 ELEMENT_FLAGS_REST = 4;
    i32 ELEMENT_FLAGS_VARIADIC = 8;
    i32 ELEMENT_FLAGS_FIXED = 3;
    i32 ELEMENT_FLAGS_VARIABLE = 12;
    i32 ELEMENT_FLAGS_NON_REQUIRED = 14;
    i32 ELEMENT_FLAGS_NON_REST = 11;
};

dictionary Es2pandaSignatureFlags {
    i32 SIGNATURE_FLAGS_NO_OPTS = 0;
    i32 SIGNATURE_FLAGS_VIRTUAL = 1;
    i32 SIGNATURE_FLAGS_ABSTRACT = 2;
    i32 SIGNATURE_FLAGS_CALL = 4;
    i32 SIGNATURE_FLAGS_CONSTRUCT = 8;
    i32 SIGNATURE_FLAGS_PUBLIC = 16;
    i32 SIGNATURE_FLAGS_PROTECTED = 32;
    i32 SIGNATURE_FLAGS_PRIVATE = 64;
    i32 SIGNATURE_FLAGS_STATIC = 128;
    i32 SIGNATURE_FLAGS_FINAL = 256;
    i32 SIGNATURE_FLAGS_CONSTRUCTOR = 512;
    i32 SIGNATURE_FLAGS_TYPE = 1024;
    i32 SIGNATURE_FLAGS_PROXY = 2048;
    i32 SIGNATURE_FLAGS_INTERNAL = 4096;
    i32 SIGNATURE_FLAGS_NEED_RETURN_TYPE = 8192;
    i32 SIGNATURE_FLAGS_INFERRED_RETURN_TYPE = 16384;
    i32 SIGNATURE_FLAGS_THIS_RETURN_TYPE = 32768;
    i32 SIGNATURE_FLAGS_GETTER = 65536;
    i32 SIGNATURE_FLAGS_SETTER = 131072;
    i32 SIGNATURE_FLAGS_THROWS = 262144;
    i32 SIGNATURE_FLAGS_RETHROWS = 524288;
    i32 SIGNATURE_FLAGS_INTERNAL_PROTECTED = 4128;
    i32 SIGNATURE_FLAGS_GETTER_OR_SETTER = 196608;
    i32 SIGNATURE_FLAGS_FUNCTIONAL_INTERFACE_SIGNATURE = 1047;
};

dictionary Es2pandaPrimitiveType {
    i32 PRIMITIVE_TYPE_BYTE = 0;
    i32 PRIMITIVE_TYPE_INT = 1;
    i32 PRIMITIVE_TYPE_LONG = 2;
    i32 PRIMITIVE_TYPE_SHORT = 3;
    i32 PRIMITIVE_TYPE_FLOAT = 4;
    i32 PRIMITIVE_TYPE_DOUBLE = 5;
    i32 PRIMITIVE_TYPE_BOOLEAN = 6;
    i32 PRIMITIVE_TYPE_CHAR = 7;
    i32 PRIMITIVE_TYPE_VOID = 8;
};

dictionary Es2pandaObjectFlags {
    i32 OBJECT_FLAGS_NO_OPTS = 0;
    i32 OBJECT_FLAGS_CHECK_EXCESS_PROPS = 1;
    i32 OBJECT_FLAGS_RESOLVED_MEMBERS = 2;
    i32 OBJECT_FLAGS_RESOLVED_BASE_TYPES = 4;
    i32 OBJECT_FLAGS_RESOLVED_DECLARED_MEMBERS = 8;
};

dictionary Es2pandaObjectTypeKind {
    i32 OBJECT_TYPE_KIND_LITERAL = 0;
    i32 OBJECT_TYPE_KIND_CLASS = 1;
    i32 OBJECT_TYPE_KIND_INTERFACE = 2;
    i32 OBJECT_TYPE_KIND_TUPLE = 3;
    i32 OBJECT_TYPE_KIND_FUNCTION = 4;
};

dictionary Es2pandaVariableDeclaratorFlag {
    i32 VARIABLE_DECLARATOR_FLAG_LET = 0;
    i32 VARIABLE_DECLARATOR_FLAG_CONST = 1;
    i32 VARIABLE_DECLARATOR_FLAG_VAR = 2;
    i32 VARIABLE_DECLARATOR_FLAG_UNKNOWN = 3;
};

dictionary Es2pandaTypeFacts {
    i32 TYPE_FACTS_NONE = 0;
    i32 TYPE_FACTS_TYPEOF_EQ_STRING = 1;
    i32 TYPE_FACTS_TYPEOF_EQ_NUMBER = 2;
    i32 TYPE_FACTS_TYPEOF_EQ_BIGINT = 4;
    i32 TYPE_FACTS_TYPEOF_EQ_BOOLEAN = 8;
    i32 TYPE_FACTS_TYPEOF_EQ_SYMBOL = 16;
    i32 TYPE_FACTS_TYPEOF_EQ_OBJECT = 32;
    i32 TYPE_FACTS_TYPEOF_EQ_FUNCTION = 64;
    i32 TYPE_FACTS_TYPEOF_EQ_HOST_OBJECT = 128;
    i32 TYPE_FACTS_TYPEOF_NE_STRING = 256;
    i32 TYPE_FACTS_TYPEOF_NE_NUMBER = 512;
    i32 TYPE_FACTS_TYPEOF_NE_BIGINT = 1024;
    i32 TYPE_FACTS_TYPEOF_NE_BOOLEAN = 2048;
    i32 TYPE_FACTS_TYPEOF_NE_SYMBOL = 4096;
    i32 TYPE_FACTS_TYPEOF_NE_OBJECT = 8192;
    i32 TYPE_FACTS_TYPEOF_NE_FUNCTION = 16384;
    i32 TYPE_FACTS_TYPEOF_NE_HOST_OBJECT = 32768;
    i32 TYPE_FACTS_EQ_UNDEFINED = 65536;
    i32 TYPE_FACTS_EQ_NULL = 131072;
    i32 TYPE_FACTS_EQ_UNDEFINED_OR_NULL = 262144;
    i32 TYPE_FACTS_NE_UNDEFINED = 524288;
    i32 TYPE_FACTS_NE_NULL = 1048576;
    i32 TYPE_FACTS_NE_UNDEFINED_OR_NULL = 2097152;
    i32 TYPE_FACTS_TRUTHY = 4194304;
    i32 TYPE_FACTS_FALSY = 8388608;
    i32 TYPE_FACTS_ALL = 16777216;
    i32 TYPE_FACTS_LAST = 8388608;
    i32 TYPE_FACTS_BASE_NUMBER_STRICT_FACTS = 3734786;
    i32 TYPE_FACTS_BASE_NUMBER_FACTS = 12582146;
    i32 TYPE_FACTS_NUMBER_FACTS = 16776450;
    i32 TYPE_FACTS_ZERO_NUMBER_STRICT_FACTS = 12123394;
    i32 TYPE_FACTS_ZERO_NUMBER_FACTS = 12582146;
    i32 TYPE_FACTS_NON_ZERO_NUMBER_FACTS = 16776450;
    i32 TYPE_FACTS_BASE_STRING_STRICT_FACTS = 3735041;
    i32 TYPE_FACTS_BASE_STRING_FACTS = 12582401;
    i32 TYPE_FACTS_STRING_FACTS = 16776705;
    i32 TYPE_FACTS_EMPTY_STRING_STRICT_FACTS = 16317953;
    i32 TYPE_FACTS_EMPTY_STRING_FACTS = 12582401;
    i32 TYPE_FACTS_NON_EMPTY_STRING_FACTS = 16776705;
    i32 TYPE_FACTS_BASE_BIGINT_STRICT_FACTS = 3734276;
    i32 TYPE_FACTS_BASE_BIGINT_FACTS = 12581636;
    i32 TYPE_FACTS_BIGINT_FACTS = 16775940;
    i32 TYPE_FACTS_ZERO_BIGINT_STRICT_FACTS = 12122884;
    i32 TYPE_FACTS_ZERO_BIGINT_FACTS = 12581636;
    i32 TYPE_FACTS_NON_ZERO_BIGINT_FACTS = 16775940;
    i32 TYPE_FACTS_BASE_BOOLEAN_STRICT_FACTS = 3733256;
    i32 TYPE_FACTS_BASE_BOOLEAN_FACTS = 12580616;
    i32 TYPE_FACTS_BOOLEAN_FACTS = 16774920;
    i32 TYPE_FACTS_FALSE_STRICT_FACTS = 12121864;
    i32 TYPE_FACTS_FALSE_FACTS = 12580616;
    i32 TYPE_FACTS_TRUE_STRICT_FACTS = 7927560;
    i32 TYPE_FACTS_TRUE_FACTS = 16774920;
    i32 TYPE_FACTS_OBJECT_STRICT_FACTS = 7888800;
    i32 TYPE_FACTS_OBJECT_FACTS = 16736160;
    i32 TYPE_FACTS_EMPTY_OBJECT_FACTS = 16777216;
    i32 TYPE_FACTS_FUNCTION_STRICT_FACTS = 7880640;
    i32 TYPE_FACTS_FUNCTION_FACTS = 16728000;
    i32 TYPE_FACTS_UNDEFINED_FACTS = 9830144;
    i32 TYPE_FACTS_NULL_FACTS = 9363232;
};

dictionary Es2pandaGlobalTypeId {
    i32 GLOBAL_TYPE_ID_NUMBER = 0;
    i32 GLOBAL_TYPE_ID_ANY = 1;
    i32 GLOBAL_TYPE_ID_STRING = 2;
    i32 GLOBAL_TYPE_ID_BOOLEAN = 3;
    i32 GLOBAL_TYPE_ID_VOID = 4;
    i32 GLOBAL_TYPE_ID_NULL_ID = 5;
    i32 GLOBAL_TYPE_ID_UNDEFINED = 6;
    i32 GLOBAL_TYPE_ID_UNKNOWN = 7;
    i32 GLOBAL_TYPE_ID_NEVER = 8;
    i32 GLOBAL_TYPE_ID_NON_PRIMITIVE = 9;
    i32 GLOBAL_TYPE_ID_BIGINT = 10;
    i32 GLOBAL_TYPE_ID_FALSE_ID = 11;
    i32 GLOBAL_TYPE_ID_TRUE_ID = 12;
    i32 GLOBAL_TYPE_ID_NUMBER_OR_BIGINT = 13;
    i32 GLOBAL_TYPE_ID_STRING_OR_NUMBER = 14;
    i32 GLOBAL_TYPE_ID_ZERO = 15;
    i32 GLOBAL_TYPE_ID_EMPTY_STRING = 16;
    i32 GLOBAL_TYPE_ID_ZERO_BIGINT = 17;
    i32 GLOBAL_TYPE_ID_PRIMITIVE = 18;
    i32 GLOBAL_TYPE_ID_EMPTY_TUPLE = 19;
    i32 GLOBAL_TYPE_ID_EMPTY_OBJECT = 20;
    i32 GLOBAL_TYPE_ID_RESOLVING_RETURN_TYPE = 21;
    i32 GLOBAL_TYPE_ID_ERROR_TYPE = 22;
    i32 GLOBAL_TYPE_ID_BYTE = 23;
    i32 GLOBAL_TYPE_ID_SHORT = 24;
    i32 GLOBAL_TYPE_ID_INT = 25;
    i32 GLOBAL_TYPE_ID_LONG = 26;
    i32 GLOBAL_TYPE_ID_FLOAT = 27;
    i32 GLOBAL_TYPE_ID_DOUBLE = 28;
    i32 GLOBAL_TYPE_ID_CHAR = 29;
    i32 GLOBAL_TYPE_ID_ETS_BOOLEAN = 30;
    i32 GLOBAL_TYPE_ID_ETS_STRING = 31;
    i32 GLOBAL_TYPE_ID_ETS_VOID = 32;
    i32 GLOBAL_TYPE_ID_ETS_OBJECT_BUILTIN = 33;
    i32 GLOBAL_TYPE_ID_ETS_NULL = 34;
    i32 GLOBAL_TYPE_ID_ETS_UNDEFINED = 35;
    i32 GLOBAL_TYPE_ID_ETS_NULLISH_TYPE = 36;
    i32 GLOBAL_TYPE_ID_ETS_NEVER = 37;
    i32 GLOBAL_TYPE_ID_ETS_NULLISH_OBJECT = 38;
    i32 GLOBAL_TYPE_ID_ETS_WILDCARD = 39;
    i32 GLOBAL_TYPE_ID_ETS_BOOLEAN_BUILTIN = 40;
    i32 GLOBAL_TYPE_ID_ETS_BYTE_BUILTIN = 41;
    i32 GLOBAL_TYPE_ID_ETS_CHAR_BUILTIN = 42;
    i32 GLOBAL_TYPE_ID_ETS_COMPARABLE_BUILTIN = 43;
    i32 GLOBAL_TYPE_ID_ETS_CONSOLE_BUILTIN = 44;
    i32 GLOBAL_TYPE_ID_ETS_DATE_BUILTIN = 45;
    i32 GLOBAL_TYPE_ID_ETS_DOUBLE_BUILTIN = 46;
    i32 GLOBAL_TYPE_ID_ETS_EXCEPTION_BUILTIN = 47;
    i32 GLOBAL_TYPE_ID_ETS_FLOAT_BUILTIN = 48;
    i32 GLOBAL_TYPE_ID_ETS_FLOATING_BUILTIN = 49;
    i32 GLOBAL_TYPE_ID_ETS_INT_BUILTIN = 50;
    i32 GLOBAL_TYPE_ID_ETS_INTEGRAL_BUILTIN = 51;
    i32 GLOBAL_TYPE_ID_ETS_LONG_BUILTIN = 52;
    i32 GLOBAL_TYPE_ID_ETS_MAP_BUILTIN = 53;
    i32 GLOBAL_TYPE_ID_ETS_ERROR_BUILTIN = 54;
    i32 GLOBAL_TYPE_ID_ETS_RUNTIME_BUILTIN = 55;
    i32 GLOBAL_TYPE_ID_ETS_RUNTIME_LINKER_BUILTIN = 56;
    i32 GLOBAL_TYPE_ID_ETS_SET_BUILTIN = 57;
    i32 GLOBAL_TYPE_ID_ETS_SHORT_BUILTIN = 58;
    i32 GLOBAL_TYPE_ID_ETS_STACK_TRACE_ELEMENT_BUILTIN = 59;
    i32 GLOBAL_TYPE_ID_ETS_STACK_TRACE_BUILTIN = 60;
    i32 GLOBAL_TYPE_ID_ETS_NULL_POINTER_EXCEPTION_BUILTIN = 61;
    i32 GLOBAL_TYPE_ID_ETS_ARRAY_INDEX_OUT_OF_BOUNDS_ERROR_BUILTIN = 62;
    i32 GLOBAL_TYPE_ID_ETS_ARITHMETIC_ERROR_BUILTIN = 63;
    i32 GLOBAL_TYPE_ID_ETS_CLASS_NOT_FOUND_EXCEPTION_BUILTIN = 64;
    i32 GLOBAL_TYPE_ID_ETS_CLASS_CAST_ERROR_BUILTIN = 65;
    i32 GLOBAL_TYPE_ID_ETS_OUT_OF_MEMORY_ERROR_BUILTIN = 66;
    i32 GLOBAL_TYPE_ID_ETS_NO_SUCH_METHOD_ERROR_BUILTIN = 67;
    i32 GLOBAL_TYPE_ID_ETS_ASSERTION_ERROR_BUILTIN = 68;
    i32 GLOBAL_TYPE_ID_ETS_DIVIDE_BY_ZERO_ERROR_BUILTIN = 69;
    i32 GLOBAL_TYPE_ID_ETS_NULL_POINTER_ERROR_BUILTIN = 70;
    i32 GLOBAL_TYPE_ID_ETS_UNCAUGHT_EXCEPTION_ERROR_BUILTIN = 71;
    i32 GLOBAL_TYPE_ID_ETS_STRING_BUILTIN = 72;
    i32 GLOBAL_TYPE_ID_ETS_STRING_BUILDER_BUILTIN = 73;
    i32 GLOBAL_TYPE_ID_ETS_TYPE_BUILTIN = 74;
    i32 GLOBAL_TYPE_ID_ETS_TYPES_BUILTIN = 75;
    i32 GLOBAL_TYPE_ID_ETS_PROMISE_BUILTIN = 76;
    i32 GLOBAL_TYPE_ID_ETS_REGEXP_BUILTIN = 77;
    i32 GLOBAL_TYPE_ID_ETS_ARRAY_BUILTIN = 78;
    i32 GLOBAL_TYPE_ID_ETS_INTEROP_JSRUNTIME_BUILTIN = 79;
    i32 GLOBAL_TYPE_ID_ETS_INTEROP_JSVALUE_BUILTIN = 80;
    i32 GLOBAL_TYPE_ID_ETS_BOX_BUILTIN = 81;
    i32 GLOBAL_TYPE_ID_ETS_BOOLEAN_BOX_BUILTIN = 82;
    i32 GLOBAL_TYPE_ID_ETS_BYTE_BOX_BUILTIN = 83;
    i32 GLOBAL_TYPE_ID_ETS_CHAR_BOX_BUILTIN = 84;
    i32 GLOBAL_TYPE_ID_ETS_SHORT_BOX_BUILTIN = 85;
    i32 GLOBAL_TYPE_ID_ETS_INT_BOX_BUILTIN = 86;
    i32 GLOBAL_TYPE_ID_ETS_LONG_BOX_BUILTIN = 87;
    i32 GLOBAL_TYPE_ID_ETS_FLOAT_BOX_BUILTIN = 88;
    i32 GLOBAL_TYPE_ID_ETS_DOUBLE_BOX_BUILTIN = 89;
    i32 GLOBAL_TYPE_ID_ETS_BIG_INT_BUILTIN = 90;
    i32 GLOBAL_TYPE_ID_ETS_BIG_INT = 91;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION0_CLASS = 92;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION1_CLASS = 93;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION2_CLASS = 94;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION3_CLASS = 95;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION4_CLASS = 96;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION5_CLASS = 97;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION6_CLASS = 98;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION7_CLASS = 99;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION8_CLASS = 100;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION9_CLASS = 101;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION10_CLASS = 102;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION11_CLASS = 103;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION12_CLASS = 104;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION13_CLASS = 105;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION14_CLASS = 106;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION15_CLASS = 107;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION16_CLASS = 108;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTIONN_CLASS = 109;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION0_CLASS = 110;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION1_CLASS = 111;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION2_CLASS = 112;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION3_CLASS = 113;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION4_CLASS = 114;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION5_CLASS = 115;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION6_CLASS = 116;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION7_CLASS = 117;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION8_CLASS = 118;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION9_CLASS = 119;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION10_CLASS = 120;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION11_CLASS = 121;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION12_CLASS = 122;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION13_CLASS = 123;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION14_CLASS = 124;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION15_CLASS = 125;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION16_CLASS = 126;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTIONN_CLASS = 127;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION0_CLASS = 128;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION1_CLASS = 129;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION2_CLASS = 130;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION3_CLASS = 131;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION4_CLASS = 132;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION5_CLASS = 133;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION6_CLASS = 134;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION7_CLASS = 135;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION8_CLASS = 136;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION9_CLASS = 137;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION10_CLASS = 138;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION11_CLASS = 139;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION12_CLASS = 140;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION13_CLASS = 141;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION14_CLASS = 142;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION15_CLASS = 143;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION16_CLASS = 144;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTIONN_CLASS = 145;
    i32 GLOBAL_TYPE_ID_TYPE_ERROR = 146;
    i32 GLOBAL_TYPE_ID_COUNT = 147;
};

dictionary Es2pandaMethodDefinitionKind {
    i32 METHOD_DEFINITION_KIND_NONE = 0;
    i32 METHOD_DEFINITION_KIND_CONSTRUCTOR = 1;
    i32 METHOD_DEFINITION_KIND_METHOD = 2;
    i32 METHOD_DEFINITION_KIND_EXTENSION_METHOD = 3;
    i32 METHOD_DEFINITION_KIND_GET = 4;
    i32 METHOD_DEFINITION_KIND_SET = 5;
};

dictionary Es2pandaETSObjectFlags {
    i32 ETS_OBJECT_FLAGS_NO_OPTS = 0;
    i32 ETS_OBJECT_FLAGS_CLASS = 1;
    i32 ETS_OBJECT_FLAGS_INTERFACE = 2;
    i32 ETS_OBJECT_FLAGS_INSTANCE = 4;
    i32 ETS_OBJECT_FLAGS_ABSTRACT = 8;
    i32 ETS_OBJECT_FLAGS_GLOBAL = 16;
    i32 ETS_OBJECT_FLAGS_ENUM = 32;
    i32 ETS_OBJECT_FLAGS_FUNCTIONAL = 64;
    i32 ETS_OBJECT_FLAGS_RESOLVED_INTERFACES = 128;
    i32 ETS_OBJECT_FLAGS_RESOLVED_SUPER = 256;
    i32 ETS_OBJECT_FLAGS_RESOLVED_TYPE_PARAMS = 512;
    i32 ETS_OBJECT_FLAGS_CHECKED_COMPATIBLE_ABSTRACTS = 1024;
    i32 ETS_OBJECT_FLAGS_STRING = 2048;
    i32 ETS_OBJECT_FLAGS_INCOMPLETE_INSTANTIATION = 4096;
    i32 ETS_OBJECT_FLAGS_INNER = 8192;
    i32 ETS_OBJECT_FLAGS_DYNAMIC = 16384;
    i32 ETS_OBJECT_FLAGS_ASYNC_FUNC_RETURN_TYPE = 32768;
    i32 ETS_OBJECT_FLAGS_CHECKED_INVOKE_LEGITIMACY = 65536;
    i32 ETS_OBJECT_FLAGS_REQUIRED = 131072;
    i32 ETS_OBJECT_FLAGS_READONLY = 262144;
    i32 ETS_OBJECT_FLAGS_BUILTIN_BIGINT = 524288;
    i32 ETS_OBJECT_FLAGS_BUILTIN_STRING = 1048576;
    i32 ETS_OBJECT_FLAGS_BUILTIN_BOOLEAN = 2097152;
    i32 ETS_OBJECT_FLAGS_BUILTIN_BYTE = 4194304;
    i32 ETS_OBJECT_FLAGS_BUILTIN_CHAR = 8388608;
    i32 ETS_OBJECT_FLAGS_BUILTIN_SHORT = 16777216;
    i32 ETS_OBJECT_FLAGS_BUILTIN_INT = 33554432;
    i32 ETS_OBJECT_FLAGS_BUILTIN_LONG = 67108864;
    i32 ETS_OBJECT_FLAGS_BUILTIN_FLOAT = 134217728;
    i32 ETS_OBJECT_FLAGS_BUILTIN_DOUBLE = 268435456;
    i32 ETS_OBJECT_FLAGS_BOXED_ENUM = 536870912;
    i32 ETS_OBJECT_FLAGS_BUILTIN_NUMERIC = 524288000;
    i32 ETS_OBJECT_FLAGS_VALUE_TYPED = 535300096;
    i32 ETS_OBJECT_FLAGS_UNBOXABLE_TYPE = 1071644672;
    i32 ETS_OBJECT_FLAGS_BUILTIN_TYPE = 1073217536;
    i32 ETS_OBJECT_FLAGS_GLOBAL_CLASS = 17;
    i32 ETS_OBJECT_FLAGS_FUNCTIONAL_INTERFACE = 74;
    i32 ETS_OBJECT_FLAGS_RESOLVED_HEADER = 896;
};

dictionary Es2pandaPropertySearchFlags {
    i32 PROPERTY_SEARCH_FLAGS_NO_OPTS = 0;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_INSTANCE_METHOD = 1;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_INSTANCE_FIELD = 2;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_INSTANCE_DECL = 4;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_STATIC_METHOD = 8;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_STATIC_FIELD = 16;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_STATIC_DECL = 32;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_IN_BASE = 64;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_IN_INTERFACES = 128;
    i32 PROPERTY_SEARCH_FLAGS_IGNORE_ABSTRACT = 256;
    i32 PROPERTY_SEARCH_FLAGS_ALLOW_FUNCTIONAL_INTERFACE = 512;
    i32 PROPERTY_SEARCH_FLAGS_DISALLOW_SYNTHETIC_METHOD_CREATION = 1024;
    i32 PROPERTY_SEARCH_FLAGS_IS_FUNCTIONAL = 2048;
    i32 PROPERTY_SEARCH_FLAGS_IS_SETTER = 4096;
    i32 PROPERTY_SEARCH_FLAGS_IS_GETTER = 8192;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_INSTANCE = 7;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_STATIC = 56;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_METHOD = 9;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_FIELD = 18;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_DECL = 36;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_ALL = 63;
};

dictionary Es2pandaPropertyType {
    i32 PROPERTY_TYPE_INSTANCE_METHOD = 0;
    i32 PROPERTY_TYPE_INSTANCE_FIELD = 1;
    i32 PROPERTY_TYPE_INSTANCE_DECL = 2;
    i32 PROPERTY_TYPE_STATIC_METHOD = 3;
    i32 PROPERTY_TYPE_STATIC_FIELD = 4;
    i32 PROPERTY_TYPE_STATIC_DECL = 5;
    i32 PROPERTY_TYPE_COUNT = 6;
};

dictionary Es2pandaVariableDeclarationKind {
    i32 VARIABLE_DECLARATION_KIND_CONST = 0;
    i32 VARIABLE_DECLARATION_KIND_LET = 1;
    i32 VARIABLE_DECLARATION_KIND_VAR = 2;
};

dictionary Es2pandaAccessibilityOption {
    i32 ACCESSIBILITY_OPTION_NO_OPTS = 0;
    i32 ACCESSIBILITY_OPTION_PUBLIC = 1;
    i32 ACCESSIBILITY_OPTION_PRIVATE = 2;
    i32 ACCESSIBILITY_OPTION_PROTECTED = 3;
};

dictionary Es2pandaRecordTableFlags {
    i32 RECORD_TABLE_FLAGS_NONE = 0;
    i32 RECORD_TABLE_FLAGS_EXTERNAL = 1;
};

dictionary Es2pandaCheckerStatus {
    i32 CHECKER_STATUS_NO_OPTS = 0;
    i32 CHECKER_STATUS_FORCE_TUPLE = 1;
    i32 CHECKER_STATUS_IN_CONST_CONTEXT = 2;
    i32 CHECKER_STATUS_KEEP_LITERAL_TYPE = 4;
    i32 CHECKER_STATUS_IN_PARAMETER = 8;
    i32 CHECKER_STATUS_IN_CLASS = 16;
    i32 CHECKER_STATUS_IN_INTERFACE = 32;
    i32 CHECKER_STATUS_IN_ABSTRACT = 64;
    i32 CHECKER_STATUS_IN_STATIC_CONTEXT = 128;
    i32 CHECKER_STATUS_IN_CONSTRUCTOR = 256;
    i32 CHECKER_STATUS_IN_STATIC_BLOCK = 512;
    i32 CHECKER_STATUS_INNER_CLASS = 1024;
    i32 CHECKER_STATUS_IN_ENUM = 2048;
    i32 CHECKER_STATUS_BUILTINS_INITIALIZED = 4096;
    i32 CHECKER_STATUS_IN_LAMBDA = 8192;
    i32 CHECKER_STATUS_IGNORE_VISIBILITY = 16384;
    i32 CHECKER_STATUS_IN_INSTANCE_EXTENSION_METHOD = 32768;
    i32 CHECKER_STATUS_IN_LOCAL_CLASS = 65536;
    i32 CHECKER_STATUS_IN_INSTANCEOF_CONTEXT = 131072;
    i32 CHECKER_STATUS_IN_TEST_EXPRESSION = 262144;
    i32 CHECKER_STATUS_IN_LOOP = 524288;
    i32 CHECKER_STATUS_MEET_RETURN = 1048576;
    i32 CHECKER_STATUS_MEET_BREAK = 2097152;
    i32 CHECKER_STATUS_MEET_CONTINUE = 4194304;
    i32 CHECKER_STATUS_MEET_THROW = 8388608;
    i32 CHECKER_STATUS_IN_EXTERNAL = 16777216;
    i32 CHECKER_STATUS_IN_BRIDGE_TEST = 33554432;
    i32 CHECKER_STATUS_IN_GETTER = 67108864;
    i32 CHECKER_STATUS_IN_SETTER = 134217728;
};

dictionary Es2pandaOverrideErrorCode {
    i32 OVERRIDE_ERROR_CODE_NO_ERROR = 0;
    i32 OVERRIDE_ERROR_CODE_OVERRIDDEN_FINAL = 1;
    i32 OVERRIDE_ERROR_CODE_INCOMPATIBLE_RETURN = 2;
    i32 OVERRIDE_ERROR_CODE_OVERRIDDEN_WEAKER = 3;
};

dictionary Es2pandaResolvedKind {
    i32 RESOLVED_KIND_PROPERTY = 0;
    i32 RESOLVED_KIND_INSTANCE_EXTENSION_FUNCTION = 1;
};

dictionary Es2pandaLexicalScopeType {
    i32 LEXICAL_SCOPE_TYPE_BLOCK = 0;
    i32 LEXICAL_SCOPE_TYPE_STRICT_BLOCK = 1;
    i32 LEXICAL_SCOPE_TYPE_CATCH = 2;
    i32 LEXICAL_SCOPE_TYPE_FUNCTION_PARAM = 3;
    i32 LEXICAL_SCOPE_TYPE_TS_TYPE_LITERAL = 4;
};

dictionary Es2pandaVariableParsingFlags {
    i32 VARIABLE_PARSING_FLAGS_NO_OPTS = 0;
    i32 VARIABLE_PARSING_FLAGS_NO_SKIP_VAR_KIND = 1;
    i32 VARIABLE_PARSING_FLAGS_ACCEPT_CONST_NO_INIT = 2;
    i32 VARIABLE_PARSING_FLAGS_DISALLOW_INIT = 4;
    i32 VARIABLE_PARSING_FLAGS_VAR = 8;
    i32 VARIABLE_PARSING_FLAGS_LET = 16;
    i32 VARIABLE_PARSING_FLAGS_CONST = 32;
    i32 VARIABLE_PARSING_FLAGS_STOP_AT_IN = 64;
    i32 VARIABLE_PARSING_FLAGS_IN_FOR = 128;
    i32 VARIABLE_PARSING_FLAGS_FOR_OF = 256;
};

dictionary Es2pandaExpressionParseFlags {
    i32 EXPRESSION_PARSE_FLAGS_NO_OPTS = 0;
    i32 EXPRESSION_PARSE_FLAGS_ACCEPT_COMMA = 1;
    i32 EXPRESSION_PARSE_FLAGS_ACCEPT_REST = 2;
    i32 EXPRESSION_PARSE_FLAGS_EXP_DISALLOW_AS = 4;
    i32 EXPRESSION_PARSE_FLAGS_DISALLOW_ASSIGNMENT = 8;
    i32 EXPRESSION_PARSE_FLAGS_DISALLOW_YIELD = 16;
    i32 EXPRESSION_PARSE_FLAGS_STOP_AT_IN = 32;
    i32 EXPRESSION_PARSE_FLAGS_MUST_BE_PATTERN = 64;
    i32 EXPRESSION_PARSE_FLAGS_POTENTIALLY_IN_PATTERN = 128;
    i32 EXPRESSION_PARSE_FLAGS_OBJECT_PATTERN = 256;
    i32 EXPRESSION_PARSE_FLAGS_IN_REST = 512;
    i32 EXPRESSION_PARSE_FLAGS_IMPORT = 1024;
    i32 EXPRESSION_PARSE_FLAGS_POTENTIAL_CLASS_LITERAL = 2048;
    i32 EXPRESSION_PARSE_FLAGS_IN_FOR = 4096;
    i32 EXPRESSION_PARSE_FLAGS_INSTANCEOF = 8192;
    i32 EXPRESSION_PARSE_FLAGS_POTENTIAL_NEW_ARRAY = 16384;
};

dictionary Es2pandaStatementParsingFlags {
    i32 STATEMENT_PARSING_FLAGS_NONE = 0;
    i32 STATEMENT_PARSING_FLAGS_ALLOW_LEXICAL = 1;
    i32 STATEMENT_PARSING_FLAGS_GLOBAL = 2;
    i32 STATEMENT_PARSING_FLAGS_IF_ELSE = 4;
    i32 STATEMENT_PARSING_FLAGS_LABELLED = 8;
    i32 STATEMENT_PARSING_FLAGS_STMT_LEXICAL_SCOPE_NEEDED = 12;
    i32 STATEMENT_PARSING_FLAGS_STMT_GLOBAL_LEXICAL = 3;
};

dictionary Es2pandaForStatementKind {
    i32 FOR_STATEMENT_KIND_UPDATE = 0;
    i32 FOR_STATEMENT_KIND_IN = 1;
    i32 FOR_STATEMENT_KIND_OF = 2;
};

dictionary Es2pandaCompilationMode {
    i32 COMPILATION_MODE_GEN_STD_LIB = 0;
    i32 COMPILATION_MODE_PROJECT = 1;
    i32 COMPILATION_MODE_SINGLE_FILE = 2;
};

dictionary Es2pandaErrorType {
    i32 ERROR_TYPE_INVALID = 0;
    i32 ERROR_TYPE_GENERIC = 1;
    i32 ERROR_TYPE_SYNTAX = 2;
    i32 ERROR_TYPE_TYPE = 3;
    i32 ERROR_TYPE_ETS_WARNING = 4;
};

dictionary Es2pandaCheckDecision {
    i32 CHECK_DECISION_CORRECT = 0;
    i32 CHECK_DECISION_INCORRECT = 1;
};

dictionary Es2pandaCheckAction {
    i32 CHECK_ACTION_CONTINUE = 0;
    i32 CHECK_ACTION_SKIP_SUBTREE = 1;
};



interface es2panda_Impl {
    es2panda_Config CreateConfig(i32 argc, sequence<String> argv);
    void DestroyConfig(es2panda_Config config);

    es2panda_Context CreateContextFromFile(es2panda_Config config, String source_file_name);
    es2panda_Context CreateContextFromString(es2panda_Config config, String source, String file_name);
    es2panda_Context ProceedToState(es2panda_Context context, es2panda_ContextState state);  // context is consumed
    void DestroyContext(es2panda_Context context);

    es2panda_ContextState ContextState(es2panda_Context context);
    String ContextErrorMessage(es2panda_Context context);

    es2panda_Program ContextProgram(es2panda_Context context);
    es2panda_AstNode ProgramAst(es2panda_Program program);
    sequence<es2panda_ExternalSource> ProgramExternalSources(es2panda_Program program, sequence<u32> len_p);
    String ExternalSourceName(es2panda_ExternalSource e_source);
    sequence<es2panda_Program> ExternalSourcePrograms(es2panda_ExternalSource e_source, sequence<u32> len_p);

    void AstNodeForEach(es2panda_AstNode ast, AstNodeForEachFunction func, VoidPtr arg);

    boolean SetNumberLiteralInt(es2panda_AstNode node, i32 new_value);
    boolean SetNumberLiteralLong(es2panda_AstNode node, i64 new_value);
    boolean SetNumberLiteralDouble(es2panda_AstNode node, f64 new_value);
    boolean SetNumberLiteralFloat(es2panda_AstNode node, f32 new_value);

    es2panda_AstNode CreateNumberLiteral(es2panda_Context ctx, i32 value);
    es2panda_AstNode CreateNumberLiteral1(es2panda_Context ctx, i64 value);
    es2panda_AstNode CreateNumberLiteral2(es2panda_Context ctx, f64 value);
    es2panda_AstNode CreateNumberLiteral3(es2panda_Context ctx, f32 value);

    es2panda_AstNode UpdateNumberLiteral(es2panda_Context ctx, es2panda_AstNode original, i32 value);
    es2panda_AstNode UpdateNumberLiteral1(es2panda_Context ctx, es2panda_AstNode original, i64 value);
    es2panda_AstNode UpdateNumberLiteral2(es2panda_Context ctx, es2panda_AstNode original, f64 value);
    es2panda_AstNode UpdateNumberLiteral3(es2panda_Context ctx, es2panda_AstNode original, f32 value);

    VoidPtr AllocMemory(es2panda_Context context, u32 numberOfElements, u32 sizeOfElement);

    es2panda_SourcePosition CreateSourcePosition(es2panda_Context context, u32 index, u32 line);
    es2panda_SourceRange CreateSourceRange(es2panda_Context context, es2panda_SourcePosition start,
                                               es2panda_SourcePosition end);
    u32 SourcePositionIndex(es2panda_Context context, es2panda_SourcePosition position);
    u32 SourcePositionLine(es2panda_Context context, es2panda_SourcePosition position);
    es2panda_SourcePosition SourceRangeStart(es2panda_Context context, es2panda_SourceRange range);
    es2panda_SourcePosition SourceRangeEnd(es2panda_Context context, es2panda_SourceRange range);
    void LogTypeError(es2panda_Context context, String errorMsg, es2panda_SourcePosition pos);
    void LogWarning(es2panda_Context context, String warnMsg, es2panda_SourcePosition pos);
    void LogSyntaxError(es2panda_Context context, String errorMsg, es2panda_SourcePosition pos);
    void InitScopesPhaseETSRunExternalNode(es2panda_Context ctx, es2panda_AstNode node);
    es2panda_Scope AstNodeFindNearestScope(es2panda_Context ctx, es2panda_AstNode node);
    void AstNodeRecheck(es2panda_Context ctx, es2panda_AstNode node);
    Es2pandaEnum Es2pandaEnumFromString(es2panda_Context ctx, String str);
    String Es2pandaEnumToString(es2panda_Context ctx, Es2pandaEnum id);

    boolean IsExpression(es2panda_AstNode ast);
    boolean IsStatement(es2panda_AstNode ast);
    boolean IsArrowFunctionExpression(es2panda_AstNode ast);
    boolean IsAnnotationDeclaration(es2panda_AstNode ast);
    boolean IsAnnotationUsage(es2panda_AstNode ast);
    boolean IsAssertStatement(es2panda_AstNode ast);
    boolean IsAwaitExpression(es2panda_AstNode ast);
    boolean IsBigIntLiteral(es2panda_AstNode ast);
    boolean IsBinaryExpression(es2panda_AstNode ast);
    boolean IsBlockStatement(es2panda_AstNode ast);
    boolean IsBooleanLiteral(es2panda_AstNode ast);
    boolean IsBreakStatement(es2panda_AstNode ast);
    boolean IsCallExpression(es2panda_AstNode ast);
    boolean IsCatchClause(es2panda_AstNode ast);
    boolean IsChainExpression(es2panda_AstNode ast);
    boolean IsCharLiteral(es2panda_AstNode ast);
    boolean IsClassDefinition(es2panda_AstNode ast);
    boolean IsClassDeclaration(es2panda_AstNode ast);
    boolean IsClassExpression(es2panda_AstNode ast);
    boolean IsClassProperty(es2panda_AstNode ast);
    boolean IsClassStaticBlock(es2panda_AstNode ast);
    boolean IsConditionalExpression(es2panda_AstNode ast);
    boolean IsContinueStatement(es2panda_AstNode ast);
    boolean IsDebuggerStatement(es2panda_AstNode ast);
    boolean IsDecorator(es2panda_AstNode ast);
    boolean IsDirectEvalExpression(es2panda_AstNode ast);
    boolean IsDoWhileStatement(es2panda_AstNode ast);
    boolean IsEmptyStatement(es2panda_AstNode ast);
    boolean IsExportAllDeclaration(es2panda_AstNode ast);
    boolean IsExportDefaultDeclaration(es2panda_AstNode ast);
    boolean IsExportNamedDeclaration(es2panda_AstNode ast);
    boolean IsExportSpecifier(es2panda_AstNode ast);
    boolean IsExpressionStatement(es2panda_AstNode ast);
    boolean IsForInStatement(es2panda_AstNode ast);
    boolean IsForOfStatement(es2panda_AstNode ast);
    boolean IsForUpdateStatement(es2panda_AstNode ast);
    boolean IsFunctionDeclaration(es2panda_AstNode ast);
    boolean IsFunctionExpression(es2panda_AstNode ast);
    boolean IsIdentifier(es2panda_AstNode ast);
    boolean IsDummyNode(es2panda_AstNode ast);
    boolean IsIfStatement(es2panda_AstNode ast);
    boolean IsImportDeclaration(es2panda_AstNode ast);
    boolean IsImportExpression(es2panda_AstNode ast);
    boolean IsImportDefaultSpecifier(es2panda_AstNode ast);
    boolean IsImportNamespaceSpecifier(es2panda_AstNode ast);
    boolean IsImportSpecifier(es2panda_AstNode ast);
    boolean IsLabelledStatement(es2panda_AstNode ast);
    boolean IsMemberExpression(es2panda_AstNode ast);
    boolean IsMetaProperty(es2panda_AstNode ast);
    boolean IsMethodDefinition(es2panda_AstNode ast);
    boolean IsNamedType(es2panda_AstNode ast);
    boolean IsNamespaceDeclaration(es2panda_AstNode ast);
    boolean IsNamespaceDefinition(es2panda_AstNode ast);
    boolean IsNewExpression(es2panda_AstNode ast);
    boolean IsNullLiteral(es2panda_AstNode ast);
    boolean IsUndefinedLiteral(es2panda_AstNode ast);
    boolean IsNumberLiteral(es2panda_AstNode ast);
    boolean IsOmittedExpression(es2panda_AstNode ast);
    boolean IsPrefixAssertionExpression(es2panda_AstNode ast);
    boolean IsProperty(es2panda_AstNode ast);
    boolean IsRegExpLiteral(es2panda_AstNode ast);
    boolean IsETSReExportDeclaration(es2panda_AstNode ast);
    boolean IsReturnStatement(es2panda_AstNode ast);
    boolean IsScriptFunction(es2panda_AstNode ast);
    boolean IsSequenceExpression(es2panda_AstNode ast);
    boolean IsStringLiteral(es2panda_AstNode ast);
    boolean IsETSNullType(es2panda_AstNode ast);
    boolean IsETSUndefinedType(es2panda_AstNode ast);
    boolean IsETSNeverType(es2panda_AstNode ast);
    boolean IsETSStringLiteralType(es2panda_AstNode ast);
    boolean IsETSFunctionType(es2panda_AstNode ast);
    boolean IsETSWildcardType(es2panda_AstNode ast);
    boolean IsETSPrimitiveType(es2panda_AstNode ast);
    boolean IsETSPackageDeclaration(es2panda_AstNode ast);
    boolean IsETSClassLiteral(es2panda_AstNode ast);
    boolean IsETSTypeReference(es2panda_AstNode ast);
    boolean IsETSTypeReferencePart(es2panda_AstNode ast);
    boolean IsETSUnionType(es2panda_AstNode ast);
    boolean IsETSLaunchExpression(es2panda_AstNode ast);
    boolean IsETSNewArrayInstanceExpression(es2panda_AstNode ast);
    boolean IsETSNewMultiDimArrayInstanceExpression(es2panda_AstNode ast);
    boolean IsETSNewClassInstanceExpression(es2panda_AstNode ast);
    boolean IsETSImportDeclaration(es2panda_AstNode ast);
    boolean IsETSParameterExpression(es2panda_AstNode ast);
    boolean IsETSTuple(es2panda_AstNode ast);
    boolean IsETSScript(es2panda_AstNode ast);
    boolean IsSuperExpression(es2panda_AstNode ast);
    boolean IsETSStructDeclaration(es2panda_AstNode ast);
    boolean IsSwitchCaseStatement(es2panda_AstNode ast);
    boolean IsSwitchStatement(es2panda_AstNode ast);
    boolean IsTSEnumDeclaration(es2panda_AstNode ast);
    boolean IsTSEnumMember(es2panda_AstNode ast);
    boolean IsTSExternalModuleReference(es2panda_AstNode ast);
    boolean IsTSNumberKeyword(es2panda_AstNode ast);
    boolean IsTSAnyKeyword(es2panda_AstNode ast);
    boolean IsTSStringKeyword(es2panda_AstNode ast);
    boolean IsTSBooleanKeyword(es2panda_AstNode ast);
    boolean IsTSVoidKeyword(es2panda_AstNode ast);
    boolean IsTSUndefinedKeyword(es2panda_AstNode ast);
    boolean IsTSUnknownKeyword(es2panda_AstNode ast);
    boolean IsTSObjectKeyword(es2panda_AstNode ast);
    boolean IsTSBigintKeyword(es2panda_AstNode ast);
    boolean IsTSNeverKeyword(es2panda_AstNode ast);
    boolean IsTSNonNullExpression(es2panda_AstNode ast);
    boolean IsTSNullKeyword(es2panda_AstNode ast);
    boolean IsTSArrayType(es2panda_AstNode ast);
    boolean IsTSUnionType(es2panda_AstNode ast);
    boolean IsTSTypeLiteral(es2panda_AstNode ast);
    boolean IsTSPropertySignature(es2panda_AstNode ast);
    boolean IsTSMethodSignature(es2panda_AstNode ast);
    boolean IsTSSignatureDeclaration(es2panda_AstNode ast);
    boolean IsTSParenthesizedType(es2panda_AstNode ast);
    boolean IsTSLiteralType(es2panda_AstNode ast);
    boolean IsTSInferType(es2panda_AstNode ast);
    boolean IsTSConditionalType(es2panda_AstNode ast);
    boolean IsTSImportType(es2panda_AstNode ast);
    boolean IsTSIntersectionType(es2panda_AstNode ast);
    boolean IsTSMappedType(es2panda_AstNode ast);
    boolean IsTSModuleBlock(es2panda_AstNode ast);
    boolean IsTSThisType(es2panda_AstNode ast);
    boolean IsTSTypeOperator(es2panda_AstNode ast);
    boolean IsTSTypeParameter(es2panda_AstNode ast);
    boolean IsTSTypeParameterDeclaration(es2panda_AstNode ast);
    boolean IsTSTypeParameterInstantiation(es2panda_AstNode ast);
    boolean IsTSTypePredicate(es2panda_AstNode ast);
    boolean IsTSParameterProperty(es2panda_AstNode ast);
    boolean IsTSModuleDeclaration(es2panda_AstNode ast);
    boolean IsTSImportEqualsDeclaration(es2panda_AstNode ast);
    boolean IsTSFunctionType(es2panda_AstNode ast);
    boolean IsTSConstructorType(es2panda_AstNode ast);
    boolean IsTSTypeAliasDeclaration(es2panda_AstNode ast);
    boolean IsTSTypeReference(es2panda_AstNode ast);
    boolean IsTSQualifiedName(es2panda_AstNode ast);
    boolean IsTSIndexedAccessType(es2panda_AstNode ast);
    boolean IsTSInterfaceDeclaration(es2panda_AstNode ast);
    boolean IsTSInterfaceBody(es2panda_AstNode ast);
    boolean IsTSInterfaceHeritage(es2panda_AstNode ast);
    boolean IsTSTupleType(es2panda_AstNode ast);
    boolean IsTSNamedTupleMember(es2panda_AstNode ast);
    boolean IsTSIndexSignature(es2panda_AstNode ast);
    boolean IsTSTypeQuery(es2panda_AstNode ast);
    boolean IsTSAsExpression(es2panda_AstNode ast);
    boolean IsTSClassImplements(es2panda_AstNode ast);
    boolean IsTSTypeAssertion(es2panda_AstNode ast);
    boolean IsTaggedTemplateExpression(es2panda_AstNode ast);
    boolean IsTemplateElement(es2panda_AstNode ast);
    boolean IsTemplateLiteral(es2panda_AstNode ast);
    boolean IsThisExpression(es2panda_AstNode ast);
    boolean IsTypeofExpression(es2panda_AstNode ast);
    boolean IsThrowStatement(es2panda_AstNode ast);
    boolean IsTryStatement(es2panda_AstNode ast);
    boolean IsUnaryExpression(es2panda_AstNode ast);
    boolean IsUpdateExpression(es2panda_AstNode ast);
    boolean IsVariableDeclaration(es2panda_AstNode ast);
    boolean IsVariableDeclarator(es2panda_AstNode ast);
    boolean IsWhileStatement(es2panda_AstNode ast);
    boolean IsYieldExpression(es2panda_AstNode ast);
    boolean IsOpaqueTypeNode(es2panda_AstNode ast);
    boolean IsBlockExpression(es2panda_AstNode ast);
    boolean IsErrorTypeNode(es2panda_AstNode ast);
    boolean IsArrayExpression(es2panda_AstNode ast);
    boolean IsArrayPattern(es2panda_AstNode ast);
    boolean IsAssignmentExpression(es2panda_AstNode ast);
    boolean IsAssignmentPattern(es2panda_AstNode ast);
    boolean IsObjectExpression(es2panda_AstNode ast);
    boolean IsObjectPattern(es2panda_AstNode ast);
    boolean IsSpreadElement(es2panda_AstNode ast);
    boolean IsRestElement(es2panda_AstNode ast);

    boolean ScopeIsVariableScope(es2panda_Scope scope);
    boolean ScopeIsParamScope(es2panda_Scope scope);
    boolean ScopeIsCatchParamScope(es2panda_Scope scope);
    boolean ScopeIsFunctionParamScope(es2panda_Scope scope);
    boolean ScopeIsCatchScope(es2panda_Scope scope);
    boolean ScopeIsClassScope(es2panda_Scope scope);
    boolean ScopeIsAnnotationScope(es2panda_Scope scope);
    boolean ScopeIsAnnotationParamScope(es2panda_Scope scope);
    boolean ScopeIsLocalScope(es2panda_Scope scope);
    boolean ScopeIsLocalScopeWithTypeAlias(es2panda_Scope scope);
    boolean ScopeIsLoopScope(es2panda_Scope scope);
    boolean ScopeIsLoopDeclarationScope(es2panda_Scope scope);
    boolean ScopeIsFunctionScope(es2panda_Scope scope);
    boolean ScopeIsGlobalScope(es2panda_Scope scope);
    boolean ScopeIsModuleScope(es2panda_Scope scope);

    boolean TypeIsArrayType(es2panda_Type type);
    boolean TypeIsAnyType(es2panda_Type type);
    boolean TypeIsBigintLiteralType(es2panda_Type type);
    boolean TypeIsNumberType(es2panda_Type type);
    boolean TypeIsStringType(es2panda_Type type);
    boolean TypeIsBooleanType(es2panda_Type type);
    boolean TypeIsVoidType(es2panda_Type type);
    boolean TypeIsNullType(es2panda_Type type);
    boolean TypeIsUndefinedType(es2panda_Type type);
    boolean TypeIsUnknownType(es2panda_Type type);
    boolean TypeIsNeverType(es2panda_Type type);
    boolean TypeIsUnionType(es2panda_Type type);
    boolean TypeIsObjectType(es2panda_Type type);
    boolean TypeIsBigintType(es2panda_Type type);
    boolean TypeIsBooleanLiteralType(es2panda_Type type);
    boolean TypeIsNumberLiteralType(es2panda_Type type);
    boolean TypeIsStringLiteralType(es2panda_Type type);
    boolean TypeIsEnumType(es2panda_Type type);
    boolean TypeIsEnumLiteralType(es2panda_Type type);
    boolean TypeIsTypeParameter(es2panda_Type type);
    boolean TypeIsTypeReference(es2panda_Type type);
    boolean TypeIsByteType(es2panda_Type type);
    boolean TypeIsShortType(es2panda_Type type);
    boolean TypeIsIntType(es2panda_Type type);
    boolean TypeIsLongType(es2panda_Type type);
    boolean TypeIsFloatType(es2panda_Type type);
    boolean TypeIsDoubleType(es2panda_Type type);
    boolean TypeIsCharType(es2panda_Type type);
    boolean TypeIsETSBooleanType(es2panda_Type type);
    boolean TypeIsETSVoidType(es2panda_Type type);
    boolean TypeIsETSNullType(es2panda_Type type);
    boolean TypeIsETSUndefinedType(es2panda_Type type);
    boolean TypeIsETSNeverType(es2panda_Type type);
    boolean TypeIsETSFunctionType(es2panda_Type type);
    boolean TypeIsETSObjectType(es2panda_Type type);
    boolean TypeIsETSArrayType(es2panda_Type type);
    boolean TypeIsETSUnionType(es2panda_Type type);
    boolean TypeIsNonPrimitiveType(es2panda_Type type);
    boolean TypeIsWildcardType(es2panda_Type type);
    boolean TypeIsETSTypeParameter(es2panda_Type type);
    boolean TypeIsETSNonNullishType(es2panda_Type type);
    boolean TypeIsETSReadonlyType(es2panda_Type type);
    boolean TypeIsETSIntEnumType(es2panda_Type type);
    boolean TypeIsETSStringEnumType(es2panda_Type type);
    boolean TypeIsETSEnumType(es2panda_Type type);
    boolean TypeIsETSExtensionFuncHelperType(es2panda_Type type);
    boolean TypeIsETSTupleType(es2panda_Type type);
    boolean TypeIsETSPartialTypeParameter(es2panda_Type type);
    boolean TypeIsTypeError(es2panda_Type type);
    boolean TypeIsETSTypeAliasType(es2panda_Type type);

    boolean VariableIsLocalVariable(es2panda_Variable variable);
    boolean VariableIsGlobalVariable(es2panda_Variable variable);
    boolean VariableIsModuleVariable(es2panda_Variable variable);
    boolean VariableIsEnumVariable(es2panda_Variable variable);

    String AstNodeName(es2panda_AstNode ast);
};



[Entity=Class, Es2pandaAstNodeType = 44] interface LabelledStatement: Statement {
    static LabelledStatement Create(es2panda_Context context, Identifier ident, Statement body);

    static LabelledStatement Update(es2panda_Context context, es2panda_AstNode original, Identifier ident, Statement body);


/* const Statement *Body() const */
    [get] Statement BodyConst(es2panda_Context context);
/* const Identifier *Ident() const */
    [get] Identifier IdentConst(es2panda_Context context);
/* Identifier *Ident() */
    [get] Identifier Ident(es2panda_Context context);
/* const ir::AstNode *GetReferencedStatement() const */
    AstNode GetReferencedStatementConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 147] interface ThrowStatement: Statement {
    static ThrowStatement Create(es2panda_Context context, Expression argument);

    static ThrowStatement Update(es2panda_Context context, es2panda_AstNode original, Expression argument);


/* const Expression *Argument() const */
    [get] Expression ArgumentConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 17] interface ClassProperty: ClassElement {
    static ClassProperty Create(es2panda_Context context, Expression key, Expression value, TypeNode typeAnnotation, Es2pandaModifierFlags modifiers, boolean isComputed);

    static ClassProperty Update(es2panda_Context context, es2panda_AstNode original, Expression key, Expression value, TypeNode typeAnnotation, Es2pandaModifierFlags modifiers, boolean isComputed);


/* [[nodiscard]] TypeNode *TypeAnnotation() const noexcept */
    [get] TypeNode TypeAnnotationConst(es2panda_Context context);
/* void SetTypeAnnotation(TypeNode *typeAnnotation) noexcept */
    void SetTypeAnnotation(es2panda_Context context, TypeNode typeAnnotation);
};

[Entity=Class, Es2pandaAstNodeType = 95] interface TSVoidKeyword: TypeNode {
    static TSVoidKeyword Create(es2panda_Context context);

    static TSVoidKeyword Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 68] interface ETSFunctionType: TypeNode {
    static ETSFunctionType CreateIr(es2panda_Context context, es2panda_FunctionSignature signature, Es2pandaScriptFunctionFlags funcFlags);

    static ETSFunctionType UpdateIr(es2panda_Context context, es2panda_AstNode original, es2panda_FunctionSignature signature, Es2pandaScriptFunctionFlags funcFlags);


/* void SetScope(varbinder::Scope *scope) */
    void IrSetScope(es2panda_Context context, Scope scope);
/* [[nodiscard]] FunctionSignature IrSignature() noexcept */
    [get] es2panda_FunctionSignature IrIrSignature(es2panda_Context context);
/* const TSTypeParameterDeclaration *TypeParams() const */
    [get] TSTypeParameterDeclaration IrTypeParamsConst(es2panda_Context context);
/* TSTypeParameterDeclaration *TypeParams() */
    [get] TSTypeParameterDeclaration IrTypeParams(es2panda_Context context);
/* const ArenaVector<Expression *> &Params() const */
    [get] sequence<Expression> IrParamsConst(es2panda_Context context);
/* const TypeNode *ReturnType() const */
    [get] TypeNode IrReturnTypeConst(es2panda_Context context);
/* TypeNode *ReturnType() */
    [get] TypeNode IrReturnType(es2panda_Context context);
/* ir::TSInterfaceDeclaration *FunctionalInterface() */
    [get] TSInterfaceDeclaration IrFunctionalInterface(es2panda_Context context);
/* const ir::TSInterfaceDeclaration *FunctionalInterface() const */
    [get] TSInterfaceDeclaration IrFunctionalInterfaceConst(es2panda_Context context);
/* void SetFunctionalInterface(ir::TSInterfaceDeclaration *functionalInterface) */
    void IrSetFunctionalInterface(es2panda_Context context, TSInterfaceDeclaration functionalInterface);
/* ir::ScriptFunctionFlags Flags() */
    [get] Es2pandaScriptFunctionFlags IrFlags(es2panda_Context context);
/* bool IsThrowing() const */
    [get] boolean IrIsThrowingConst(es2panda_Context context);
/* bool IsRethrowing() const */
    [get] boolean IrIsRethrowingConst(es2panda_Context context);
/* size_t DefaultParamIndex() const */
    [get] u32 IrDefaultParamIndexConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 118] interface TSTypeOperator: TypeNode {
    static TSTypeOperator Create(es2panda_Context context, TypeNode type, Es2pandaTSOperatorType operatorType);

    static TSTypeOperator Update(es2panda_Context context, es2panda_AstNode original, TypeNode type, Es2pandaTSOperatorType operatorType);


/* const TypeNode *Type() const */
    [get] TypeNode TypeConst(es2panda_Context context);
/* bool IsReadonly() const */
    [get] boolean IsReadonlyConst(es2panda_Context context);
/* bool IsKeyof() const */
    [get] boolean IsKeyofConst(es2panda_Context context);
/* bool IsUnique() const */
    [get] boolean IsUniqueConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 38] interface IfStatement: Statement {
    static IfStatement Create(es2panda_Context context, Expression test, Statement consequent, Statement alternate);

    static IfStatement Update(es2panda_Context context, es2panda_AstNode original, Expression test, Statement consequent, Statement alternate);


/* [[nodiscard]] const Expression *Test() const noexcept */
    [get] Expression TestConst(es2panda_Context context);
/* [[nodiscard]] Expression *Test() noexcept */
    [get] Expression Test(es2panda_Context context);
/* [[nodiscard]] const Statement *Consequent() const noexcept */
    [get] Statement ConsequentConst(es2panda_Context context);
/* [[nodiscard]] Statement *Consequent() noexcept */
    [get] Statement Consequent(es2panda_Context context);
/* [[nodiscard]] Statement *Alternate() noexcept */
    [get] Statement Alternate(es2panda_Context context);
/* [[nodiscard]] const Statement *Alternate() const noexcept */
    [get] Statement AlternateConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 127] interface TSConstructorType: TypeNode {
    static TSConstructorType Create(es2panda_Context context, es2panda_FunctionSignature signature, boolean abstract);

    static TSConstructorType Update(es2panda_Context context, es2panda_AstNode original, es2panda_FunctionSignature signature, boolean abstract);


/* void SetScope(varbinder::Scope *scope) */
    void SetScope(es2panda_Context context, Scope scope);
/* const TSTypeParameterDeclaration *TypeParams() const */
    [get] TSTypeParameterDeclaration TypeParamsConst(es2panda_Context context);
/* TSTypeParameterDeclaration *TypeParams() */
    [get] TSTypeParameterDeclaration TypeParams(es2panda_Context context);
/* const ArenaVector<Expression *> &Params() const */
    [get] sequence<Expression> ParamsConst(es2panda_Context context);
/* const TypeNode *ReturnType() const */
    [get] TypeNode ReturnTypeConst(es2panda_Context context);
/* TypeNode *ReturnType() */
    [get] TypeNode ReturnType(es2panda_Context context);
/* bool Abstract() const */
    [get] boolean AbstractConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 22] interface Decorator: Statement {
    static Decorator Create(es2panda_Context context, Expression expr);

    static Decorator Update(es2panda_Context context, es2panda_AstNode original, Expression expr);


/* [[nodiscard]] const Expression *Expr() const noexcept */
    [get] Expression ExprConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 88] interface TSEnumDeclaration: TypedStatement {
    static TSEnumDeclaration Create(es2panda_Context context, Identifier key, sequence<AstNode> members, u32 membersLen, boolean isConst, boolean isStatic, boolean isDeclare);

    static TSEnumDeclaration Update(es2panda_Context context, es2panda_AstNode original, Identifier key, sequence<AstNode> members, u32 membersLen, boolean isConst, boolean isStatic, boolean isDeclare);


/* void SetScope(varbinder::LocalScope *scope) */
    void SetScope(es2panda_Context context, LocalScope scope);
/* const Identifier *Key() const */
    [get] Identifier KeyConst(es2panda_Context context);
/* Identifier *Key() */
    [get] Identifier Key(es2panda_Context context);
/* const ArenaVector<AstNode *> &Members() const */
    [get] sequence<AstNode> MembersConst(es2panda_Context context);
/* const util::StringView &InternalName() const */
    [get] String InternalNameConst(es2panda_Context context);
/* void SetInternalName(util::StringView internalName) */
    void SetInternalName(es2panda_Context context, String internalName);
/* ir::ClassDefinition *BoxedClass() const */
    [get] ClassDefinition BoxedClassConst(es2panda_Context context);
/* void SetBoxedClass(ir::ClassDefinition *const wrapperClass) */
    void SetBoxedClass(es2panda_Context context, ClassDefinition wrapperClass);
/* bool IsConst() const */
    [get] boolean IsConstConst(es2panda_Context context);
/* const ArenaVector<Decorator *> &Decorators() const */
    [get] sequence<Decorator> DecoratorsConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 100] interface TSNeverKeyword: TypeNode {
    static TSNeverKeyword Create(es2panda_Context context);

    static TSNeverKeyword Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 41] interface ImportDefaultSpecifier: Statement {
    static ImportDefaultSpecifier Create(es2panda_Context context, Identifier local);

    static ImportDefaultSpecifier Update(es2panda_Context context, es2panda_AstNode original, Identifier local);


/* const Identifier *Local() const */
    [get] Identifier LocalConst(es2panda_Context context);
/* Identifier *Local() */
    [get] Identifier Local(es2panda_Context context);
};

[Entity=Class] interface ObjectExpression: AnnotatedExpression {
    static ObjectExpression Create(es2panda_Context context, Es2pandaAstNodeType nodeType, sequence<Expression> properties, u32 propertiesLen, boolean trailingComma);

    static ObjectExpression Update(es2panda_Context context, es2panda_AstNode original, Es2pandaAstNodeType nodeType, sequence<Expression> properties, u32 propertiesLen, boolean trailingComma);


/* [[nodiscard]] const ArenaVector<Expression *> &Properties() const noexcept */
    [get] sequence<Expression> PropertiesConst(es2panda_Context context);
/* [[nodiscard]] bool IsDeclaration() const noexcept */
    [get] boolean IsDeclarationConst(es2panda_Context context);
/* [[nodiscard]] bool IsOptional() const noexcept */
    [get] boolean IsOptionalConst(es2panda_Context context);
/* void SetPreferredType(checker::Type *const preferredType) noexcept */
    void SetPreferredType(es2panda_Context context, Type preferredType);
/* [[nodiscard]] checker::Type *PreferredType() const noexcept */
    [get] Type PreferredTypeConst(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<Decorator *> &Decorators() const noexcept */
    [get] sequence<Decorator> DecoratorsConst(es2panda_Context context);
/* [[nodiscard]] ValidationInfo ValidateExpression() */
    es2panda_ValidationInfo ValidateExpression(es2panda_Context context);
/* [[nodiscard]] bool ConvertibleToObjectPattern() */
    boolean ConvertibleToObjectPattern(es2panda_Context context);
/* void SetDeclaration() */
    void SetDeclaration(es2panda_Context context);
/* void SetOptional(bool optional) */
    void SetOptional(es2panda_Context context, boolean optional_arg);
};

[Entity=Class, Es2pandaAstNodeType = 43] interface ImportSpecifier: Statement {
    static ImportSpecifier Create(es2panda_Context context, Identifier imported, Identifier local);

    static ImportSpecifier Update(es2panda_Context context, es2panda_AstNode original, Identifier imported, Identifier local);


/* Identifier *Imported() */
    [get] Identifier Imported(es2panda_Context context);
/* const Identifier *Imported() const */
    [get] Identifier ImportedConst(es2panda_Context context);
/* Identifier *Local() */
    [get] Identifier Local(es2panda_Context context);
/* const Identifier *Local() const */
    [get] Identifier LocalConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 19] interface ConditionalExpression: Expression {
    static ConditionalExpression Create(es2panda_Context context, Expression test, Expression consequent, Expression alternate);

    static ConditionalExpression Update(es2panda_Context context, es2panda_AstNode original, Expression test, Expression consequent, Expression alternate);


/* [[nodiscard]] const Expression *Test() const noexcept */
    [get] Expression TestConst(es2panda_Context context);
/* [[nodiscard]] Expression *Test() noexcept */
    [get] Expression Test(es2panda_Context context);
/* void SetTest(Expression *expr) noexcept */
    void SetTest(es2panda_Context context, Expression expr);
/* [[nodiscard]] const Expression *Consequent() const noexcept */
    [get] Expression ConsequentConst(es2panda_Context context);
/* [[nodiscard]] Expression *Consequent() noexcept */
    [get] Expression Consequent(es2panda_Context context);
/* void SetConsequent(Expression *expr) noexcept */
    void SetConsequent(es2panda_Context context, Expression expr);
/* [[nodiscard]] const Expression *Alternate() const noexcept */
    [get] Expression AlternateConst(es2panda_Context context);
/* [[nodiscard]] Expression *Alternate() noexcept */
    [get] Expression Alternate(es2panda_Context context);
/* void SetAlternate(Expression *expr) noexcept */
    void SetAlternate(es2panda_Context context, Expression expr);
};

[Entity=Class, Es2pandaAstNodeType = 10] interface CallExpression: MaybeOptionalExpression {
    static CallExpression Create(es2panda_Context context, Expression callee, sequence<Expression> arguments, u32 argumentsLen, TSTypeParameterInstantiation typeParams, boolean optional_arg, boolean trailingComma);

    static CallExpression Update(es2panda_Context context, es2panda_AstNode original, Expression callee, sequence<Expression> arguments, u32 argumentsLen, TSTypeParameterInstantiation typeParams, boolean optional_arg, boolean trailingComma);
    static CallExpression Create1(es2panda_Context context, CallExpression other);

    static CallExpression Update1(es2panda_Context context, es2panda_AstNode original, CallExpression other);


/* const Expression *Callee() const */
    [get] Expression CalleeConst(es2panda_Context context);
/* [[nodiscard]] Expression *Callee() noexcept */
    [get] Expression Callee(es2panda_Context context);
/* void SetCallee(Expression *callee) noexcept */
    void SetCallee(es2panda_Context context, Expression callee);
/* [[nodiscard]] const TSTypeParameterInstantiation *TypeParams() const noexcept */
    [get] TSTypeParameterInstantiation TypeParamsConst(es2panda_Context context);
/* [[nodiscard]] TSTypeParameterInstantiation *TypeParams() noexcept */
    [get] TSTypeParameterInstantiation TypeParams(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<Expression *> &Arguments() const noexcept */
    [get] sequence<Expression> ArgumentsConst(es2panda_Context context);
/* [[nodiscard]] ArenaVector<Expression *> &Arguments() noexcept */
    [get] sequence<Expression> Arguments(es2panda_Context context);
/* [[nodiscard]] bool HasTrailingComma() const noexcept */
    [get] boolean HasTrailingCommaConst(es2panda_Context context);
/* [[nodiscard]] checker::Signature *Signature() noexcept */
    [get] es2panda_Signature Signature(es2panda_Context context);
/* [[nodiscard]] checker::Signature *Signature() const noexcept */
    [get] es2panda_Signature SignatureConst(es2panda_Context context);
/* void SetSignature(checker::Signature *const signature) noexcept */
    void SetSignature(es2panda_Context context, es2panda_Signature signature);
/* void SetTypeParams(TSTypeParameterInstantiation *typeParams) noexcept */
    void SetTypeParams(es2panda_Context context, TSTypeParameterInstantiation typeParams);
/* [[nodiscard]] checker::Type *UncheckedType() const noexcept */
    [get] Type UncheckedTypeConst(es2panda_Context context);
/* void SetUncheckedType(checker::Type *type) noexcept */
    void SetUncheckedType(es2panda_Context context, Type type);
/* void SetTrailingBlock(ir::BlockStatement *const block) noexcept */
    void SetTrailingBlock(es2panda_Context context, BlockStatement block);
/* [[nodiscard]] ir::BlockStatement *TrailingBlock() const noexcept */
    [get] BlockStatement TrailingBlockConst(es2panda_Context context);
/* void SetIsTrailingBlockInNewLine(bool const isNewLine) noexcept */
    void SetIsTrailingBlockInNewLine(es2panda_Context context, boolean isNewLine);
/* [[nodiscard]] bool IsTrailingBlockInNewLine() const noexcept */
    [get] boolean IsTrailingBlockInNewLineConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 5] interface BigIntLiteral: Literal {
    static BigIntLiteral Create(es2panda_Context context, String src);

    static BigIntLiteral Update(es2panda_Context context, es2panda_AstNode original, String src);


/* const util::StringView &Str() const noexcept */
    [get] String StrConst(es2panda_Context context);
};

[Entity=Class] interface ClassElement: TypedStatement {


/* [[nodiscard]] Identifier *Id() noexcept */
    Identifier Id(es2panda_Context context);
/* [[nodiscard]] const Identifier *Id() const noexcept */
    Identifier IdConst(es2panda_Context context);
/* [[nodiscard]] Expression *Key() noexcept */
    [get] Expression Key(es2panda_Context context);
/* [[nodiscard]] const Expression *Key() const noexcept */
    [get] Expression KeyConst(es2panda_Context context);
/* [[nodiscard]] Expression *Value() noexcept */
    [get] Expression Value(es2panda_Context context);
/* void SetValue(Expression *value) noexcept */
    void SetValue(es2panda_Context context, Expression value);
/* [[nodiscard]] const Expression *Value() const noexcept */
    [get] Expression ValueConst(es2panda_Context context);
/* [[nodiscard]] bool IsPrivateElement() const noexcept */
    boolean IsPrivateElementConst(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<Decorator *> &Decorators() const noexcept */
    [get] sequence<Decorator> DecoratorsConst(es2panda_Context context);
/* [[nodiscard]] bool IsComputed() const noexcept */
    [get] boolean IsComputedConst(es2panda_Context context);
/* void AddDecorator(ir::Decorator *const decorator) */
    void AddDecorator(es2panda_Context context, Decorator decorator);
/* [[nodiscard]] virtual PrivateFieldKind ToPrivateFieldKind(bool isStatic) const = 0 */
    Es2pandaPrivateFieldKind ToPrivateFieldKindConst(es2panda_Context context, boolean isStatic);
};

[Entity=Class, Es2pandaAstNodeType = 113] interface TSImportType: TypeNode {
    static TSImportType Create(es2panda_Context context, Expression param, TSTypeParameterInstantiation typeParams, Expression qualifier, boolean isTypeof);

    static TSImportType Update(es2panda_Context context, es2panda_AstNode original, Expression param, TSTypeParameterInstantiation typeParams, Expression qualifier, boolean isTypeof);


/* const Expression *Param() const */
    [get] Expression ParamConst(es2panda_Context context);
/* const TSTypeParameterInstantiation *TypeParams() const */
    [get] TSTypeParameterInstantiation TypeParamsConst(es2panda_Context context);
/* const Expression *Qualifier() const */
    [get] Expression QualifierConst(es2panda_Context context);
/* bool IsTypeof() const */
    [get] boolean IsTypeofConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 142] interface TaggedTemplateExpression: Expression {
    static TaggedTemplateExpression Create(es2panda_Context context, Expression tag, TemplateLiteral quasi, TSTypeParameterInstantiation typeParams);

    static TaggedTemplateExpression Update(es2panda_Context context, es2panda_AstNode original, Expression tag, TemplateLiteral quasi, TSTypeParameterInstantiation typeParams);


/* [[nodiscard]] const Expression *Tag() const noexcept */
    [get] Expression TagConst(es2panda_Context context);
/* [[nodiscard]] const TemplateLiteral *Quasi() const noexcept */
    [get] TemplateLiteral QuasiConst(es2panda_Context context);
/* [[nodiscard]] const TSTypeParameterInstantiation *TypeParams() const noexcept */
    [get] TSTypeParameterInstantiation TypeParamsConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 34] interface FunctionDeclaration: Statement {
    static FunctionDeclaration Create(es2panda_Context context, ScriptFunction func, sequence<AnnotationUsage> annotations, u32 annotationsLen, boolean isAnonymous);

    static FunctionDeclaration Update(es2panda_Context context, es2panda_AstNode original, ScriptFunction func, sequence<AnnotationUsage> annotations, u32 annotationsLen, boolean isAnonymous);
    static FunctionDeclaration Create1(es2panda_Context context, ScriptFunction func, boolean isAnonymous);

    static FunctionDeclaration Update1(es2panda_Context context, es2panda_AstNode original, ScriptFunction func, boolean isAnonymous);


/* ScriptFunction *Function() */
    [get] ScriptFunction Function(es2panda_Context context);
/* bool IsAnonymous() const */
    [get] boolean IsAnonymousConst(es2panda_Context context);
/* const ScriptFunction *Function() const */
    [get] ScriptFunction FunctionConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 73] interface ETSTypeReference: TypeNode {
    static ETSTypeReference Create(es2panda_Context context, ETSTypeReferencePart part);

    static ETSTypeReference Update(es2panda_Context context, es2panda_AstNode original, ETSTypeReferencePart part);


/* ir::ETSTypeReferencePart *Part() */
    [get] ETSTypeReferencePart Part(es2panda_Context context);
/* ir::ETSTypeReferencePart *Part() const */
    [get] ETSTypeReferencePart PartConst(es2panda_Context context);
/* ir::Identifier *BaseName() const */
    Identifier BaseNameConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 129] interface TSTypeReference: TypeNode {
    static TSTypeReference Create(es2panda_Context context, Expression typeName, TSTypeParameterInstantiation typeParams);

    static TSTypeReference Update(es2panda_Context context, es2panda_AstNode original, Expression typeName, TSTypeParameterInstantiation typeParams);


/* const TSTypeParameterInstantiation *TypeParams() const */
    [get] TSTypeParameterInstantiation TypeParamsConst(es2panda_Context context);
/* const Expression *TypeName() const */
    [get] Expression TypeNameConst(es2panda_Context context);
/* ir::Identifier *BaseName() const */
    Identifier BaseNameConst(es2panda_Context context);
};

[Entity=Class] interface ImportSource {
    static es2panda_ImportSource Create(es2panda_Context context, StringLiteral source, StringLiteral resolvedSource, boolean hasDecl);



/* const ir::StringLiteral *Source() const */
    [get] StringLiteral SourceConst(es2panda_Context context);
/* ir::StringLiteral *Source() */
    [get] StringLiteral Source(es2panda_Context context);
/* const ir::StringLiteral *ResolvedSource() const */
    [get] StringLiteral ResolvedSourceConst(es2panda_Context context);
/* ir::StringLiteral *ResolvedSource() */
    [get] StringLiteral ResolvedSource(es2panda_Context context);
/* bool HasDecl() const */
    [get] boolean HasDeclConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 48] interface NamedType: TypeNode {
    static NamedType Create(es2panda_Context context, Identifier name);

    static NamedType Update(es2panda_Context context, es2panda_AstNode original, Identifier name);


/* const Identifier *Name() const */
    [get] Identifier NameConst(es2panda_Context context);
/* const TSTypeParameterInstantiation *TypeParams() const */
    [get] TSTypeParameterInstantiation TypeParamsConst(es2panda_Context context);
/* bool IsNullable() const */
    [get] boolean IsNullableConst(es2panda_Context context);
/* void SetNullable(bool nullable) */
    void SetNullable(es2panda_Context context, boolean nullable);
/* void SetNext(NamedType *next) */
    void SetNext(es2panda_Context context, NamedType next);
/* void SetTypeParams(TSTypeParameterInstantiation *typeParams) */
    void SetTypeParams(es2panda_Context context, TSTypeParameterInstantiation typeParams);
};

[Entity=Class, Es2pandaAstNodeType = 54] interface NumberLiteral: Literal {


/* [[nodiscard]] const util::StringView &Str() const noexcept */
    [get] String StrConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 126] interface TSFunctionType: TypeNode {
    static TSFunctionType Create(es2panda_Context context, es2panda_FunctionSignature signature);

    static TSFunctionType Update(es2panda_Context context, es2panda_AstNode original, es2panda_FunctionSignature signature);


/* void SetScope(varbinder::Scope *scope) */
    void SetScope(es2panda_Context context, Scope scope);
/* const TSTypeParameterDeclaration *TypeParams() const */
    [get] TSTypeParameterDeclaration TypeParamsConst(es2panda_Context context);
/* TSTypeParameterDeclaration *TypeParams() */
    [get] TSTypeParameterDeclaration TypeParams(es2panda_Context context);
/* const ArenaVector<Expression *> &Params() const */
    [get] sequence<Expression> ParamsConst(es2panda_Context context);
/* const TypeNode *ReturnType() const */
    [get] TypeNode ReturnTypeConst(es2panda_Context context);
/* TypeNode *ReturnType() */
    [get] TypeNode ReturnType(es2panda_Context context);
/* void SetNullable(bool nullable) */
    void SetNullable(es2panda_Context context, boolean nullable);
};

[Entity=Class, Es2pandaAstNodeType = 143] interface TemplateElement: Expression {
    static TemplateElement Create(es2panda_Context context);

    static TemplateElement Update(es2panda_Context context, es2panda_AstNode original);
    static TemplateElement Create1(es2panda_Context context, String raw, String cooked);

    static TemplateElement Update1(es2panda_Context context, es2panda_AstNode original, String raw, String cooked);


/* [[nodiscard]] const util::StringView &Raw() const noexcept */
    [get] String RawConst(es2panda_Context context);
/* [[nodiscard]] const util::StringView &Cooked() const noexcept */
    [get] String CookedConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 132] interface TSInterfaceDeclaration: TypedStatement {
    static TSInterfaceDeclaration Create(es2panda_Context context, sequence<TSInterfaceHeritage> extends, u32 extendsLen, es2panda_AstNode id, es2panda_AstNode typeParams, es2panda_AstNode body, boolean isStatic, boolean isExternal);

    static TSInterfaceDeclaration Update(es2panda_Context context, es2panda_AstNode original, sequence<TSInterfaceHeritage> extends, u32 extendsLen, es2panda_AstNode id, es2panda_AstNode typeParams, es2panda_AstNode body, boolean isStatic, boolean isExternal);


/* void SetScope(varbinder::LocalScope *scope) */
    void SetScope(es2panda_Context context, LocalScope scope);
/* TSInterfaceBody *Body() */
    [get] TSInterfaceBody Body(es2panda_Context context);
/* const TSInterfaceBody *Body() const */
    [get] TSInterfaceBody BodyConst(es2panda_Context context);
/* Identifier *Id() */
    [get] Identifier Id(es2panda_Context context);
/* const Identifier *Id() const */
    [get] Identifier IdConst(es2panda_Context context);
/* const util::StringView &InternalName() const */
    [get] String InternalNameConst(es2panda_Context context);
/* void SetInternalName(util::StringView internalName) */
    void SetInternalName(es2panda_Context context, String internalName);
/* bool IsStatic() const */
    [get] boolean IsStaticConst(es2panda_Context context);
/* bool IsFromExternal() const */
    [get] boolean IsFromExternalConst(es2panda_Context context);
/* const TSTypeParameterDeclaration *TypeParams() const */
    [get] TSTypeParameterDeclaration TypeParamsConst(es2panda_Context context);
/* TSTypeParameterDeclaration *TypeParams() */
    [get] TSTypeParameterDeclaration TypeParams(es2panda_Context context);
/* ArenaVector<TSInterfaceHeritage *> &Extends() */
    [get] sequence<TSInterfaceHeritage> Extends(es2panda_Context context);
/* const ArenaVector<TSInterfaceHeritage *> &Extends() const */
    [get] sequence<TSInterfaceHeritage> ExtendsConst(es2panda_Context context);
/* const ArenaVector<Decorator *> &Decorators() const */
    [get] sequence<Decorator> DecoratorsConst(es2panda_Context context);
/* ClassDeclaration *GetAnonClass() noexcept */
    [get] ClassDeclaration GetAnonClass(es2panda_Context context);
/* ClassDeclaration *GetAnonClass() const noexcept */
    [get] ClassDeclaration GetAnonClassConst(es2panda_Context context);
/* void SetAnonClass(ClassDeclaration *anonClass) noexcept */
    void SetAnonClass(es2panda_Context context, ClassDeclaration anonClass);
};

[Entity=Class, Es2pandaAstNodeType = 151] interface VariableDeclaration: Statement {
    static VariableDeclaration Create(es2panda_Context context, Es2pandaVariableDeclarationKind kind, sequence<VariableDeclarator> declarators, u32 declaratorsLen);

    static VariableDeclaration Update(es2panda_Context context, es2panda_AstNode original, Es2pandaVariableDeclarationKind kind, sequence<VariableDeclarator> declarators, u32 declaratorsLen);


/* const ArenaVector<VariableDeclarator *> &Declarators() const */
    [get] sequence<VariableDeclarator> DeclaratorsConst(es2panda_Context context);
/* VariableDeclarationKind Kind() const */
    [get] Es2pandaVariableDeclarationKind KindConst(es2panda_Context context);
/* const ArenaVector<Decorator *> &Decorators() const */
    [get] sequence<Decorator> DecoratorsConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 53] interface UndefinedLiteral: Literal {
    static UndefinedLiteral Create(es2panda_Context context);

    static UndefinedLiteral Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 45] interface MemberExpression: MaybeOptionalExpression {
    static MemberExpression Create(es2panda_Context context, Expression object_arg, Expression property, Es2pandaMemberExpressionKind kind, boolean computed, boolean optional_arg);

    static MemberExpression Update(es2panda_Context context, es2panda_AstNode original, Expression object_arg, Expression property, Es2pandaMemberExpressionKind kind, boolean computed, boolean optional_arg);


/* [[nodiscard]] Expression *Object() noexcept */
    [get] Expression Object(es2panda_Context context);
/* [[nodiscard]] const Expression *Object() const noexcept */
    [get] Expression ObjectConst(es2panda_Context context);
/* void SetObject(Expression *object) noexcept */
    void SetObject(es2panda_Context context, Expression object_arg);
/* [[nodiscard]] Expression *Property() noexcept */
    [get] Expression Property(es2panda_Context context);
/* [[nodiscard]] const Expression *Property() const noexcept */
    [get] Expression PropertyConst(es2panda_Context context);
/* [[nodiscard]] varbinder::LocalVariable *PropVar() noexcept */
    LocalVariable PropVar(es2panda_Context context);
/* [[nodiscard]] const varbinder::LocalVariable *PropVar() const noexcept */
    LocalVariable PropVarConst(es2panda_Context context);
/* [[nodiscard]] bool IsComputed() const noexcept */
    [get] boolean IsComputedConst(es2panda_Context context);
/* [[nodiscard]] MemberExpressionKind Kind() const noexcept */
    [get] Es2pandaMemberExpressionKind KindConst(es2panda_Context context);
/* void AddMemberKind(MemberExpressionKind kind) noexcept */
    void AddMemberKind(es2panda_Context context, Es2pandaMemberExpressionKind kind);
/* [[nodiscard]] bool HasMemberKind(MemberExpressionKind kind) const noexcept */
    [get] boolean HasMemberKindConst(es2panda_Context context, Es2pandaMemberExpressionKind kind);
/* void RemoveMemberKind(MemberExpressionKind const kind) noexcept */
    void RemoveMemberKind(es2panda_Context context, Es2pandaMemberExpressionKind kind);
/* [[nodiscard]] checker::ETSObjectType *ObjType() const noexcept */
    [get] ETSObjectType ObjTypeConst(es2panda_Context context);
/* void SetPropVar(varbinder::LocalVariable *propVar) noexcept */
    void SetPropVar(es2panda_Context context, LocalVariable propVar);
/* void SetObjectType(checker::ETSObjectType *objType) noexcept */
    void SetObjectType(es2panda_Context context, ETSObjectType objType);
/* [[nodiscard]] bool IsIgnoreBox() const noexcept */
    [get] boolean IsIgnoreBoxConst(es2panda_Context context);
/* void SetIgnoreBox() noexcept */
    void SetIgnoreBox(es2panda_Context context);
/* [[nodiscard]] checker::Type *UncheckedType() const noexcept */
    [get] Type UncheckedTypeConst(es2panda_Context context);
/* [[nodiscard]] bool IsPrivateReference() const noexcept */
    boolean IsPrivateReferenceConst(es2panda_Context context);
/* void CompileToReg(compiler::PandaGen *pg, compiler::VReg objReg) const */
    void CompileToRegConst(es2panda_Context context, es2panda_CodeGen pg, es2panda_VReg objReg);
/* void CompileToRegs(compiler::PandaGen *pg, compiler::VReg object, compiler::VReg property) const */
    void CompileToRegsConst(es2panda_Context context, es2panda_CodeGen pg, es2panda_VReg object_arg, es2panda_VReg property);
};

[Entity=Class, Es2pandaAstNodeType = 140] interface TSClassImplements: Expression {
    static TSClassImplements Create(es2panda_Context context, Expression expression, TSTypeParameterInstantiation typeParameters);

    static TSClassImplements Update(es2panda_Context context, es2panda_AstNode original, Expression expression, TSTypeParameterInstantiation typeParameters);
    static TSClassImplements Create1(es2panda_Context context, Expression expression);

    static TSClassImplements Update1(es2panda_Context context, es2panda_AstNode original, Expression expression);


/* Expression *Expr() */
    [get] Expression Expr(es2panda_Context context);
/* const Expression *Expr() const */
    [get] Expression ExprConst(es2panda_Context context);
/* const TSTypeParameterInstantiation *TypeParameters() const */
    [get] TSTypeParameterInstantiation TypeParametersConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 98] interface TSObjectKeyword: TypeNode {
    static TSObjectKeyword Create(es2panda_Context context);

    static TSObjectKeyword Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 75] interface ETSUnionType: TypeNode {
    static ETSUnionType CreateIr(es2panda_Context context, sequence<TypeNode> types, u32 typesLen);

    static ETSUnionType UpdateIr(es2panda_Context context, es2panda_AstNode original, sequence<TypeNode> types, u32 typesLen);


/* const ArenaVector<TypeNode *> &Types() const */
    [get] sequence<TypeNode> IrTypesConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 106] interface TSPropertySignature: AnnotatedAstNode {
    static TSPropertySignature Create(es2panda_Context context, Expression key, TypeNode typeAnnotation, boolean computed, boolean optional_arg, boolean readonly_arg);

    static TSPropertySignature Update(es2panda_Context context, es2panda_AstNode original, Expression key, TypeNode typeAnnotation, boolean computed, boolean optional_arg, boolean readonly_arg);


/* [[nodiscard]] const Expression *Key() const noexcept */
    [get] Expression KeyConst(es2panda_Context context);
/* [[nodiscard]] Expression *Key() noexcept */
    [get] Expression Key(es2panda_Context context);
/* [[nodiscard]] bool Computed() const noexcept */
    [get] boolean ComputedConst(es2panda_Context context);
/* [[nodiscard]] bool Optional() const noexcept */
    [get] boolean OptionalConst(es2panda_Context context);
/* [[nodiscard]] bool Readonly() const noexcept */
    [get] boolean ReadonlyConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 112] interface TSConditionalType: TypeNode {
    static TSConditionalType Create(es2panda_Context context, Expression checkType, Expression extendsType, Expression trueType, Expression falseType);

    static TSConditionalType Update(es2panda_Context context, es2panda_AstNode original, Expression checkType, Expression extendsType, Expression trueType, Expression falseType);


/* const Expression *CheckType() const */
    [get] Expression CheckTypeConst(es2panda_Context context);
/* const Expression *ExtendsType() const */
    [get] Expression ExtendsTypeConst(es2panda_Context context);
/* const Expression *TrueType() const */
    [get] Expression TrueTypeConst(es2panda_Context context);
/* const Expression *FalseType() const */
    [get] Expression FalseTypeConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 110] interface TSLiteralType: TypeNode {
    static TSLiteralType Create(es2panda_Context context, Expression literal);

    static TSLiteralType Update(es2panda_Context context, es2panda_AstNode original, Expression literal);


/* const Expression *Literal() const */
    [get] Expression LiteralConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 128] interface TSTypeAliasDeclaration: AnnotatedStatement {
    static TSTypeAliasDeclaration Create(es2panda_Context context, Identifier id, TSTypeParameterDeclaration typeParams, TypeNode typeAnnotation);

    static TSTypeAliasDeclaration Update(es2panda_Context context, es2panda_AstNode original, Identifier id, TSTypeParameterDeclaration typeParams, TypeNode typeAnnotation);
    static TSTypeAliasDeclaration Create1(es2panda_Context context, Identifier id);

    static TSTypeAliasDeclaration Update1(es2panda_Context context, es2panda_AstNode original, Identifier id);


/* Identifier *Id() */
    [get] Identifier Id(es2panda_Context context);
/* const Identifier *Id() const */
    [get] Identifier IdConst(es2panda_Context context);
/* TSTypeParameterDeclaration *TypeParams() const */
    [get] TSTypeParameterDeclaration TypeParamsConst(es2panda_Context context);
/* const ArenaVector<Decorator *> &Decorators() const */
    [get] sequence<Decorator> DecoratorsConst(es2panda_Context context);
/* void SetTypeParameters(ir::TSTypeParameterDeclaration *typeParams) */
    void SetTypeParameters(es2panda_Context context, TSTypeParameterDeclaration typeParams);
/* void SetTypeParameterTypes(ArenaVector<checker::Type *> &&typeParamTypes) */
    void SetTypeParameterTypes(es2panda_Context context, sequence<Type> typeParamTypes, u32 typeParamTypesLen);
/* ArenaVector<checker::Type *> const &TypeParameterTypes() const */
    [get] sequence<Type> TypeParameterTypesConst(es2panda_Context context);
/* [[nodiscard]] ArenaVector<ir::AnnotationUsage *> &Annotations() noexcept */
    [get] sequence<AnnotationUsage> Annotations(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<ir::AnnotationUsage *> &Annotations() const noexcept */
    [get] sequence<AnnotationUsage> AnnotationsConst(es2panda_Context context);
/* void SetAnnotations(ArenaVector<ir::AnnotationUsage *> &&annotations) */
    void SetAnnotations(es2panda_Context context, sequence<AnnotationUsage> annotations, u32 annotationsLen);
};

[Entity=Class, Es2pandaAstNodeType = 21] interface DebuggerStatement: Statement {
    static DebuggerStatement Create(es2panda_Context context);

    static DebuggerStatement Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 60] interface ReturnStatement: Statement {
    static ReturnStatement Create(es2panda_Context context);

    static ReturnStatement Update(es2panda_Context context, es2panda_AstNode original);
    static ReturnStatement Create1(es2panda_Context context, Expression argument);

    static ReturnStatement Update1(es2panda_Context context, es2panda_AstNode original, Expression argument);


/* Expression *Argument() noexcept */
    [get] Expression Argument(es2panda_Context context);
/* const Expression *Argument() const noexcept */
    [get] Expression ArgumentConst(es2panda_Context context);
/* checker::Type *ReturnType() noexcept */
    [get] Type ReturnType(es2panda_Context context);
/* const checker::Type *ReturnType() const noexcept */
    [get] Type ReturnTypeConst(es2panda_Context context);
/* void SetArgument(Expression *arg) */
    void SetArgument(es2panda_Context context, Expression arg);
};

[Entity=Class, Es2pandaAstNodeType = 27] interface ExportDefaultDeclaration: Statement {
    static ExportDefaultDeclaration Create(es2panda_Context context, AstNode decl, boolean exportEquals);

    static ExportDefaultDeclaration Update(es2panda_Context context, es2panda_AstNode original, AstNode decl, boolean exportEquals);


/* AstNode *Decl() */
    [get] AstNode Decl(es2panda_Context context);
/* const AstNode *Decl() const */
    [get] AstNode DeclConst(es2panda_Context context);
/* bool IsExportEquals() const */
    [get] boolean IsExportEqualsConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 61] interface ScriptFunction: AstNode {
    static ScriptFunction Create(es2panda_Context context, es2panda_AstNode databody, es2panda_FunctionSignature datasignature, i32 datafuncFlags, i32 dataflags);

    static ScriptFunction Update(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode databody, es2panda_FunctionSignature datasignature, i32 datafuncFlags, i32 dataflags);


/* [[nodiscard]] const Identifier *Id() const noexcept */
    [get] Identifier IdConst(es2panda_Context context);
/* [[nodiscard]] Identifier *Id() noexcept */
    [get] Identifier Id(es2panda_Context context);
/* [[nodiscard]] const checker::Signature *Signature() const noexcept */
    [get] es2panda_Signature SignatureConst(es2panda_Context context);
/* [[nodiscard]] checker::Signature *Signature() noexcept */
    [get] es2panda_Signature Signature(es2panda_Context context);
/* [[nodiscard]] FunctionSignature IrSignature() noexcept */
    [get] es2panda_FunctionSignature IrSignature(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<Expression *> &Params() const noexcept */
    [get] sequence<Expression> ParamsConst(es2panda_Context context);
/* [[nodiscard]] ArenaVector<Expression *> &Params() noexcept */
    [get] sequence<Expression> Params(es2panda_Context context);
/* size_t DefaultParamIndex() const noexcept */
    [get] u32 DefaultParamIndexConst(es2panda_Context context);
/* const ArenaVector<ReturnStatement *> &ReturnStatements() const */
    [get] sequence<ReturnStatement> ReturnStatementsConst(es2panda_Context context);
/* ArenaVector<ReturnStatement *> &ReturnStatements() */
    [get] sequence<ReturnStatement> ReturnStatements(es2panda_Context context);
/* [[nodiscard]] const TSTypeParameterDeclaration *TypeParams() const noexcept */
    [get] TSTypeParameterDeclaration TypeParamsConst(es2panda_Context context);
/* [[nodiscard]] TSTypeParameterDeclaration *TypeParams() noexcept */
    [get] TSTypeParameterDeclaration TypeParams(es2panda_Context context);
/* [[nodiscard]] const AstNode *Body() const noexcept */
    [get] AstNode BodyConst(es2panda_Context context);
/* [[nodiscard]] AstNode *Body() noexcept */
    [get] AstNode Body(es2panda_Context context);
/* void AddReturnStatement(ReturnStatement *returnStatement) */
    [get] void AddReturnStatement(es2panda_Context context, ReturnStatement returnStatement);
/* void SetBody(AstNode *body) noexcept */
    void SetBody(es2panda_Context context, AstNode body);
/* [[nodiscard]] const TypeNode *ReturnTypeAnnotation() const noexcept */
    [get] TypeNode ReturnTypeAnnotationConst(es2panda_Context context);
/* [[nodiscard]] TypeNode *ReturnTypeAnnotation() noexcept */
    [get] TypeNode ReturnTypeAnnotation(es2panda_Context context);
/* void SetReturnTypeAnnotation(TypeNode *node) noexcept */
    void SetReturnTypeAnnotation(es2panda_Context context, TypeNode node);
/* [[nodiscard]] bool IsEntryPoint() const noexcept */
    [get] boolean IsEntryPointConst(es2panda_Context context);
/* [[nodiscard]] bool IsGenerator() const noexcept */
    [get] boolean IsGeneratorConst(es2panda_Context context);
/* [[nodiscard]] bool IsAsyncFunc() const noexcept */
    [get] boolean IsAsyncFuncConst(es2panda_Context context);
/* [[nodiscard]] bool IsAsyncImplFunc() const noexcept */
    [get] boolean IsAsyncImplFuncConst(es2panda_Context context);
/* [[nodiscard]] bool IsArrow() const noexcept */
    [get] boolean IsArrowConst(es2panda_Context context);
/* [[nodiscard]] bool IsOverload() const noexcept */
    [get] boolean IsOverloadConst(es2panda_Context context);
/* [[nodiscard]] bool IsExternalOverload() const */
    [get] boolean IsExternalOverloadConst(es2panda_Context context);
/* [[nodiscard]] bool IsConstructor() const noexcept */
    [get] boolean IsConstructorConst(es2panda_Context context);
/* [[nodiscard]] bool IsGetter() const noexcept */
    [get] boolean IsGetterConst(es2panda_Context context);
/* [[nodiscard]] bool IsSetter() const noexcept */
    [get] boolean IsSetterConst(es2panda_Context context);
/* [[nodiscard]] bool IsMethod() const noexcept */
    [get] boolean IsMethodConst(es2panda_Context context);
/* [[nodiscard]] bool IsProxy() const noexcept */
    [get] boolean IsProxyConst(es2panda_Context context);
/* [[nodiscard]] bool IsStaticBlock() const noexcept */
    [get] boolean IsStaticBlockConst(es2panda_Context context);
/* [[nodiscard]] bool IsEnum() const noexcept */
    [get] boolean IsEnumConst(es2panda_Context context);
/* [[nodiscard]] bool IsHidden() const noexcept */
    [get] boolean IsHiddenConst(es2panda_Context context);
/* [[nodiscard]] bool IsExternal() const noexcept */
    [get] boolean IsExternalConst(es2panda_Context context);
/* [[nodiscard]] bool IsImplicitSuperCallNeeded() const noexcept */
    [get] boolean IsImplicitSuperCallNeededConst(es2panda_Context context);
/* [[nodiscard]] bool HasBody() const noexcept */
    [get] boolean HasBodyConst(es2panda_Context context);
/* [[nodiscard]] bool HasRestParameter() const noexcept */
    [get] boolean HasRestParameterConst(es2panda_Context context);
/* [[nodiscard]] bool HasReturnStatement() const noexcept */
    [get] boolean HasReturnStatementConst(es2panda_Context context);
/* [[nodiscard]] bool HasThrowStatement() const noexcept */
    [get] boolean HasThrowStatementConst(es2panda_Context context);
/* [[nodiscard]] bool IsThrowing() const noexcept */
    [get] boolean IsThrowingConst(es2panda_Context context);
/* [[nodiscard]] bool IsRethrowing() const noexcept */
    [get] boolean IsRethrowingConst(es2panda_Context context);
/* [[nodiscard]] bool IsDynamic() const noexcept */
    [get] boolean IsDynamicConst(es2panda_Context context);
/* [[nodiscard]] bool IsExtensionMethod() const noexcept */
    [get] boolean IsExtensionMethodConst(es2panda_Context context);
/* [[nodiscard]] ir::ScriptFunctionFlags Flags() const noexcept */
    [get] Es2pandaScriptFunctionFlags FlagsConst(es2panda_Context context);
/* void SetIdent(Identifier *id) noexcept */
    void SetIdent(es2panda_Context context, Identifier id);
/* void SetSignature(checker::Signature *signature) noexcept */
    void SetSignature(es2panda_Context context, es2panda_Signature signature);
/* void AddFlag(ir::ScriptFunctionFlags flags) noexcept */
    void AddFlag(es2panda_Context context, Es2pandaScriptFunctionFlags flags);
/* void AddModifier(ir::ModifierFlags flags) noexcept */
    void AddModifier(es2panda_Context context, Es2pandaModifierFlags flags);
/* [[nodiscard]] std::size_t FormalParamsLength() const noexcept */
    u32 FormalParamsLengthConst(es2panda_Context context);
/* void SetScope(varbinder::FunctionScope *scope) noexcept */
    void SetScope(es2panda_Context context, FunctionScope scope);
};

[Entity=Class, Es2pandaAstNodeType = 14] interface ClassDefinition: TypedAstNode {
    static ClassDefinition Create(es2panda_Context context, Identifier ident, TSTypeParameterDeclaration typeParams, TSTypeParameterInstantiation superTypeParams, sequence<TSClassImplements> implements, u32 implementsLen, MethodDefinition ctor, Expression superClass, sequence<AstNode> body, u32 bodyLen, Es2pandaClassDefinitionModifiers modifiers, Es2pandaModifierFlags flags);

    static ClassDefinition Update(es2panda_Context context, es2panda_AstNode original, Identifier ident, TSTypeParameterDeclaration typeParams, TSTypeParameterInstantiation superTypeParams, sequence<TSClassImplements> implements, u32 implementsLen, MethodDefinition ctor, Expression superClass, sequence<AstNode> body, u32 bodyLen, Es2pandaClassDefinitionModifiers modifiers, Es2pandaModifierFlags flags);
    static ClassDefinition Create1(es2panda_Context context, Identifier ident, sequence<AstNode> body, u32 bodyLen, Es2pandaClassDefinitionModifiers modifiers, Es2pandaModifierFlags flags);

    static ClassDefinition Update1(es2panda_Context context, es2panda_AstNode original, Identifier ident, sequence<AstNode> body, u32 bodyLen, Es2pandaClassDefinitionModifiers modifiers, Es2pandaModifierFlags flags);
    static ClassDefinition Create2(es2panda_Context context, Identifier ident, Es2pandaClassDefinitionModifiers modifiers, Es2pandaModifierFlags flags);

    static ClassDefinition Update2(es2panda_Context context, es2panda_AstNode original, Identifier ident, Es2pandaClassDefinitionModifiers modifiers, Es2pandaModifierFlags flags);


/* void SetScope(varbinder::LocalScope *scope) */
    void SetScope(es2panda_Context context, LocalScope scope);
/* [[nodiscard]] const Identifier *Ident() const noexcept */
    [get] Identifier IdentConst(es2panda_Context context);
/* [[nodiscard]] Identifier *Ident() noexcept */
    [get] Identifier Ident(es2panda_Context context);
/* void SetIdent(ir::Identifier *ident) noexcept */
    void SetIdent(es2panda_Context context, Identifier ident);
/* [[nodiscard]] const util::StringView &InternalName() const noexcept */
    [get] String InternalNameConst(es2panda_Context context);
/* void SetInternalName(util::StringView internalName) noexcept */
    void SetInternalName(es2panda_Context context, String internalName);
/* [[nodiscard]] Expression *Super() noexcept */
    [get] Expression Super(es2panda_Context context);
/* [[nodiscard]] const Expression *Super() const noexcept */
    [get] Expression SuperConst(es2panda_Context context);
/* void SetSuper(Expression *superClass) */
    void SetSuper(es2panda_Context context, Expression superClass);
/* [[nodiscard]] bool IsGlobal() const noexcept */
    [get] boolean IsGlobalConst(es2panda_Context context);
/* [[nodiscard]] bool IsLocal() const noexcept */
    [get] boolean IsLocalConst(es2panda_Context context);
/* [[nodiscard]] bool IsExtern() const noexcept */
    [get] boolean IsExternConst(es2panda_Context context);
/* [[nodiscard]] bool IsFromExternal() const noexcept */
    [get] boolean IsFromExternalConst(es2panda_Context context);
/* [[nodiscard]] bool IsInner() const noexcept */
    [get] boolean IsInnerConst(es2panda_Context context);
/* [[nodiscard]] bool IsGlobalInitialized() const noexcept */
    [get] boolean IsGlobalInitializedConst(es2panda_Context context);
/* [[nodiscard]] bool IsClassDefinitionChecked() const noexcept */
    [get] boolean IsClassDefinitionCheckedConst(es2panda_Context context);
/* [[nodiscard]] bool IsAnonymous() const noexcept */
    [get] boolean IsAnonymousConst(es2panda_Context context);
/* void SetGlobalInitialized() noexcept */
    void SetGlobalInitialized(es2panda_Context context);
/* void SetInnerModifier() noexcept */
    void SetInnerModifier(es2panda_Context context);
/* void SetClassDefinitionChecked() noexcept */
    void SetClassDefinitionChecked(es2panda_Context context);
/* void SetAnonymousModifier() noexcept */
    void SetAnonymousModifier(es2panda_Context context);
/* [[nodiscard]] ClassDefinitionModifiers Modifiers() const noexcept */
    [get] Es2pandaClassDefinitionModifiers ModifiersConst(es2panda_Context context);
/* void SetModifiers(ClassDefinitionModifiers modifiers) noexcept */
    void SetModifiers(es2panda_Context context, Es2pandaClassDefinitionModifiers modifiers);
/* void AddProperties(ArenaVector<AstNode *> &&body) */
    void AddProperties(es2panda_Context context, sequence<AstNode> body, u32 bodyLen);
/* [[nodiscard]] ArenaVector<AstNode *> &Body() noexcept */
    [get] sequence<AstNode> Body(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<AstNode *> &Body() const noexcept */
    [get] sequence<AstNode> BodyConst(es2panda_Context context);
/* [[nodiscard]] MethodDefinition *Ctor() noexcept */
    [get] MethodDefinition Ctor(es2panda_Context context);
/* void SetCtor(MethodDefinition *ctor) */
    void SetCtor(es2panda_Context context, MethodDefinition ctor);
/* [[nodiscard]] ArenaVector<ir::TSClassImplements *> &Implements() noexcept */
    [get] sequence<TSClassImplements> Implements(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<ir::TSClassImplements *> &Implements() const noexcept */
    [get] sequence<TSClassImplements> ImplementsConst(es2panda_Context context);
/* [[nodiscard]] const ir::TSTypeParameterDeclaration *TypeParams() const noexcept */
    [get] TSTypeParameterDeclaration TypeParamsConst(es2panda_Context context);
/* [[nodiscard]] ir::TSTypeParameterDeclaration *TypeParams() noexcept */
    [get] TSTypeParameterDeclaration TypeParams(es2panda_Context context);
/* void SetTypeParams(ir::TSTypeParameterDeclaration *typeParams) */
    void SetTypeParams(es2panda_Context context, TSTypeParameterDeclaration typeParams);
/* const TSTypeParameterInstantiation *SuperTypeParams() const */
    [get] TSTypeParameterInstantiation SuperTypeParamsConst(es2panda_Context context);
/* TSTypeParameterInstantiation *SuperTypeParams() */
    [get] TSTypeParameterInstantiation SuperTypeParams(es2panda_Context context);
/* [[nodiscard]] static int LocalTypeCounter() noexcept */
    [get] i32 LocalTypeCounter(es2panda_Context context);
/* [[nodiscard]] int LocalIndex() const noexcept */
    [get] i32 LocalIndexConst(es2panda_Context context);
/* [[nodiscard]] const std::string &LocalPrefix() const noexcept */
    [get] String LocalPrefixConst(es2panda_Context context);
/* bool CaptureVariable(varbinder::Variable *var) */
    [get] boolean CaptureVariable(es2panda_Context context, Variable var);
/* bool AddToLocalVariableIsNeeded(varbinder::Variable *var) */
    [get] boolean AddToLocalVariableIsNeeded(es2panda_Context context, Variable var);
/* bool IsLocalVariableNeeded(varbinder::Variable *var) const */
    [get] boolean IsLocalVariableNeededConst(es2panda_Context context, Variable var);
/* [[nodiscard]] const ArenaSet<varbinder::Variable *> &CapturedVariables() const noexcept */
    [get] sequence<Variable> CapturedVariablesConst(es2panda_Context context);
/* bool EraseCapturedVariable(varbinder::Variable *var) */
    [get] boolean EraseCapturedVariable(es2panda_Context context, Variable var);
/* void SetOrigEnumDecl(ir::TSEnumDeclaration *enumDecl) */
    void SetOrigEnumDecl(es2panda_Context context, TSEnumDeclaration enumDecl);
/* ir::TSEnumDeclaration *OrigEnumDecl() const */
    [get] TSEnumDeclaration OrigEnumDeclConst(es2panda_Context context);
/* const FunctionExpression *Ctor() const */
    FunctionExpression CtorConst(es2panda_Context context);
/* bool HasPrivateMethod() const */
    boolean HasPrivateMethodConst(es2panda_Context context);
/* bool HasComputedInstanceField() const */
    boolean HasComputedInstanceFieldConst(es2panda_Context context);
/* bool HasMatchingPrivateKey(const util::StringView &name) const */
    boolean HasMatchingPrivateKeyConst(es2panda_Context context, String name);
};

[Entity=Class] interface ArrayExpression: AnnotatedExpression {
    static ArrayExpression Create(es2panda_Context context, sequence<Expression> elements, u32 elementsLen);

    static ArrayExpression Update(es2panda_Context context, es2panda_AstNode original, sequence<Expression> elements, u32 elementsLen);
    static ArrayExpression Create1(es2panda_Context context, Es2pandaAstNodeType nodeType, sequence<Expression> elements, u32 elementsLen, boolean trailingComma);

    static ArrayExpression Update1(es2panda_Context context, es2panda_AstNode original, Es2pandaAstNodeType nodeType, sequence<Expression> elements, u32 elementsLen, boolean trailingComma);


/* [[nodiscard]] const ArenaVector<Expression *> &Elements() const noexcept */
    [get] sequence<Expression> ElementsConst(es2panda_Context context);
/* [[nodiscard]] ArenaVector<Expression *> &Elements() noexcept */
    [get] sequence<Expression> Elements(es2panda_Context context);
/* void SetElements(ArenaVector<Expression *> &&elements) noexcept */
    void SetElements(es2panda_Context context, sequence<Expression> elements, u32 elementsLen);
/* [[nodiscard]] bool IsDeclaration() const noexcept */
    [get] boolean IsDeclarationConst(es2panda_Context context);
/* [[nodiscard]] bool IsOptional() const noexcept */
    [get] boolean IsOptionalConst(es2panda_Context context);
/* void SetDeclaration() noexcept */
    void SetDeclaration(es2panda_Context context);
/* void SetOptional(bool optional) noexcept */
    void SetOptional(es2panda_Context context, boolean optional_arg);
/* void SetPreferredType(checker::Type *preferredType) noexcept */
    void SetPreferredType(es2panda_Context context, Type preferredType);
/* [[nodiscard]] checker::Type *GetPreferredType() noexcept */
    [get] Type GetPreferredType(es2panda_Context context);
/* [[nodiscard]] checker::Type const *GetPreferredType() const noexcept */
    [get] Type GetPreferredTypeConst(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<Decorator *> &Decorators() const noexcept */
    [get] sequence<Decorator> DecoratorsConst(es2panda_Context context);
/* [[nodiscard]] bool ConvertibleToArrayPattern() */
    boolean ConvertibleToArrayPattern(es2panda_Context context);
/* [[nodiscard]] ValidationInfo ValidateExpression() */
    es2panda_ValidationInfo ValidateExpression(es2panda_Context context);
/* bool HandleNestedArrayExpression(checker::ETSChecker *checker, ArrayExpression *currentElement,
                                     bool isPreferredTuple, std::size_t idx) */
    boolean HandleNestedArrayExpression(es2panda_Context context, ArrayExpression currentElement, boolean isPreferredTuple, u32 idx);
/* void GetPrefferedTypeFromFuncParam(checker::ETSChecker *checker, checker::Type *param,
                                       checker::TypeRelationFlag flags) */
    void GetPrefferedTypeFromFuncParam(es2panda_Context context, Type param, Es2pandaTypeRelationFlag flags);
};

[Entity=Class, Es2pandaAstNodeType = 133] interface TSInterfaceBody: Expression {
    static TSInterfaceBody Create(es2panda_Context context, sequence<AstNode> body, u32 bodyLen);

    static TSInterfaceBody Update(es2panda_Context context, es2panda_AstNode original, sequence<AstNode> body, u32 bodyLen);


/* [[nodiscard]] ArenaVector<AstNode *> *BodyPtr() */
    [get] sequence<AstNode> BodyPtr(es2panda_Context context);
/* [[nodiscard]] ArenaVector<AstNode *> &Body() noexcept */
    [get] sequence<AstNode> Body(es2panda_Context context);
/* [[nodiscard]] ArenaVector<AstNode *> const &Body() const noexcept */
    [get] sequence<AstNode> BodyConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 138] interface TSTypeQuery: TypeNode {
    static TSTypeQuery Create(es2panda_Context context, Expression exprName);

    static TSTypeQuery Update(es2panda_Context context, es2panda_AstNode original, Expression exprName);


/* const Expression *ExprName() const */
    [get] Expression ExprNameConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 99] interface TSBigintKeyword: TypeNode {
    static TSBigintKeyword Create(es2panda_Context context);

    static TSBigintKeyword Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 57] interface Property: Expression {
    static Property Create(es2panda_Context context, Expression key, Expression value);

    static Property Update(es2panda_Context context, es2panda_AstNode original, Expression key, Expression value);
    static Property Create1(es2panda_Context context, Es2pandaPropertyKind kind, Expression key, Expression value, boolean isMethod, boolean isComputed);

    static Property Update1(es2panda_Context context, es2panda_AstNode original, Es2pandaPropertyKind kind, Expression key, Expression value, boolean isMethod, boolean isComputed);


/* [[nodiscard]] Expression *Key() noexcept */
    [get] Expression Key(es2panda_Context context);
/* [[nodiscard]] const Expression *Key() const noexcept */
    [get] Expression KeyConst(es2panda_Context context);
/* [[nodiscard]] const Expression *Value() const noexcept */
    [get] Expression ValueConst(es2panda_Context context);
/* [[nodiscard]] Expression *Value() noexcept */
    [get] Expression Value(es2panda_Context context);
/* [[nodiscard]] PropertyKind Kind() const noexcept */
    [get] Es2pandaPropertyKind KindConst(es2panda_Context context);
/* [[nodiscard]] bool IsMethod() const noexcept */
    [get] boolean IsMethodConst(es2panda_Context context);
/* [[nodiscard]] bool IsShorthand() const noexcept */
    [get] boolean IsShorthandConst(es2panda_Context context);
/* [[nodiscard]] bool IsComputed() const noexcept */
    [get] boolean IsComputedConst(es2panda_Context context);
/* [[nodiscard]] bool IsAccessor() const noexcept */
    [get] boolean IsAccessorConst(es2panda_Context context);
/* [[nodiscard]] static bool IsAccessorKind(PropertyKind kind) noexcept */
    [get] boolean IsAccessorKind(es2panda_Context context, Es2pandaPropertyKind kind);
/* bool ConvertibleToPatternProperty() */
    boolean ConvertibleToPatternProperty(es2panda_Context context);
/* ValidationInfo ValidateExpression() */
    es2panda_ValidationInfo ValidateExpression(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 152] interface VariableDeclarator: TypedStatement {
    static VariableDeclarator Create(es2panda_Context context, Es2pandaVariableDeclaratorFlag flag, Expression ident);

    static VariableDeclarator Update(es2panda_Context context, es2panda_AstNode original, Es2pandaVariableDeclaratorFlag flag, Expression ident);
    static VariableDeclarator Create1(es2panda_Context context, Es2pandaVariableDeclaratorFlag flag, Expression ident, Expression init);

    static VariableDeclarator Update1(es2panda_Context context, es2panda_AstNode original, Es2pandaVariableDeclaratorFlag flag, Expression ident, Expression init);


/* Expression *Init() */
    [get] Expression Init(es2panda_Context context);
/* const Expression *Init() const */
    [get] Expression InitConst(es2panda_Context context);
/* void SetInit(Expression *init) */
    void SetInit(es2panda_Context context, Expression init);
/* Expression *Id() */
    [get] Expression Id(es2panda_Context context);
/* const Expression *Id() const */
    [get] Expression IdConst(es2panda_Context context);
/* VariableDeclaratorFlag Flag() */
    [get] Es2pandaVariableDeclaratorFlag Flag(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 63] interface StringLiteral: Literal {
    static StringLiteral Create(es2panda_Context context);

    static StringLiteral Update(es2panda_Context context, es2panda_AstNode original);
    static StringLiteral Create1(es2panda_Context context, String str);

    static StringLiteral Update1(es2panda_Context context, es2panda_AstNode original, String str);


/* [[nodiscard]] const util::StringView &Str() const noexcept */
    [get] String StrConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 141] interface TSTypeAssertion: AnnotatedExpression {
    static TSTypeAssertion Create(es2panda_Context context, TypeNode typeAnnotation, Expression expression);

    static TSTypeAssertion Update(es2panda_Context context, es2panda_AstNode original, TypeNode typeAnnotation, Expression expression);


/* const Expression *GetExpression() const */
    [get] Expression GetExpressionConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 90] interface TSExternalModuleReference: Expression {
    static TSExternalModuleReference Create(es2panda_Context context, Expression expr);

    static TSExternalModuleReference Update(es2panda_Context context, es2panda_AstNode original, Expression expr);


/* const Expression *Expr() const */
    [get] Expression ExprConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 96] interface TSUndefinedKeyword: TypeNode {
    static TSUndefinedKeyword Create(es2panda_Context context);

    static TSUndefinedKeyword Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 82] interface ETSTuple: TypeNode {
    static ETSTuple Create(es2panda_Context context);

    static ETSTuple Update(es2panda_Context context, es2panda_AstNode original);
    static ETSTuple Create1(es2panda_Context context, u32 size);

    static ETSTuple Update1(es2panda_Context context, es2panda_AstNode original, u32 size);
    static ETSTuple Create2(es2panda_Context context, sequence<TypeNode> typeList, u32 typeListLen);

    static ETSTuple Update2(es2panda_Context context, es2panda_AstNode original, sequence<TypeNode> typeList, u32 typeListLen);


/* [[nodiscard]] TupleSizeType GetTupleSize() const */
    [get] u32 GetTupleSizeConst(es2panda_Context context);
/* [[nodiscard]] ArenaVector<ir::TypeNode *> GetTupleTypeAnnotationsList() const */
    [get] sequence<TypeNode> GetTupleTypeAnnotationsListConst(es2panda_Context context);
/* [[nodiscard]] bool HasSpreadType() const */
    [get] boolean HasSpreadTypeConst(es2panda_Context context);
/* void SetSpreadType(TypeNode *const newSpreadType) */
    void SetSpreadType(es2panda_Context context, TypeNode newSpreadType);
/* void SetTypeAnnotationsList(ArenaVector<TypeNode *> &&typeNodeList) */
    void SetTypeAnnotationsList(es2panda_Context context, sequence<TypeNode> typeNodeList, u32 typeNodeListLen);
/* static checker::Type *CalculateLUBForTuple(checker::ETSChecker *checker, ArenaVector<checker::Type *> &typeList,
                                               checker::Type **spreadTypePtr) */
    Type CalculateLUBForTuple(es2panda_Context context, sequence<Type> typeList, u32 typeListLen, sequence<Type> spreadTypePtr);
};

[Entity=Class, Es2pandaAstNodeType = 148] interface TryStatement: Statement {
    static TryStatement Create(es2panda_Context context, BlockStatement block, sequence<CatchClause> catchClauses, u32 catchClausesLen, BlockStatement finalizer, sequence<es2panda_LabelPair> finalizerInsertionsLabelPair, u32 finalizerInsertionsLabelPairLen, sequence<Statement> finalizerInsertionsStatement, u32 finalizerInsertionsStatementLen);

    static TryStatement Update(es2panda_Context context, es2panda_AstNode original, BlockStatement block, sequence<CatchClause> catchClauses, u32 catchClausesLen, BlockStatement finalizer, sequence<es2panda_LabelPair> finalizerInsertionsLabelPair, u32 finalizerInsertionsLabelPairLen, sequence<Statement> finalizerInsertionsStatement, u32 finalizerInsertionsStatementLen);


/* BlockStatement *FinallyBlock() const */
    [get] BlockStatement FinallyBlockConst(es2panda_Context context);
/* BlockStatement *Block() const */
    [get] BlockStatement BlockConst(es2panda_Context context);
/* std::pair<compiler::LabelPair, const Statement *> AddFinalizerInsertion(compiler::LabelPair insertion,
                                                                            const Statement *insertionStmt) */
    es2panda_LabelPair AddFinalizerInsertion(es2panda_Context context, es2panda_LabelPair insertion, Statement insertionStmt, sequence<Statement> returnTypeSecond);
/* [[nodiscard]] bool HasFinalizer() const noexcept */
    [get] boolean HasFinalizerConst(es2panda_Context context);
/* bool HasDefaultCatchClause() const */
    boolean HasDefaultCatchClauseConst(es2panda_Context context);
/* const ArenaVector<CatchClause *> &CatchClauses() const */
    [get] sequence<CatchClause> CatchClausesConst(es2panda_Context context);
/* bool FinallyCanCompleteNormally() const */
    [get] boolean FinallyCanCompleteNormallyConst(es2panda_Context context);
/* void SetFinallyCanCompleteNormally(bool finallyCanCompleteNormally) */
    void SetFinallyCanCompleteNormally(es2panda_Context context, boolean finallyCanCompleteNormally);
};

[Entity=Class] interface AstNode {


/* bool IsProgram() const */
    [get] boolean IsProgramConst(es2panda_Context context);
/* [[nodiscard]] virtual bool IsStatement() const noexcept */
    [get] boolean IsStatementConst(es2panda_Context context);
/* [[nodiscard]] virtual bool IsExpression() const noexcept */
    [get] boolean IsExpressionConst(es2panda_Context context);
/* virtual bool IsTyped() const */
    [get] boolean IsTypedConst(es2panda_Context context);
/* Typed<AstNode> *AsTyped() */
    es2panda_AstNode AsTyped(es2panda_Context context);
/* Typed<AstNode> const *AsTyped() const */
    es2panda_AstNode AsTypedConst(es2panda_Context context);
/* Expression *AsExpression() */
    Expression AsExpression(es2panda_Context context);
/* const Expression *AsExpression() const */
    Expression AsExpressionConst(es2panda_Context context);
/* Statement *AsStatement() */
    Statement AsStatement(es2panda_Context context);
/* const Statement *AsStatement() const */
    Statement AsStatementConst(es2panda_Context context);
/* void SetRange(const lexer::SourceRange &loc) noexcept */
    void SetRange(es2panda_Context context, es2panda_SourceRange loc);
/* void SetStart(const lexer::SourcePosition &start) noexcept */
    void SetStart(es2panda_Context context, es2panda_SourcePosition start);
/* void SetEnd(const lexer::SourcePosition &end) noexcept */
    void SetEnd(es2panda_Context context, es2panda_SourcePosition end);
/* [[nodiscard]] const lexer::SourcePosition &Start() const noexcept */
    [get] es2panda_SourcePosition StartConst(es2panda_Context context);
/* [[nodiscard]] const lexer::SourcePosition &End() const noexcept */
    [get] es2panda_SourcePosition EndConst(es2panda_Context context);
/* [[nodiscard]] const lexer::SourceRange &Range() const noexcept */
    [get] es2panda_SourceRange RangeConst(es2panda_Context context);
/* [[nodiscard]] AstNodeType Type() const noexcept */
    [get] Es2pandaAstNodeType TypeConst(es2panda_Context context);
/* [[nodiscard]] AstNode *Parent() noexcept */
    [get] AstNode Parent(es2panda_Context context);
/* [[nodiscard]] const AstNode *Parent() const noexcept */
    [get] AstNode ParentConst(es2panda_Context context);
/* void SetParent(AstNode *const parent) noexcept */
    void SetParent(es2panda_Context context, AstNode parent);
/* [[nodiscard]] varbinder::Variable *Variable() const noexcept */
    [get] Variable VariableConst(es2panda_Context context);
/* void SetVariable(varbinder::Variable *variable) noexcept */
    void SetVariable(es2panda_Context context, Variable variable);
/* virtual const ArenaVector<ir::Decorator *> *DecoratorsPtr() const */
    [get] sequence<Decorator> DecoratorsPtrConst(es2panda_Context context);
/* virtual void AddDecorators([[maybe_unused]] ArenaVector<ir::Decorator *> &&decorators) */
    void AddDecorators(es2panda_Context context, sequence<Decorator> decorators, u32 decoratorsLen);
/* virtual bool CanHaveDecorator([[maybe_unused]] bool inTs) const */
    [get] boolean CanHaveDecoratorConst(es2panda_Context context, boolean inTs);
/* [[nodiscard]] bool IsReadonly() const noexcept */
    [get] boolean IsReadonlyConst(es2panda_Context context);
/* [[nodiscard]] bool IsReadonlyType() const noexcept */
    [get] boolean IsReadonlyTypeConst(es2panda_Context context);
/* [[nodiscard]] bool IsOptionalDeclaration() const noexcept */
    [get] boolean IsOptionalDeclarationConst(es2panda_Context context);
/* [[nodiscard]] bool IsDefinite() const noexcept */
    [get] boolean IsDefiniteConst(es2panda_Context context);
/* [[nodiscard]] bool IsConstructor() const noexcept */
    [get] boolean IsConstructorConst(es2panda_Context context);
/* [[nodiscard]] bool IsOverride() const noexcept */
    [get] boolean IsOverrideConst(es2panda_Context context);
/* void SetOverride() noexcept */
    void SetOverride(es2panda_Context context);
/* [[nodiscard]] bool IsAsync() const noexcept */
    [get] boolean IsAsyncConst(es2panda_Context context);
/* [[nodiscard]] bool IsSynchronized() const noexcept */
    [get] boolean IsSynchronizedConst(es2panda_Context context);
/* [[nodiscard]] bool IsNative() const noexcept */
    [get] boolean IsNativeConst(es2panda_Context context);
/* [[nodiscard]] bool IsConst() const noexcept */
    [get] boolean IsConstConst(es2panda_Context context);
/* [[nodiscard]] bool IsStatic() const noexcept */
    [get] boolean IsStaticConst(es2panda_Context context);
/* [[nodiscard]] bool IsFinal() const noexcept */
    [get] boolean IsFinalConst(es2panda_Context context);
/* [[nodiscard]] bool IsAbstract() const noexcept */
    [get] boolean IsAbstractConst(es2panda_Context context);
/* [[nodiscard]] bool IsPublic() const noexcept */
    [get] boolean IsPublicConst(es2panda_Context context);
/* [[nodiscard]] bool IsProtected() const noexcept */
    [get] boolean IsProtectedConst(es2panda_Context context);
/* [[nodiscard]] bool IsPrivate() const noexcept */
    [get] boolean IsPrivateConst(es2panda_Context context);
/* [[nodiscard]] bool IsInternal() const noexcept */
    [get] boolean IsInternalConst(es2panda_Context context);
/* [[nodiscard]] bool IsExported() const noexcept */
    boolean IsExportedConst(es2panda_Context context);
/* [[nodiscard]] bool IsDefaultExported() const noexcept */
    boolean IsDefaultExportedConst(es2panda_Context context);
/* [[nodiscard]] bool IsExportedType() const noexcept */
    boolean IsExportedTypeConst(es2panda_Context context);
/* [[nodiscard]] bool IsDeclare() const noexcept */
    [get] boolean IsDeclareConst(es2panda_Context context);
/* [[nodiscard]] bool IsIn() const noexcept */
    [get] boolean IsInConst(es2panda_Context context);
/* [[nodiscard]] bool IsOut() const noexcept */
    [get] boolean IsOutConst(es2panda_Context context);
/* [[nodiscard]] bool IsSetter() const noexcept */
    [get] boolean IsSetterConst(es2panda_Context context);
/* void AddModifier(ModifierFlags const flags) noexcept */
    void AddModifier(es2panda_Context context, Es2pandaModifierFlags flags);
/* void ClearModifier(ModifierFlags const flags) noexcept */
    void ClearModifier(es2panda_Context context, Es2pandaModifierFlags flags);
/* [[nodiscard]] ModifierFlags Modifiers() noexcept */
    [get] Es2pandaModifierFlags Modifiers(es2panda_Context context);
/* [[nodiscard]] ModifierFlags Modifiers() const noexcept */
    [get] Es2pandaModifierFlags ModifiersConst(es2panda_Context context);
/* [[nodiscard]] bool HasExportAlias() const noexcept */
    boolean HasExportAliasConst(es2panda_Context context);
/* ir::ClassElement *AsClassElement() */
    ClassElement AsClassElement(es2panda_Context context);
/* const ir::ClassElement *AsClassElement() const */
    ClassElement AsClassElementConst(es2panda_Context context);
/* static varbinder::Scope *EnclosingScope(const ir::AstNode *expr) */
    Scope EnclosingScope(es2panda_Context context, AstNode expr);
/* [[nodiscard]] virtual bool IsScopeBearer() const noexcept */
    boolean IsScopeBearerConst(es2panda_Context context);
/* [[nodiscard]] virtual varbinder::Scope *Scope() const noexcept */
    Scope ScopeConst(es2panda_Context context);
/* virtual void ClearScope() noexcept */
    void ClearScope(es2panda_Context context);
/* [[nodiscard]] ir::BlockStatement *GetTopStatement() */
    BlockStatement GetTopStatement(es2panda_Context context);
/* [[nodiscard]] const ir::BlockStatement *GetTopStatement() const */
    BlockStatement GetTopStatementConst(es2panda_Context context);
/* [[nodiscard]] virtual AstNode *Clone(ArenaAllocator *const allocator, AstNode *const parent) */
    AstNode Clone(es2panda_Context context, AstNode parent);
/* virtual void TransformChildren(const NodeTransformer &cb, std::string_view transformationName) = 0 */
    void TransformChildren(es2panda_Context context, NodeTransformer cb, String transformationName);
/* virtual void Iterate(const NodeTraverser &cb) const = 0 */
    void IterateConst(es2panda_Context context, NodeTraverser cb);
/* void TransformChildrenRecursively(const NodeTransformer &cb, std::string_view transformationName) */
    void TransformChildrenRecursively(es2panda_Context context, NodeTransformer cb, String transformationName);
/* void TransformChildrenRecursivelyPreorder(const NodeTransformer &cb, std::string_view transformationName) */
    void TransformChildrenRecursivelyPreorder(es2panda_Context context, NodeTransformer cb, String transformationName);
/* void TransformChildrenRecursivelyPostorder(const NodeTransformer &cb, std::string_view transformationName) */
    void TransformChildrenRecursivelyPostorder(es2panda_Context context, NodeTransformer cb, String transformationName);
/* void IterateRecursively(const NodeTraverser &cb) const */
    void IterateRecursivelyConst(es2panda_Context context, NodeTraverser cb);
/* void IterateRecursivelyPreorder(const NodeTraverser &cb) const */
    void IterateRecursivelyPreorderConst(es2panda_Context context, NodeTraverser cb);
/* void IterateRecursivelyPostorder(const NodeTraverser &cb) const */
    void IterateRecursivelyPostorderConst(es2panda_Context context, NodeTraverser cb);
/* bool IsAnyChild(const NodePredicate &cb) const */
    boolean IsAnyChildConst(es2panda_Context context, NodePredicate cb);
/* AstNode *FindChild(const NodePredicate &cb) const */
    AstNode FindChildConst(es2panda_Context context, NodePredicate cb);
/* std::string DumpJSON() const */
    String DumpJSONConst(es2panda_Context context);
/* std::string DumpEtsSrc() const */
    String DumpEtsSrcConst(es2panda_Context context);
/* virtual void Dump(ir::AstDumper *dumper) const = 0 */
    void DumpConst(es2panda_Context context, es2panda_AstDumper dumper);
/* virtual void Dump(ir::SrcDumper *dumper) const = 0 */
    void DumpConst1(es2panda_Context context, es2panda_SrcDumper dumper);
/* virtual void Compile([[maybe_unused]] compiler::PandaGen *pg) const = 0 */
    void CompileConst(es2panda_Context context, es2panda_CodeGen pg);
/* virtual void Compile([[maybe_unused]] compiler::ETSGen *etsg) const */
    void CompileConst1(es2panda_Context context, es2panda_CodeGen etsg);
/* void SetTransformedNode(std::string_view transformationName, AstNode *transformedNode) */
    void SetTransformedNode(es2panda_Context context, String transformationName, AstNode transformedNode);
/* virtual void Accept(ASTVisitorT *v) = 0 */
    void Accept(es2panda_Context context, es2panda_AstVisitor v);
/* void SetOriginalNode(AstNode *originalNode) noexcept */
    void SetOriginalNode(es2panda_Context context, AstNode originalNode);
/* AstNode *OriginalNode() const noexcept */
    AstNode OriginalNodeConst(es2panda_Context context);
};

[Entity=Class] interface Annotated: T {


};

[Entity=Class] interface VectorIterationGuard {


};

[Entity=Class] interface Typed: T {


/* [[nodiscard]] checker::Type const *TsType() const */
    [get] Type TsTypeConst(es2panda_Context context);
/* [[nodiscard]] checker::Type *TsType() */
    [get] Type TsType(es2panda_Context context);
/* void SetTsType(checker::Type *tsType) noexcept */
    void SetTsType(es2panda_Context context, Type tsType);
};

[Entity=Class] interface TypedAstNode: AstNode {


};

[Entity=Class] interface AnnotatedAstNode: AstNode {


};

[Entity=Class] interface TypedStatement: Statement {


};

[Entity=Class] interface AnnotatedStatement: Statement {


};

[Entity=Class, Es2pandaAstNodeType = 149] interface UnaryExpression: Expression {
    static UnaryExpression Create(es2panda_Context context, Expression argument, Es2pandaTokenType unaryOperator);

    static UnaryExpression Update(es2panda_Context context, es2panda_AstNode original, Expression argument, Es2pandaTokenType unaryOperator);


/* [[nodiscard]] lexer::TokenType OperatorType() const noexcept */
    [get] Es2pandaTokenType OperatorTypeConst(es2panda_Context context);
/* [[nodiscard]] Expression *Argument() noexcept */
    [get] Expression Argument(es2panda_Context context);
/* [[nodiscard]] const Expression *Argument() const noexcept */
    [get] Expression ArgumentConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 31] interface ForInStatement: LoopStatement {
    static ForInStatement Create(es2panda_Context context, AstNode left, Expression right, Statement body);

    static ForInStatement Update(es2panda_Context context, es2panda_AstNode original, AstNode left, Expression right, Statement body);


/* AstNode *Left() */
    [get] AstNode Left(es2panda_Context context);
/* const AstNode *Left() const */
    [get] AstNode LeftConst(es2panda_Context context);
/* Expression *Right() */
    [get] Expression Right(es2panda_Context context);
/* const Expression *Right() const */
    [get] Expression RightConst(es2panda_Context context);
/* Statement *Body() */
    [get] Statement Body(es2panda_Context context);
/* const Statement *Body() const */
    [get] Statement BodyConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 145] interface ThisExpression: Expression {
    static ThisExpression Create(es2panda_Context context);

    static ThisExpression Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 107] interface TSMethodSignature: AstNode {
    static TSMethodSignature Create(es2panda_Context context, Expression key, es2panda_FunctionSignature signature, boolean computed, boolean optional_arg);

    static TSMethodSignature Update(es2panda_Context context, es2panda_AstNode original, Expression key, es2panda_FunctionSignature signature, boolean computed, boolean optional_arg);


/* void SetScope(varbinder::Scope *scope) */
    void SetScope(es2panda_Context context, Scope scope);
/* [[nodiscard]] const Expression *Key() const noexcept */
    [get] Expression KeyConst(es2panda_Context context);
/* [[nodiscard]] Expression *Key() noexcept */
    [get] Expression Key(es2panda_Context context);
/* [[nodiscard]] const TSTypeParameterDeclaration *TypeParams() const noexcept */
    [get] TSTypeParameterDeclaration TypeParamsConst(es2panda_Context context);
/* [[nodiscard]] TSTypeParameterDeclaration *TypeParams() */
    [get] TSTypeParameterDeclaration TypeParams(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<Expression *> &Params() const noexcept */
    [get] sequence<Expression> ParamsConst(es2panda_Context context);
/* [[nodiscard]] const TypeNode *ReturnTypeAnnotation() const noexcept */
    [get] TypeNode ReturnTypeAnnotationConst(es2panda_Context context);
/* TypeNode *ReturnTypeAnnotation() */
    [get] TypeNode ReturnTypeAnnotation(es2panda_Context context);
/* [[nodiscard]] bool Computed() const noexcept */
    [get] boolean ComputedConst(es2panda_Context context);
/* [[nodiscard]] bool Optional() const noexcept */
    [get] boolean OptionalConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 6] interface BinaryExpression: Expression {
    static BinaryExpression Create(es2panda_Context context, Expression left, Expression right, Es2pandaTokenType operatorType);

    static BinaryExpression Update(es2panda_Context context, es2panda_AstNode original, Expression left, Expression right, Es2pandaTokenType operatorType);


/* [[nodiscard]] const Expression *Left() const noexcept */
    [get] Expression LeftConst(es2panda_Context context);
/* [[nodiscard]] Expression *Left() noexcept */
    [get] Expression Left(es2panda_Context context);
/* [[nodiscard]] const Expression *Right() const noexcept */
    [get] Expression RightConst(es2panda_Context context);
/* [[nodiscard]] Expression *Right() noexcept */
    [get] Expression Right(es2panda_Context context);
/* [[nodiscard]] lexer::TokenType OperatorType() const noexcept */
    [get] Es2pandaTokenType OperatorTypeConst(es2panda_Context context);
/* [[nodiscard]] bool IsLogical() const noexcept */
    [get] boolean IsLogicalConst(es2panda_Context context);
/* [[nodiscard]] bool IsLogicalExtended() const noexcept */
    [get] boolean IsLogicalExtendedConst(es2panda_Context context);
/* [[nodiscard]] bool IsBitwise() const noexcept */
    [get] boolean IsBitwiseConst(es2panda_Context context);
/* [[nodiscard]] bool IsArithmetic() const noexcept */
    [get] boolean IsArithmeticConst(es2panda_Context context);
/* void SetLeft(Expression *expr) noexcept */
    void SetLeft(es2panda_Context context, Expression expr);
/* void SetRight(Expression *expr) noexcept */
    void SetRight(es2panda_Context context, Expression expr);
/* void SetResult(Expression *expr) noexcept */
    void SetResult(es2panda_Context context, Expression expr);
/* void SetOperator(lexer::TokenType operatorType) noexcept */
    void SetOperator(es2panda_Context context, Es2pandaTokenType operatorType);
/* [[nodiscard]] checker::Type *OperationType() noexcept */
    [get] Type OperationType(es2panda_Context context);
/* void SetOperationType(checker::Type *const operationType) noexcept */
    void SetOperationType(es2panda_Context context, Type operationType);
/* [[nodiscard]] const checker::Type *OperationType() const noexcept */
    [get] Type OperationTypeConst(es2panda_Context context);
/* void CompileOperands(compiler::ETSGen *etsg, compiler::VReg lhs) const */
    void CompileOperandsConst(es2panda_Context context, es2panda_CodeGen etsg, es2panda_VReg lhs);
};

[Entity=Class, Es2pandaAstNodeType = 84] interface SuperExpression: Expression {
    static SuperExpression Create(es2panda_Context context);

    static SuperExpression Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 3] interface AssertStatement: Statement {
    static AssertStatement Create(es2panda_Context context, Expression test, Expression second);

    static AssertStatement Update(es2panda_Context context, es2panda_AstNode original, Expression test, Expression second);


/* const Expression *Test() const */
    [get] Expression TestConst(es2panda_Context context);
/* Expression *Test() */
    [get] Expression Test(es2panda_Context context);
/* const Expression *Second() const */
    [get] Expression SecondConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 93] interface TSStringKeyword: TypeNode {
    static TSStringKeyword Create(es2panda_Context context);

    static TSStringKeyword Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface AssignmentExpression: Expression {
    static AssignmentExpression Create(es2panda_Context context, Expression left, Expression right, Es2pandaTokenType assignmentOperator);

    static AssignmentExpression Update(es2panda_Context context, es2panda_AstNode original, Expression left, Expression right, Es2pandaTokenType assignmentOperator);
    static AssignmentExpression Create1(es2panda_Context context, Es2pandaAstNodeType type, Expression left, Expression right, Es2pandaTokenType assignmentOperator);

    static AssignmentExpression Update1(es2panda_Context context, es2panda_AstNode original, Es2pandaAstNodeType type, Expression left, Expression right, Es2pandaTokenType assignmentOperator);


/* [[nodiscard]] const Expression *Left() const noexcept */
    [get] Expression LeftConst(es2panda_Context context);
/* [[nodiscard]] Expression *Left() noexcept */
    [get] Expression Left(es2panda_Context context);
/* [[nodiscard]] Expression *Right() noexcept */
    [get] Expression Right(es2panda_Context context);
/* [[nodiscard]] const Expression *Right() const noexcept */
    [get] Expression RightConst(es2panda_Context context);
/* void SetRight(Expression *const expr) noexcept */
    void SetRight(es2panda_Context context, Expression expr);
/* [[nodiscard]] lexer::TokenType OperatorType() const noexcept */
    [get] Es2pandaTokenType OperatorTypeConst(es2panda_Context context);
/* lexer::TokenType SetOperatorType(lexer::TokenType tokenType) noexcept */
    [get] Es2pandaTokenType SetOperatorType(es2panda_Context context, Es2pandaTokenType tokenType);
/* void SetResult(Expression *expr) noexcept */
    void SetResult(es2panda_Context context, Expression expr);
/* [[nodiscard]] bool IsLogicalExtended() const noexcept */
    [get] boolean IsLogicalExtendedConst(es2panda_Context context);
/* [[nodiscard]] varbinder::Variable *Target() noexcept */
    [get] Variable Target(es2panda_Context context);
/* [[nodiscard]] varbinder::Variable *Target() const noexcept */
    [get] Variable TargetConst(es2panda_Context context);
/* void SetIgnoreConstAssign() */
    void SetIgnoreConstAssign(es2panda_Context context);
/* [[nodiscard]] bool IsIgnoreConstAssign() const */
    [get] boolean IsIgnoreConstAssignConst(es2panda_Context context);
/* [[nodiscard]] bool ConvertibleToAssignmentPatternLeft(bool mustBePattern) */
    boolean ConvertibleToAssignmentPatternLeft(es2panda_Context context, boolean mustBePattern);
/* [[nodiscard]] bool ConvertibleToAssignmentPatternRight() */
    boolean ConvertibleToAssignmentPatternRight(es2panda_Context context);
/* [[nodiscard]] bool ConvertibleToAssignmentPattern(bool mustBePattern = true) */
    boolean ConvertibleToAssignmentPattern(es2panda_Context context, boolean mustBePattern);
/* void CompilePattern(compiler::PandaGen *pg) const */
    void CompilePatternConst(es2panda_Context context, es2panda_CodeGen pg);
};

[Entity=Class, Es2pandaAstNodeType = 30] interface ExpressionStatement: Statement {
    static ExpressionStatement Create(es2panda_Context context, Expression expr);

    static ExpressionStatement Update(es2panda_Context context, es2panda_AstNode original, Expression expr);


/* const Expression *GetExpression() const */
    [get] Expression GetExpressionConst(es2panda_Context context);
/* Expression *GetExpression() */
    [get] Expression GetExpression(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 83] interface ETSScript: BlockStatement {
    static ETSScript Create(es2panda_Context context, sequence<Statement> statementList, u32 statementListLen);

    static ETSScript Update(es2panda_Context context, es2panda_AstNode original, sequence<Statement> statementList, u32 statementListLen);


};

[Entity=Class, Es2pandaAstNodeType = 46] interface MetaProperty: Expression {
    static MetaProperty Create(es2panda_Context context, Es2pandaMetaPropertyKind kind);

    static MetaProperty Update(es2panda_Context context, es2panda_AstNode original, Es2pandaMetaPropertyKind kind);


/* [[nodiscard]] MetaPropertyKind Kind() const noexcept */
    [get] Es2pandaMetaPropertyKind KindConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 103] interface TSArrayType: TypeNode {
    static TSArrayType Create(es2panda_Context context, TypeNode elementType);

    static TSArrayType Update(es2panda_Context context, es2panda_AstNode original, TypeNode elementType);


/* const TypeNode *ElementType() const */
    [get] TypeNode ElementTypeConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 108] interface TSSignatureDeclaration: TypedAstNode {
    static TSSignatureDeclaration Create(es2panda_Context context, Es2pandaTSSignatureDeclarationKind kind, es2panda_FunctionSignature signature);

    static TSSignatureDeclaration Update(es2panda_Context context, es2panda_AstNode original, Es2pandaTSSignatureDeclarationKind kind, es2panda_FunctionSignature signature);


/* void SetScope(varbinder::Scope *scope) */
    void SetScope(es2panda_Context context, Scope scope);
/* [[nodiscard]] const TSTypeParameterDeclaration *TypeParams() const noexcept */
    [get] TSTypeParameterDeclaration TypeParamsConst(es2panda_Context context);
/* [[nodiscard]] TSTypeParameterDeclaration *TypeParams() */
    [get] TSTypeParameterDeclaration TypeParams(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<Expression *> &Params() const noexcept */
    [get] sequence<Expression> ParamsConst(es2panda_Context context);
/* [[nodiscard]] const TypeNode *ReturnTypeAnnotation() const noexcept */
    [get] TypeNode ReturnTypeAnnotationConst(es2panda_Context context);
/* TypeNode *ReturnTypeAnnotation() noexcept */
    [get] TypeNode ReturnTypeAnnotation(es2panda_Context context);
/* [[nodiscard]] TSSignatureDeclarationKind Kind() const noexcept */
    [get] Es2pandaTSSignatureDeclarationKind KindConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 26] interface ExportAllDeclaration: Statement {
    static ExportAllDeclaration Create(es2panda_Context context, StringLiteral source, Identifier exported);

    static ExportAllDeclaration Update(es2panda_Context context, es2panda_AstNode original, StringLiteral source, Identifier exported);


/* const StringLiteral *Source() const */
    [get] StringLiteral SourceConst(es2panda_Context context);
/* const Identifier *Exported() const */
    [get] Identifier ExportedConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 29] interface ExportSpecifier: Statement {
    static ExportSpecifier Create(es2panda_Context context, Identifier local, Identifier exported);

    static ExportSpecifier Update(es2panda_Context context, es2panda_AstNode original, Identifier local, Identifier exported);


/* const Identifier *Local() const */
    [get] Identifier LocalConst(es2panda_Context context);
/* const Identifier *Exported() const */
    [get] Identifier ExportedConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 135] interface TSTupleType: TypeNode {
    static TSTupleType Create(es2panda_Context context, sequence<TypeNode> elementTypes, u32 elementTypesLen);

    static TSTupleType Update(es2panda_Context context, es2panda_AstNode original, sequence<TypeNode> elementTypes, u32 elementTypesLen);


/* const ArenaVector<TypeNode *> &ElementType() const */
    [get] sequence<TypeNode> ElementTypeConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 35] interface FunctionExpression: Expression {
    static FunctionExpression Create(es2panda_Context context, ScriptFunction func);

    static FunctionExpression Update(es2panda_Context context, es2panda_AstNode original, ScriptFunction func);
    static FunctionExpression Create1(es2panda_Context context, Identifier namedExpr, ScriptFunction func);

    static FunctionExpression Update1(es2panda_Context context, es2panda_AstNode original, Identifier namedExpr, ScriptFunction func);


/* [[nodiscard]] const ScriptFunction *Function() const noexcept */
    [get] ScriptFunction FunctionConst(es2panda_Context context);
/* [[nodiscard]] ScriptFunction *Function() noexcept */
    [get] ScriptFunction Function(es2panda_Context context);
/* bool IsAnonymous() const */
    [get] boolean IsAnonymousConst(es2panda_Context context);
/* ir::Identifier *Id() */
    [get] Identifier Id(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 137] interface TSIndexSignature: TypedAstNode {
    static TSIndexSignature Create(es2panda_Context context, Expression param, TypeNode typeAnnotation, boolean readonly_arg);

    static TSIndexSignature Update(es2panda_Context context, es2panda_AstNode original, Expression param, TypeNode typeAnnotation, boolean readonly_arg);


/* [[nodiscard]] const Expression *Param() const noexcept */
    [get] Expression ParamConst(es2panda_Context context);
/* [[nodiscard]] const TypeNode *TypeAnnotation() const noexcept */
    [get] TypeNode TypeAnnotationConst(es2panda_Context context);
/* [[nodiscard]] bool Readonly() const noexcept */
    [get] boolean ReadonlyConst(es2panda_Context context);
/* [[nodiscard]] TSIndexSignatureKind Kind() const noexcept */
    Es2pandaTSIndexSignatureKind KindConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 124] interface TSModuleDeclaration: Statement {
    static TSModuleDeclaration Create(es2panda_Context context, Expression name, Statement body, boolean declare, boolean global);

    static TSModuleDeclaration Update(es2panda_Context context, es2panda_AstNode original, Expression name, Statement body, boolean declare, boolean global);


/* void SetScope(varbinder::LocalScope *scope) */
    void SetScope(es2panda_Context context, LocalScope scope);
/* const Expression *Name() const */
    [get] Expression NameConst(es2panda_Context context);
/* const Statement *Body() const */
    [get] Statement BodyConst(es2panda_Context context);
/* bool Global() const */
    [get] boolean GlobalConst(es2panda_Context context);
/* bool IsExternalOrAmbient() const */
    [get] boolean IsExternalOrAmbientConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 39] interface ImportDeclaration: Statement {
    static ImportDeclaration Create(es2panda_Context context, StringLiteral source, sequence<AstNode> specifiers, u32 specifiersLen, Es2pandaImportKinds importKind);

    static ImportDeclaration Update(es2panda_Context context, es2panda_AstNode original, StringLiteral source, sequence<AstNode> specifiers, u32 specifiersLen, Es2pandaImportKinds importKind);


/* const StringLiteral *Source() const */
    [get] StringLiteral SourceConst(es2panda_Context context);
/* StringLiteral *Source() */
    [get] StringLiteral Source(es2panda_Context context);
/* const ArenaVector<AstNode *> &Specifiers() const */
    [get] sequence<AstNode> SpecifiersConst(es2panda_Context context);
/* ArenaVector<AstNode *> &Specifiers() */
    [get] sequence<AstNode> Specifiers(es2panda_Context context);
/* bool IsTypeKind() const */
    [get] boolean IsTypeKindConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 109] interface TSParenthesizedType: TypeNode {
    static TSParenthesizedType Create(es2panda_Context context, TypeNode type);

    static TSParenthesizedType Update(es2panda_Context context, es2panda_AstNode original, TypeNode type);


/* const Expression *Type() const */
    [get] Expression TypeConst(es2panda_Context context);
};

[Entity=Class] interface Literal: Expression {


/* virtual std::string ToString() const */
    String ToStringConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 13] interface CharLiteral: Literal {
    static CharLiteral Create(es2panda_Context context);

    static CharLiteral Update(es2panda_Context context, es2panda_AstNode original);
    static CharLiteral Create1(es2panda_Context context, i16 character);

    static CharLiteral Update1(es2panda_Context context, es2panda_AstNode original, i16 character);


/* [[nodiscard]] char16_t Char() const noexcept */
    [get] i16 CharConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 71] interface ETSPackageDeclaration: Statement {
    static ETSPackageDeclaration Create(es2panda_Context context, Expression name);

    static ETSPackageDeclaration Update(es2panda_Context context, es2panda_AstNode original, Expression name);


};

[Entity=Class, Es2pandaAstNodeType = 80] interface ETSImportDeclaration: ImportDeclaration {
    static ETSImportDeclaration Create(es2panda_Context context, es2panda_ImportSource source, sequence<AstNode> specifiers, u32 specifiersLen, Es2pandaImportKinds importKind);

    static ETSImportDeclaration Update(es2panda_Context context, es2panda_AstNode original, es2panda_ImportSource source, sequence<AstNode> specifiers, u32 specifiersLen, Es2pandaImportKinds importKind);


/* bool HasDecl() const */
    [get] boolean HasDeclConst(es2panda_Context context);
/* bool IsPureDynamic() const */
    [get] boolean IsPureDynamicConst(es2panda_Context context);
/* util::StringView &AssemblerName() */
    [get] String AssemblerName(es2panda_Context context);
/* const util::StringView &AssemblerName() const */
    [get] String AssemblerNameConst(es2panda_Context context);
/* StringLiteral *Source() const */
    [get] StringLiteral SourceConst(es2panda_Context context);
/* StringLiteral *ResolvedSource() */
    [get] StringLiteral ResolvedSource(es2panda_Context context);
/* const StringLiteral *ResolvedSource() const */
    [get] StringLiteral ResolvedSourceConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 85] interface ETSStructDeclaration: Statement {
    static ETSStructDeclaration Create(es2panda_Context context, ClassDefinition def);

    static ETSStructDeclaration Update(es2panda_Context context, es2panda_AstNode original, ClassDefinition def);


/* [[nodiscard]] ClassDefinition *Definition() noexcept */
    [get] ClassDefinition Definition(es2panda_Context context);
/* [[nodiscard]] const ClassDefinition *Definition() const noexcept */
    [get] ClassDefinition DefinitionConst(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<Decorator *> &Decorators() const noexcept */
    [get] sequence<Decorator> DecoratorsConst(es2panda_Context context);
/* void AddDecorator(Decorator *const decorator) */
    void AddDecorator(es2panda_Context context, Decorator decorator);
};

[Entity=Class, Es2pandaAstNodeType = 116] interface TSModuleBlock: Statement {
    static TSModuleBlock Create(es2panda_Context context, sequence<Statement> statements, u32 statementsLen);

    static TSModuleBlock Update(es2panda_Context context, es2panda_AstNode original, sequence<Statement> statements, u32 statementsLen);


/* void SetScope(varbinder::LocalScope *scope) */
    void SetScope(es2panda_Context context, LocalScope scope);
/* const ArenaVector<Statement *> &Statements() const */
    [get] sequence<Statement> StatementsConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 77] interface ETSNewArrayInstanceExpression: Expression {
    static ETSNewArrayInstanceExpression Create(es2panda_Context context, TypeNode typeReference, Expression dimension);

    static ETSNewArrayInstanceExpression Update(es2panda_Context context, es2panda_AstNode original, TypeNode typeReference, Expression dimension);


/* [[nodiscard]] ir::TypeNode *TypeReference() noexcept */
    [get] TypeNode TypeReference(es2panda_Context context);
/* [[nodiscard]] ir::TypeNode const *TypeReference() const noexcept */
    [get] TypeNode TypeReferenceConst(es2panda_Context context);
/* [[nodiscard]] ir::Expression *Dimension() noexcept */
    [get] Expression Dimension(es2panda_Context context);
/* [[nodiscard]] ir::Expression const *Dimension() const noexcept */
    [get] Expression DimensionConst(es2panda_Context context);
/* [[nodiscard]] checker::Signature *Signature() const noexcept */
    [get] es2panda_Signature SignatureConst(es2panda_Context context);
/* [[nodiscard]] checker::Signature *Signature() noexcept */
    [get] es2panda_Signature Signature(es2panda_Context context);
/* void SetDimension(ir::Expression *dimension) noexcept */
    void SetDimension(es2panda_Context context, Expression dimension);
/* void SetSignature(checker::Signature *signature) noexcept */
    void SetSignature(es2panda_Context context, es2panda_Signature signature);
};

[Entity=Class] interface LoopStatement: Statement {


/* [[nodiscard]] varbinder::LoopScope *Scope() const noexcept final */
    [get] LoopScope ScopeConst(es2panda_Context context);
/* void SetScope(varbinder::LoopScope *scope) */
    void SetScope(es2panda_Context context, LoopScope scope);
};

[Entity=Class, Es2pandaAstNodeType = 1] interface AnnotationDeclaration: Statement {
    static AnnotationDeclaration Create(es2panda_Context context, Expression expr);

    static AnnotationDeclaration Update(es2panda_Context context, es2panda_AstNode original, Expression expr);
    static AnnotationDeclaration Create1(es2panda_Context context, Expression expr, sequence<AstNode> properties, u32 propertiesLen);

    static AnnotationDeclaration Update1(es2panda_Context context, es2panda_AstNode original, Expression expr, sequence<AstNode> properties, u32 propertiesLen);


/* const util::StringView &InternalName() const */
    [get] String InternalNameConst(es2panda_Context context);
/* void SetInternalName(util::StringView internalName) */
    void SetInternalName(es2panda_Context context, String internalName);
/* [[nodiscard]] const Expression *Expr() const noexcept */
    [get] Expression ExprConst(es2panda_Context context);
/* [[nodiscard]] Expression *Expr() noexcept */
    [get] Expression Expr(es2panda_Context context);
/* [[nodiscard]] ArenaVector<AstNode *> &Properties() noexcept */
    [get] sequence<AstNode> Properties(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<AstNode *> &Properties() const noexcept */
    [get] sequence<AstNode> PropertiesConst(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<AstNode *> *PropertiesPtr() const */
    [get] sequence<AstNode> PropertiesPtrConst(es2panda_Context context);
/* void AddProperties(ArenaVector<AstNode *> &&properties) */
    void AddProperties(es2panda_Context context, sequence<AstNode> properties, u32 propertiesLen);
/* void SetScope(varbinder::LocalScope *scope) */
    void SetScope(es2panda_Context context, LocalScope scope);
/* Identifier *GetBaseName() const */
    Identifier GetBaseNameConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 2] interface AnnotationUsage: Statement {
    static AnnotationUsage CreateIr(es2panda_Context context, Expression expr);

    static AnnotationUsage UpdateIr(es2panda_Context context, es2panda_AstNode original, Expression expr);
    static AnnotationUsage CreateIr1(es2panda_Context context, Expression expr, sequence<AstNode> properties, u32 propertiesLen);

    static AnnotationUsage UpdateIr1(es2panda_Context context, es2panda_AstNode original, Expression expr, sequence<AstNode> properties, u32 propertiesLen);


/* [[nodiscard]] Expression *Expr() noexcept */
    [get] Expression IrExpr(es2panda_Context context);
/* [[nodiscard]] ArenaVector<AstNode *> &Properties() noexcept */
    [get] sequence<AstNode> IrProperties(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<AstNode *> &Properties() const noexcept */
    [get] sequence<AstNode> IrPropertiesConst(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<AstNode *> *PropertiesPtr() const */
    [get] sequence<AstNode> IrPropertiesPtrConst(es2panda_Context context);
/* void SetProperties(ArenaVector<AstNode *> &&properties) */
    void IrSetProperties(es2panda_Context context, sequence<AstNode> properties, u32 propertiesLen);
/* void SetScope(varbinder::AnnotationParamScope *scope) */
    void IrSetScope(es2panda_Context context, AnnotationParamScope scope);
/* Identifier *GetBaseName() const */
    Identifier IrGetBaseNameConst(es2panda_Context context);
};

[Entity=Class] interface AnnotationAllowed: T {


/* [[nodiscard]] ArenaVector<ir::AnnotationUsage *> &Annotations() noexcept */
    [get] sequence<AnnotationUsage> Annotations(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<ir::AnnotationUsage *> &Annotations() const noexcept */
    [get] sequence<AnnotationUsage> AnnotationsConst(es2panda_Context context);
/* void SetAnnotations(ArenaVector<ir::AnnotationUsage *> &&annotations) */
    void SetAnnotations(es2panda_Context context, sequence<AnnotationUsage> annotations, u32 annotationsLen);
};

[Entity=Class, Es2pandaAstNodeType = 25] interface EmptyStatement: Statement {
    static EmptyStatement Create(es2panda_Context context);

    static EmptyStatement Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 76] interface ETSLaunchExpression: Expression {
    static ETSLaunchExpression Create(es2panda_Context context, CallExpression expr);

    static ETSLaunchExpression Update(es2panda_Context context, es2panda_AstNode original, CallExpression expr);


/* bool IsStaticCall() const */
    boolean IsStaticCallConst(es2panda_Context context);
/* [[nodiscard]] const CallExpression *Call() const noexcept */
    [get] CallExpression CallConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 153] interface WhileStatement: LoopStatement {
    static WhileStatement Create(es2panda_Context context, Expression test, Statement body);

    static WhileStatement Update(es2panda_Context context, es2panda_AstNode original, Expression test, Statement body);


/* const Expression *Test() const */
    [get] Expression TestConst(es2panda_Context context);
/* Expression *Test() */
    [get] Expression Test(es2panda_Context context);
/* const Statement *Body() const */
    [get] Statement BodyConst(es2panda_Context context);
/* Statement *Body() */
    [get] Statement Body(es2panda_Context context);
};

[Entity=Class] interface FunctionSignature {
    static es2panda_FunctionSignature Create(es2panda_Context context, TSTypeParameterDeclaration typeParams, sequence<Expression> params, u32 paramsLen, TypeNode returnTypeAnnotation, boolean hasReceiver);



/* const FunctionParams &Params() const */
    [get] sequence<Expression> ParamsConst(es2panda_Context context);
/* FunctionParams &Params() */
    [get] sequence<Expression> Params(es2panda_Context context);
/* TSTypeParameterDeclaration *TypeParams() */
    [get] TSTypeParameterDeclaration TypeParams(es2panda_Context context);
/* const TSTypeParameterDeclaration *TypeParams() const */
    [get] TSTypeParameterDeclaration TypeParamsConst(es2panda_Context context);
/* TypeNode *ReturnType() */
    [get] TypeNode ReturnType(es2panda_Context context);
/* void SetReturnType(TypeNode *type) */
    [get] void SetReturnType(es2panda_Context context, TypeNode type);
/* const TypeNode *ReturnType() const */
    [get] TypeNode ReturnTypeConst(es2panda_Context context);
/* [[nodiscard]] size_t DefaultParamIndex() const */
    u32 DefaultParamIndexConst(es2panda_Context context);
/* void Iterate(const NodeTraverser &cb) const */
    void IterateConst(es2panda_Context context, NodeTraverser cb);
/* void TransformChildren(const NodeTransformer &cb, std::string_view transformationName) */
    void TransformChildren(es2panda_Context context, NodeTransformer cb, String transformationName);
/* [[nodiscard]] FunctionSignature Clone(ArenaAllocator *allocator) */
    es2panda_FunctionSignature Clone(es2panda_Context context);
/* [[nodiscard]] bool HasReceiver() */
    [get] boolean HasReceiver(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 12] interface ChainExpression: Expression {
    static ChainExpression Create(es2panda_Context context, Expression expression);

    static ChainExpression Update(es2panda_Context context, es2panda_AstNode original, Expression expression);


/* const Expression *GetExpression() const noexcept */
    [get] Expression GetExpressionConst(es2panda_Context context);
/* Expression *GetExpression() noexcept */
    [get] Expression GetExpression(es2panda_Context context);
/* void CompileToReg(compiler::PandaGen *pg, compiler::VReg &objReg) const */
    void CompileToRegConst(es2panda_Context context, es2panda_CodeGen pg, es2panda_VReg objReg);
};

[Entity=Class, Es2pandaAstNodeType = 114] interface TSIntersectionType: TypeNode {
    static TSIntersectionType Create(es2panda_Context context, sequence<Expression> types, u32 typesLen);

    static TSIntersectionType Update(es2panda_Context context, es2panda_AstNode original, sequence<Expression> types, u32 typesLen);


/* const ArenaVector<Expression *> &Types() const */
    [get] sequence<Expression> TypesConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 150] interface UpdateExpression: Expression {
    static UpdateExpression Create(es2panda_Context context, Expression argument, Es2pandaTokenType updateOperator, boolean isPrefix);

    static UpdateExpression Update(es2panda_Context context, es2panda_AstNode original, Expression argument, Es2pandaTokenType updateOperator, boolean isPrefix);


/* [[nodiscard]] lexer::TokenType OperatorType() const noexcept */
    [get] Es2pandaTokenType OperatorTypeConst(es2panda_Context context);
/* [[nodiscard]] Expression *Argument() noexcept */
    [get] Expression Argument(es2panda_Context context);
/* [[nodiscard]] const Expression *Argument() const noexcept */
    [get] Expression ArgumentConst(es2panda_Context context);
/* [[nodiscard]] bool IsPrefix() const noexcept */
    [get] boolean IsPrefixConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 156] interface BlockExpression: Expression {
    static BlockExpression Create(es2panda_Context context, sequence<Statement> statements, u32 statementsLen);

    static BlockExpression Update(es2panda_Context context, es2panda_AstNode original, sequence<Statement> statements, u32 statementsLen);


/* [[nodiscard]] ArenaVector<ir::Statement *> const &Statements() const noexcept */
    [get] sequence<Statement> StatementsConst(es2panda_Context context);
/* [[nodiscard]] ArenaVector<ir::Statement *> &Statements() noexcept */
    [get] sequence<Statement> Statements(es2panda_Context context);
/* void AddStatements(ArenaVector<ir::Statement *> const &statements) */
    void AddStatements(es2panda_Context context, sequence<Statement> statements, u32 statementsLen);
/* void AddStatement(ir::Statement *statement) */
    void AddStatement(es2panda_Context context, Statement statement);
/* void SetScope(varbinder::Scope *scope) */
    void SetScope(es2panda_Context context, Scope scope);
};

[Entity=Class, Es2pandaAstNodeType = 105] interface TSTypeLiteral: TypeNode {
    static TSTypeLiteral Create(es2panda_Context context, sequence<AstNode> members, u32 membersLen);

    static TSTypeLiteral Update(es2panda_Context context, es2panda_AstNode original, sequence<AstNode> members, u32 membersLen);


/* const ArenaVector<AstNode *> &Members() const */
    [get] sequence<AstNode> MembersConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 119] interface TSTypeParameter: Expression {
    static TSTypeParameter Create(es2panda_Context context, Identifier name, TypeNode constraint, TypeNode defaultType);

    static TSTypeParameter Update(es2panda_Context context, es2panda_AstNode original, Identifier name, TypeNode constraint, TypeNode defaultType);
    static TSTypeParameter Create1(es2panda_Context context, Identifier name, TypeNode constraint, TypeNode defaultType, Es2pandaModifierFlags flags);

    static TSTypeParameter Update1(es2panda_Context context, es2panda_AstNode original, Identifier name, TypeNode constraint, TypeNode defaultType, Es2pandaModifierFlags flags);


/* const Identifier *Name() const */
    [get] Identifier NameConst(es2panda_Context context);
/* Identifier *Name() */
    [get] Identifier Name(es2panda_Context context);
/* TypeNode *Constraint() */
    [get] TypeNode Constraint(es2panda_Context context);
/* const TypeNode *Constraint() const */
    [get] TypeNode ConstraintConst(es2panda_Context context);
/* void SetConstraint(TypeNode *constraint) */
    void SetConstraint(es2panda_Context context, TypeNode constraint);
/* TypeNode *DefaultType() const */
    [get] TypeNode DefaultTypeConst(es2panda_Context context);
/* void SetDefaultType(TypeNode *defaultType) */
    void SetDefaultType(es2panda_Context context, TypeNode defaultType);
};

[Entity=Class, Es2pandaAstNodeType = 94] interface TSBooleanKeyword: TypeNode {
    static TSBooleanKeyword Create(es2panda_Context context);

    static TSBooleanKeyword Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface SpreadElement: AnnotatedExpression {
    static SpreadElement Create(es2panda_Context context, Es2pandaAstNodeType nodeType, Expression argument);

    static SpreadElement Update(es2panda_Context context, es2panda_AstNode original, Es2pandaAstNodeType nodeType, Expression argument);


/* [[nodiscard]] const Expression *Argument() const noexcept */
    [get] Expression ArgumentConst(es2panda_Context context);
/* [[nodiscard]] Expression *Argument() noexcept */
    [get] Expression Argument(es2panda_Context context);
/* [[nodiscard]] bool IsOptional() const noexcept */
    [get] boolean IsOptionalConst(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<Decorator *> &Decorators() const noexcept */
    [get] sequence<Decorator> DecoratorsConst(es2panda_Context context);
/* void SetOptional(bool optional) noexcept */
    void SetOptional(es2panda_Context context, boolean optional_arg);
/* ValidationInfo ValidateExpression() */
    es2panda_ValidationInfo ValidateExpression(es2panda_Context context);
/* [[nodiscard]] bool ConvertibleToRest(bool isDeclaration, bool allowPattern = true) */
    boolean ConvertibleToRest(es2panda_Context context, boolean isDeclaration, boolean allowPattern);
};

[Entity=Class, Es2pandaAstNodeType = 122] interface TSTypePredicate: TypeNode {
    static TSTypePredicate Create(es2panda_Context context, Expression parameterName, TypeNode typeAnnotation, boolean asserts);

    static TSTypePredicate Update(es2panda_Context context, es2panda_AstNode original, Expression parameterName, TypeNode typeAnnotation, boolean asserts);


/* Expression *ParameterName() const */
    [get] Expression ParameterNameConst(es2panda_Context context);
/* TypeNode *TypeAnnotation() const */
    [get] TypeNode TypeAnnotationConst(es2panda_Context context);
/* bool Asserts() const */
    [get] boolean AssertsConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 42] interface ImportNamespaceSpecifier: Statement {
    static ImportNamespaceSpecifier Create(es2panda_Context context, Identifier local);

    static ImportNamespaceSpecifier Update(es2panda_Context context, es2panda_AstNode original, Identifier local);


/* Identifier *Local() */
    [get] Identifier Local(es2panda_Context context);
/* const Identifier *Local() const */
    [get] Identifier LocalConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 28] interface ExportNamedDeclaration: Statement {
    static ExportNamedDeclaration Create(es2panda_Context context, StringLiteral source, sequence<ExportSpecifier> specifiers, u32 specifiersLen);

    static ExportNamedDeclaration Update(es2panda_Context context, es2panda_AstNode original, StringLiteral source, sequence<ExportSpecifier> specifiers, u32 specifiersLen);
    static ExportNamedDeclaration Create1(es2panda_Context context, AstNode decl, sequence<ExportSpecifier> specifiers, u32 specifiersLen);

    static ExportNamedDeclaration Update1(es2panda_Context context, es2panda_AstNode original, AstNode decl, sequence<ExportSpecifier> specifiers, u32 specifiersLen);
    static ExportNamedDeclaration Create2(es2panda_Context context, AstNode decl);

    static ExportNamedDeclaration Update2(es2panda_Context context, es2panda_AstNode original, AstNode decl);


/* const AstNode *Decl() const */
    [get] AstNode DeclConst(es2panda_Context context);
/* const StringLiteral *Source() const */
    [get] StringLiteral SourceConst(es2panda_Context context);
/* const ArenaVector<ExportSpecifier *> &Specifiers() const */
    [get] sequence<ExportSpecifier> SpecifiersConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 81] interface ETSParameterExpression: Expression {
    static ETSParameterExpression Create(es2panda_Context context, AnnotatedExpression identOrSpread, Expression initializer);

    static ETSParameterExpression Update(es2panda_Context context, es2panda_AstNode original, AnnotatedExpression identOrSpread, Expression initializer);


/* [[nodiscard]] const Identifier *Ident() const noexcept */
    Identifier IdentConst(es2panda_Context context);
/* [[nodiscard]] Identifier *Ident() noexcept */
    Identifier Ident(es2panda_Context context);
/* [[nodiscard]] const SpreadElement *RestParameter() const noexcept */
    SpreadElement RestParameterConst(es2panda_Context context);
/* [[nodiscard]] SpreadElement *RestParameter() noexcept */
    SpreadElement RestParameter(es2panda_Context context);
/* [[nodiscard]] const Expression *Initializer() const noexcept */
    Expression InitializerConst(es2panda_Context context);
/* [[nodiscard]] Expression *Initializer() noexcept */
    Expression Initializer(es2panda_Context context);
/* void SetLexerSaved(util::StringView s) noexcept */
    void SetLexerSaved(es2panda_Context context, String s);
/* [[nodiscard]] util::StringView LexerSaved() const noexcept */
    String LexerSavedConst(es2panda_Context context);
/* [[nodiscard]] varbinder::Variable *Variable() const noexcept */
    Variable VariableConst(es2panda_Context context);
/* void SetVariable(varbinder::Variable *variable) noexcept */
    void SetVariable(es2panda_Context context, Variable variable);
/* [[nodiscard]] TypeNode const *TypeAnnotation() const noexcept */
    TypeNode TypeAnnotationConst(es2panda_Context context);
/* [[nodiscard]] TypeNode *TypeAnnotation() noexcept */
    TypeNode TypeAnnotation(es2panda_Context context);
/* [[nodiscard]] bool IsDefault() const noexcept */
    [get] boolean IsDefaultConst(es2panda_Context context);
/* [[nodiscard]] bool IsRestParameter() const noexcept */
    [get] boolean IsRestParameterConst(es2panda_Context context);
/* [[nodiscard]] std::size_t GetRequiredParams() const noexcept */
    [get] u32 GetRequiredParamsConst(es2panda_Context context);
/* void SetRequiredParams(std::size_t const value) noexcept */
    void SetRequiredParams(es2panda_Context context, u32 value);
/* void SetInitializer(Expression *initExpr = nullptr) */
    void SetInitializer(es2panda_Context context, Expression initExpr);
};

[Entity=Class, Es2pandaAstNodeType = 121] interface TSTypeParameterInstantiation: Expression {
    static TSTypeParameterInstantiation Create(es2panda_Context context, sequence<TypeNode> params, u32 paramsLen);

    static TSTypeParameterInstantiation Update(es2panda_Context context, es2panda_AstNode original, sequence<TypeNode> params, u32 paramsLen);


/* [[nodiscard]] const ArenaVector<TypeNode *> &Params() const noexcept */
    [get] sequence<TypeNode> ParamsConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 52] interface NullLiteral: Literal {
    static NullLiteral Create(es2panda_Context context);

    static NullLiteral Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 111] interface TSInferType: TypeNode {
    static TSInferType Create(es2panda_Context context, TSTypeParameter typeParam);

    static TSInferType Update(es2panda_Context context, es2panda_AstNode original, TSTypeParameter typeParam);


/* const TSTypeParameter *TypeParam() const */
    [get] TSTypeParameter TypeParamConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 86] interface SwitchCaseStatement: Statement {
    static SwitchCaseStatement Create(es2panda_Context context, Expression test, sequence<Statement> consequent, u32 consequentLen);

    static SwitchCaseStatement Update(es2panda_Context context, es2panda_AstNode original, Expression test, sequence<Statement> consequent, u32 consequentLen);


/* [[nodiscard]] Expression *Test() noexcept */
    [get] Expression Test(es2panda_Context context);
/* [[nodiscard]] const Expression *Test() const noexcept */
    [get] Expression TestConst(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<Statement *> &Consequent() const noexcept */
    [get] sequence<Statement> ConsequentConst(es2panda_Context context);
/* void CheckAndTestCase(checker::ETSChecker *checker, checker::Type *comparedExprType, checker::Type *unboxedDiscType,
                          ir::Expression *node, bool &isDefaultCase) */
    void CheckAndTestCase(es2panda_Context context, Type comparedExprType, Type unboxedDiscType, Expression node, boolean isDefaultCase);
};

[Entity=Class, Es2pandaAstNodeType = 154] interface YieldExpression: Expression {
    static YieldExpression Create(es2panda_Context context, Expression argument, boolean isDelegate);

    static YieldExpression Update(es2panda_Context context, es2panda_AstNode original, Expression argument, boolean isDelegate);


/* [[nodiscard]] bool HasDelegate() const noexcept */
    [get] boolean HasDelegateConst(es2panda_Context context);
/* [[nodiscard]] const Expression *Argument() const noexcept */
    [get] Expression ArgumentConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 125] interface TSImportEqualsDeclaration: Statement {
    static TSImportEqualsDeclaration Create(es2panda_Context context, Identifier id, Expression moduleReference, boolean isExport);

    static TSImportEqualsDeclaration Update(es2panda_Context context, es2panda_AstNode original, Identifier id, Expression moduleReference, boolean isExport);


/* const Identifier *Id() const */
    [get] Identifier IdConst(es2panda_Context context);
/* const Expression *ModuleReference() const */
    [get] Expression ModuleReferenceConst(es2panda_Context context);
/* bool IsExport() const */
    [get] boolean IsExportConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 8] interface BooleanLiteral: Literal {
    static BooleanLiteral Create(es2panda_Context context, boolean value);

    static BooleanLiteral Update(es2panda_Context context, es2panda_AstNode original, boolean value);


/* [[nodiscard]] bool Value() const noexcept */
    [get] boolean ValueConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 91] interface TSNumberKeyword: TypeNode {
    static TSNumberKeyword Create(es2panda_Context context);

    static TSNumberKeyword Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 18] interface ClassStaticBlock: ClassElement {
    static ClassStaticBlock Create(es2panda_Context context, Expression value);

    static ClassStaticBlock Update(es2panda_Context context, es2panda_AstNode original, Expression value);


/* ir::ScriptFunction *Function() */
    ScriptFunction Function(es2panda_Context context);
/* const ir::ScriptFunction *Function() const */
    ScriptFunction FunctionConst(es2panda_Context context);
/* const util::StringView &Name() const */
    String NameConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 101] interface TSNonNullExpression: Expression {
    static TSNonNullExpression Create(es2panda_Context context, Expression expr);

    static TSNonNullExpression Update(es2panda_Context context, es2panda_AstNode original, Expression expr);


/* const Expression *Expr() const noexcept */
    [get] Expression ExprConst(es2panda_Context context);
/* Expression *Expr() noexcept */
    [get] Expression Expr(es2panda_Context context);
/* void SetExpr(Expression *expr) noexcept */
    void SetExpr(es2panda_Context context, Expression expr);
/* checker::Type *OriginalType() const noexcept */
    [get] Type OriginalTypeConst(es2panda_Context context);
/* void SetOriginalType(checker::Type *type) noexcept */
    void SetOriginalType(es2panda_Context context, Type type);
};

[Entity=Class, Es2pandaAstNodeType = 56] interface PrefixAssertionExpression: Expression {
    static PrefixAssertionExpression Create(es2panda_Context context, Expression expr, TypeNode type);

    static PrefixAssertionExpression Update(es2panda_Context context, es2panda_AstNode original, Expression expr, TypeNode type);


/* const Expression *Expr() const */
    [get] Expression ExprConst(es2panda_Context context);
/* const TypeNode *Type() const */
    [get] TypeNode TypeConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 16] interface ClassExpression: Expression {
    static ClassExpression Create(es2panda_Context context, ClassDefinition def);

    static ClassExpression Update(es2panda_Context context, es2panda_AstNode original, ClassDefinition def);


/* [[nodiscard]] const ClassDefinition *Definition() const noexcept */
    [get] ClassDefinition DefinitionConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 32] interface ForOfStatement: LoopStatement {
    static ForOfStatement Create(es2panda_Context context, AstNode left, Expression right, Statement body, boolean isAwait);

    static ForOfStatement Update(es2panda_Context context, es2panda_AstNode original, AstNode left, Expression right, Statement body, boolean isAwait);


/* [[nodiscard]] AstNode *Left() noexcept */
    [get] AstNode Left(es2panda_Context context);
/* [[nodiscard]] const AstNode *Left() const noexcept */
    [get] AstNode LeftConst(es2panda_Context context);
/* [[nodiscard]] Expression *Right() noexcept */
    [get] Expression Right(es2panda_Context context);
/* [[nodiscard]] const Expression *Right() const noexcept */
    [get] Expression RightConst(es2panda_Context context);
/* [[nodiscard]] Statement *Body() noexcept */
    [get] Statement Body(es2panda_Context context);
/* [[nodiscard]] const Statement *Body() const noexcept */
    [get] Statement BodyConst(es2panda_Context context);
/* [[nodiscard]] bool IsAwait() const noexcept */
    [get] boolean IsAwaitConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 144] interface TemplateLiteral: Expression {
    static TemplateLiteral Create(es2panda_Context context, sequence<TemplateElement> quasis, u32 quasisLen, sequence<Expression> expressions, u32 expressionsLen);

    static TemplateLiteral Update(es2panda_Context context, es2panda_AstNode original, sequence<TemplateElement> quasis, u32 quasisLen, sequence<Expression> expressions, u32 expressionsLen);


/* [[nodiscard]] const ArenaVector<TemplateElement *> &Quasis() const noexcept */
    [get] sequence<TemplateElement> QuasisConst(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<Expression *> &Expressions() const noexcept */
    [get] sequence<Expression> ExpressionsConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 104] interface TSUnionType: TypeNode {
    static TSUnionType Create(es2panda_Context context, sequence<TypeNode> types, u32 typesLen);

    static TSUnionType Update(es2panda_Context context, es2panda_AstNode original, sequence<TypeNode> types, u32 typesLen);


/* const ArenaVector<TypeNode *> &Types() const */
    [get] sequence<TypeNode> TypesConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 97] interface TSUnknownKeyword: TypeNode {
    static TSUnknownKeyword Create(es2panda_Context context);

    static TSUnknownKeyword Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 36] interface Identifier: AnnotatedExpression {
    static Identifier Create(es2panda_Context context);

    static Identifier Update(es2panda_Context context, es2panda_AstNode original);
    static Identifier Create1(es2panda_Context context, String name);

    static Identifier Update1(es2panda_Context context, es2panda_AstNode original, String name);
    static Identifier Create2(es2panda_Context context, String name, TypeNode typeAnnotation);

    static Identifier Update2(es2panda_Context context, es2panda_AstNode original, String name, TypeNode typeAnnotation);


/* [[nodiscard]] const util::StringView &Name() const noexcept */
    [get] String NameConst(es2panda_Context context);
/* [[nodiscard]] util::StringView &Name() noexcept */
    [get] String Name(es2panda_Context context);
/* void SetName(const util::StringView &newName) noexcept */
    void SetName(es2panda_Context context, String newName);
/* [[nodiscard]] const ArenaVector<Decorator *> &Decorators() const noexcept */
    [get] sequence<Decorator> DecoratorsConst(es2panda_Context context);
/* bool IsErrorPlaceHolder() const noexcept */
    [get] boolean IsErrorPlaceHolderConst(es2panda_Context context);
/* [[nodiscard]] bool IsOptional() const noexcept */
    [get] boolean IsOptionalConst(es2panda_Context context);
/* void SetOptional(bool const optional) noexcept */
    void SetOptional(es2panda_Context context, boolean optional_arg);
/* [[nodiscard]] bool IsReference(ScriptExtension ext) const noexcept */
    [get] boolean IsReferenceConst(es2panda_Context context);
/* [[nodiscard]] bool IsTdz() const noexcept */
    [get] boolean IsTdzConst(es2panda_Context context);
/* void SetTdz() noexcept */
    void SetTdz(es2panda_Context context);
/* void SetAccessor() noexcept */
    void SetAccessor(es2panda_Context context);
/* [[nodiscard]] bool IsAccessor() const noexcept */
    [get] boolean IsAccessorConst(es2panda_Context context);
/* void SetMutator() noexcept */
    void SetMutator(es2panda_Context context);
/* [[nodiscard]] bool IsMutator() const noexcept */
    [get] boolean IsMutatorConst(es2panda_Context context);
/* [[nodiscard]] bool IsReceiver() const noexcept */
    [get] boolean IsReceiverConst(es2panda_Context context);
/* [[nodiscard]] bool IsPrivateIdent() const noexcept */
    [get] boolean IsPrivateIdentConst(es2panda_Context context);
/* void SetPrivate(bool const isPrivate) noexcept */
    void SetPrivate(es2panda_Context context, boolean isPrivate);
/* [[nodiscard]] bool IsIgnoreBox() const noexcept */
    [get] boolean IsIgnoreBoxConst(es2panda_Context context);
/* void SetIgnoreBox() noexcept */
    void SetIgnoreBox(es2panda_Context context);
/* [[nodiscard]] bool IsAnnotationDecl() const noexcept */
    [get] boolean IsAnnotationDeclConst(es2panda_Context context);
/* void SetAnnotationDecl() noexcept */
    void SetAnnotationDecl(es2panda_Context context);
/* [[nodiscard]] bool IsAnnotationUsage() const noexcept */
    [get] boolean IsAnnotationUsageConst(es2panda_Context context);
/* void SetAnnotationUsage() noexcept */
    void SetAnnotationUsage(es2panda_Context context);
/* [[nodiscard]] Identifier *CloneReference(ArenaAllocator *allocator, AstNode *parent) */
    Identifier CloneReference(es2panda_Context context, AstNode parent);
/* [[nodiscard]] ValidationInfo ValidateExpression() */
    es2panda_ValidationInfo ValidateExpression(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 155] interface OpaqueTypeNode: TypeNode {
    static OpaqueTypeNode Create(es2panda_Context context, Type type);

    static OpaqueTypeNode Update(es2panda_Context context, es2panda_AstNode original, Type type);
    static OpaqueTypeNode Create1(es2panda_Context context);

    static OpaqueTypeNode Update1(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 7] interface BlockStatement: Statement {
    static BlockStatement Create(es2panda_Context context, sequence<Statement> statementList, u32 statementListLen);

    static BlockStatement Update(es2panda_Context context, es2panda_AstNode original, sequence<Statement> statementList, u32 statementListLen);


/* void SetScope(varbinder::Scope *scope) noexcept */
    void SetScope(es2panda_Context context, Scope scope);
/* const ArenaVector<Statement *> &Statements() const */
    [get] sequence<Statement> StatementsConst(es2panda_Context context);
/* ArenaVector<Statement *> &Statements() */
    [get] sequence<Statement> Statements(es2panda_Context context);
/* void SetStatements(ArenaVector<Statement *> &&statementList) */
    void SetStatements(es2panda_Context context, sequence<Statement> statementList, u32 statementListLen);
/* void AddTrailingBlock(AstNode *stmt, BlockStatement *trailingBlock) */
    void AddTrailingBlock(es2panda_Context context, AstNode stmt, BlockStatement trailingBlock);
};

[Entity=Class] interface Statement: AstNode {


/* virtual void SetReturnType([[maybe_unused]] checker::ETSChecker *checker, [[maybe_unused]] checker::Type *type) */
    void SetReturnType(es2panda_Context context, Type type);
};

[Entity=Class, Es2pandaAstNodeType = 23] interface DirectEvalExpression: CallExpression {
    static DirectEvalExpression Create(es2panda_Context context, Expression callee, sequence<Expression> arguments, u32 argumentsLen, TSTypeParameterInstantiation typeParams, boolean optional_arg, u32 parserStatus);

    static DirectEvalExpression Update(es2panda_Context context, es2panda_AstNode original, Expression callee, sequence<Expression> arguments, u32 argumentsLen, TSTypeParameterInstantiation typeParams, boolean optional_arg, u32 parserStatus);


};

[Entity=Class, Es2pandaAstNodeType = 120] interface TSTypeParameterDeclaration: Expression {
    static TSTypeParameterDeclaration Create(es2panda_Context context, sequence<TSTypeParameter> params, u32 paramsLen, u32 requiredParams);

    static TSTypeParameterDeclaration Update(es2panda_Context context, es2panda_AstNode original, sequence<TSTypeParameter> params, u32 paramsLen, u32 requiredParams);


/* void SetScope(varbinder::LocalScope *scope) */
    void SetScope(es2panda_Context context, LocalScope scope);
/* const ArenaVector<TSTypeParameter *> &Params() const */
    [get] sequence<TSTypeParameter> ParamsConst(es2panda_Context context);
/* void AddParam(TSTypeParameter *param) */
    void AddParam(es2panda_Context context, TSTypeParameter param);
/* size_t RequiredParams() const */
    [get] u32 RequiredParamsConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 47] interface MethodDefinition: ClassElement {
    static MethodDefinition Create(es2panda_Context context, Es2pandaMethodDefinitionKind kind, Expression key, Expression value, Es2pandaModifierFlags modifiers, boolean isComputed);

    static MethodDefinition Update(es2panda_Context context, es2panda_AstNode original, Es2pandaMethodDefinitionKind kind, Expression key, Expression value, Es2pandaModifierFlags modifiers, boolean isComputed);


/* MethodDefinitionKind Kind() const */
    [get] Es2pandaMethodDefinitionKind KindConst(es2panda_Context context);
/* [[nodiscard]] bool IsConstructor() const noexcept */
    [get] boolean IsConstructorConst(es2panda_Context context);
/* [[nodiscard]] bool IsExtensionMethod() const noexcept */
    [get] boolean IsExtensionMethodConst(es2panda_Context context);
/* [[nodiscard]] const OverloadsT &Overloads() const noexcept */
    [get] sequence<MethodDefinition> OverloadsConst(es2panda_Context context);
/* [[nodiscard]] const MethodDefinition *BaseOverloadMethod() const noexcept */
    [get] MethodDefinition BaseOverloadMethodConst(es2panda_Context context);
/* [[nodiscard]] MethodDefinition *BaseOverloadMethod() noexcept */
    [get] MethodDefinition BaseOverloadMethod(es2panda_Context context);
/* [[nodiscard]] const MethodDefinition *AsyncPairMethod() const noexcept */
    [get] MethodDefinition AsyncPairMethodConst(es2panda_Context context);
/* [[nodiscard]] MethodDefinition *AsyncPairMethod() noexcept */
    [get] MethodDefinition AsyncPairMethod(es2panda_Context context);
/* void SetOverloads(OverloadsT &&overloads) */
    void SetOverloads(es2panda_Context context, sequence<MethodDefinition> overloads, u32 overloadsLen);
/* void ClearOverloads() */
    void ClearOverloads(es2panda_Context context);
/* void AddOverload(MethodDefinition *const overload) */
    void AddOverload(es2panda_Context context, MethodDefinition overload);
/* void SetBaseOverloadMethod(MethodDefinition *const baseOverloadMethod) */
    void SetBaseOverloadMethod(es2panda_Context context, MethodDefinition baseOverloadMethod);
/* void SetAsyncPairMethod(MethodDefinition *const method) */
    void SetAsyncPairMethod(es2panda_Context context, MethodDefinition method);
/* [[nodiscard]] bool HasOverload(MethodDefinition *overload) noexcept */
    [get] boolean HasOverload(es2panda_Context context, MethodDefinition overload);
/* ScriptFunction *Function() */
    ScriptFunction Function(es2panda_Context context);
/* const ScriptFunction *Function() const */
    ScriptFunction FunctionConst(es2panda_Context context);
/* void ResolveReferences(const NodeTraverser &cb) const */
    void ResolveReferencesConst(es2panda_Context context, NodeTraverser cb);
};

[Entity=Class, Es2pandaAstNodeType = 102] interface TSNullKeyword: TypeNode {
    static TSNullKeyword Create(es2panda_Context context);

    static TSNullKeyword Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 134] interface TSInterfaceHeritage: Expression {
    static TSInterfaceHeritage Create(es2panda_Context context, TypeNode expr);

    static TSInterfaceHeritage Update(es2panda_Context context, es2panda_AstNode original, TypeNode expr);


/* TypeNode *Expr() */
    [get] TypeNode Expr(es2panda_Context context);
/* const TypeNode *Expr() const */
    [get] TypeNode ExprConst(es2panda_Context context);
};

[Entity=Class] interface Expression: TypedAstNode {


/* [[nodiscard]] bool IsGrouped() const noexcept */
    [get] boolean IsGroupedConst(es2panda_Context context);
/* void SetGrouped() noexcept */
    void SetGrouped(es2panda_Context context);
/* [[nodiscard]] const Literal *AsLiteral() const */
    Literal AsLiteralConst(es2panda_Context context);
/* [[nodiscard]] Literal *AsLiteral() */
    Literal AsLiteral(es2panda_Context context);
/* [[nodiscard]] virtual bool IsLiteral() const noexcept */
    [get] boolean IsLiteralConst(es2panda_Context context);
/* [[nodiscard]] virtual bool IsTypeNode() const noexcept */
    [get] boolean IsTypeNodeConst(es2panda_Context context);
/* [[nodiscard]] virtual bool IsAnnotatedExpression() const noexcept */
    [get] boolean IsAnnotatedExpressionConst(es2panda_Context context);
/* [[nodiscard]] TypeNode *AsTypeNode() */
    TypeNode AsTypeNode(es2panda_Context context);
/* [[nodiscard]] const TypeNode *AsTypeNode() const */
    TypeNode AsTypeNodeConst(es2panda_Context context);
/* [[nodiscard]] AnnotatedExpression *AsAnnotatedExpression() */
    AnnotatedExpression AsAnnotatedExpression(es2panda_Context context);
/* [[nodiscard]] const AnnotatedExpression *AsAnnotatedExpression() const */
    AnnotatedExpression AsAnnotatedExpressionConst(es2panda_Context context);
/* bool IsErrorExpression() const noexcept */
    boolean IsErrorExpressionConst(es2panda_Context context);
};

[Entity=Class] interface AnnotatedExpression: Expression {


};

[Entity=Class] interface MaybeOptionalExpression: Expression {


/* [[nodiscard]] bool IsOptional() const noexcept */
    [get] boolean IsOptionalConst(es2panda_Context context);
/* void ClearOptional() noexcept */
    void ClearOptional(es2panda_Context context);
};

[Entity=Class] interface SrcDumper {
    static es2panda_SrcDumper Create(es2panda_Context context, AstNode node);



/* void Add(const std::string &str) */
    void Add(es2panda_Context context, String str);
/* void Add(int32_t i) */
    void Add1(es2panda_Context context, i32 i);
/* void Add(int64_t l) */
    void Add2(es2panda_Context context, i64 l);
/* void Add(float f) */
    void Add3(es2panda_Context context, f32 f);
/* void Add(double d) */
    void Add4(es2panda_Context context, f64 d);
/* std::string Str() const */
    [get] String StrConst(es2panda_Context context);
/* void IncrIndent() */
    void IncrIndent(es2panda_Context context);
/* void DecrIndent() */
    void DecrIndent(es2panda_Context context);
/* void Endl(size_t num = 1) */
    void Endl(es2panda_Context context, u32 num);
};

[Entity=Class, Es2pandaAstNodeType = 72] interface ETSClassLiteral: Expression {
    static ETSClassLiteral Create(es2panda_Context context, TypeNode expr);

    static ETSClassLiteral Update(es2panda_Context context, es2panda_AstNode original, TypeNode expr);


/* [[nodiscard]] ir::TypeNode *Expr() const noexcept */
    [get] TypeNode ExprConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 9] interface BreakStatement: Statement {
    static BreakStatement Create(es2panda_Context context);

    static BreakStatement Update(es2panda_Context context, es2panda_AstNode original);
    static BreakStatement Create1(es2panda_Context context, Identifier ident);

    static BreakStatement Update1(es2panda_Context context, es2panda_AstNode original, Identifier ident);


/* [[nodiscard]] const Identifier *Ident() const noexcept */
    [get] Identifier IdentConst(es2panda_Context context);
/* Identifier *Ident() noexcept */
    [get] Identifier Ident(es2panda_Context context);
/* [[nodiscard]] const ir::AstNode *Target() const noexcept */
    [get] AstNode TargetConst(es2panda_Context context);
/* void SetTarget(ir::AstNode const *target) noexcept */
    void SetTarget(es2panda_Context context, AstNode target);
};

[Entity=Class, Es2pandaAstNodeType = 58] interface RegExpLiteral: Literal {
    static RegExpLiteral Create(es2panda_Context context, String pattern, Es2pandaRegExpFlags flags, String flagsStr);

    static RegExpLiteral Update(es2panda_Context context, es2panda_AstNode original, String pattern, Es2pandaRegExpFlags flags, String flagsStr);


/* [[nodiscard]] const util::StringView &Pattern() const noexcept */
    [get] String PatternConst(es2panda_Context context);
/* [[nodiscard]] const lexer::RegExpFlags &Flags() const noexcept */
    [get] Es2pandaRegExpFlags FlagsConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 115] interface TSMappedType: TypeNode {
    static TSMappedType Create(es2panda_Context context, TSTypeParameter typeParameter, TypeNode typeAnnotation, Es2pandaMappedOption readonly_arg, Es2pandaMappedOption optional_arg);

    static TSMappedType Update(es2panda_Context context, es2panda_AstNode original, TSTypeParameter typeParameter, TypeNode typeAnnotation, Es2pandaMappedOption readonly_arg, Es2pandaMappedOption optional_arg);


/* TSTypeParameter *TypeParameter() */
    [get] TSTypeParameter TypeParameter(es2panda_Context context);
/* TypeNode *TypeAnnotation() */
    [get] TypeNode TypeAnnotation(es2panda_Context context);
/* MappedOption Readonly() */
    [get] Es2pandaMappedOption Readonly(es2panda_Context context);
/* MappedOption Optional() */
    [get] Es2pandaMappedOption Optional(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 92] interface TSAnyKeyword: TypeNode {
    static TSAnyKeyword Create(es2panda_Context context);

    static TSAnyKeyword Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 15] interface ClassDeclaration: Statement {
    static ClassDeclaration Create(es2panda_Context context, ClassDefinition def);

    static ClassDeclaration Update(es2panda_Context context, es2panda_AstNode original, ClassDefinition def);


/* ClassDefinition *Definition() */
    [get] ClassDefinition Definition(es2panda_Context context);
/* const ClassDefinition *Definition() const */
    [get] ClassDefinition DefinitionConst(es2panda_Context context);
/* const ArenaVector<Decorator *> &Decorators() const */
    [get] sequence<Decorator> DecoratorsConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 131] interface TSIndexedAccessType: TypeNode {
    static TSIndexedAccessType Create(es2panda_Context context, TypeNode objectType, TypeNode indexType);

    static TSIndexedAccessType Update(es2panda_Context context, es2panda_AstNode original, TypeNode objectType, TypeNode indexType);


/* const TypeNode *ObjectType() const */
    [get] TypeNode ObjectTypeConst(es2panda_Context context);
/* const TypeNode *IndexType() const */
    [get] TypeNode IndexTypeConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 130] interface TSQualifiedName: Expression {
    static TSQualifiedName Create(es2panda_Context context, Expression left, Identifier right);

    static TSQualifiedName Update(es2panda_Context context, es2panda_AstNode original, Expression left, Identifier right);


/* [[nodiscard]] const Expression *Left() const noexcept */
    [get] Expression LeftConst(es2panda_Context context);
/* [[nodiscard]] Expression *Left() noexcept */
    [get] Expression Left(es2panda_Context context);
/* [[nodiscard]] const Identifier *Right() const noexcept */
    [get] Identifier RightConst(es2panda_Context context);
/* [[nodiscard]] Identifier *Right() noexcept */
    [get] Identifier Right(es2panda_Context context);
/* util::StringView ToString(ArenaAllocator *allocator) const */
    String ToStringConst(es2panda_Context context);
/* util::StringView BaseToString(ArenaAllocator *allocator) const */
    String BaseToStringConst(es2panda_Context context);
/* ir::TSQualifiedName *ResolveLeftMostQualifiedName() */
    TSQualifiedName ResolveLeftMostQualifiedName(es2panda_Context context);
/* const ir::TSQualifiedName *ResolveLeftMostQualifiedName() const */
    TSQualifiedName ResolveLeftMostQualifiedNameConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 4] interface AwaitExpression: Expression {
    static AwaitExpression Create(es2panda_Context context, Expression argument);

    static AwaitExpression Update(es2panda_Context context, es2panda_AstNode original, Expression argument);


/* [[nodiscard]] const Expression *Argument() const noexcept */
    [get] Expression ArgumentConst(es2panda_Context context);
};

[Entity=Class] interface ValidationInfo {
    static es2panda_ValidationInfo Create(es2panda_Context context);

    static es2panda_ValidationInfo Create1(es2panda_Context context, String m, es2panda_SourcePosition p);



/* inline bool Fail() const */
    [get] boolean FailConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 20] interface ContinueStatement: Statement {
    static ContinueStatement Create(es2panda_Context context);

    static ContinueStatement Update(es2panda_Context context, es2panda_AstNode original);
    static ContinueStatement Create1(es2panda_Context context, Identifier ident);

    static ContinueStatement Update1(es2panda_Context context, es2panda_AstNode original, Identifier ident);


/* [[nodiscard]] const Identifier *Ident() const noexcept */
    [get] Identifier IdentConst(es2panda_Context context);
/* Identifier *Ident() noexcept */
    [get] Identifier Ident(es2panda_Context context);
/* [[nodiscard]] const ir::AstNode *Target() const noexcept */
    [get] AstNode TargetConst(es2panda_Context context);
/* void SetTarget(ir::AstNode const *target) noexcept */
    void SetTarget(es2panda_Context context, AstNode target);
};

[Entity=Class, Es2pandaAstNodeType = 78] interface ETSNewMultiDimArrayInstanceExpression: Expression {
    static ETSNewMultiDimArrayInstanceExpression Create(es2panda_Context context, TypeNode typeReference, sequence<Expression> dimensions, u32 dimensionsLen);

    static ETSNewMultiDimArrayInstanceExpression Update(es2panda_Context context, es2panda_AstNode original, TypeNode typeReference, sequence<Expression> dimensions, u32 dimensionsLen);
    static ETSNewMultiDimArrayInstanceExpression Create1(es2panda_Context context, ETSNewMultiDimArrayInstanceExpression other);

    static ETSNewMultiDimArrayInstanceExpression Update1(es2panda_Context context, es2panda_AstNode original, ETSNewMultiDimArrayInstanceExpression other);


/* [[nodiscard]] ir::TypeNode *TypeReference() noexcept */
    [get] TypeNode TypeReference(es2panda_Context context);
/* [[nodiscard]] ir::TypeNode const *TypeReference() const noexcept */
    [get] TypeNode TypeReferenceConst(es2panda_Context context);
/* [[nodiscard]] ArenaVector<ir::Expression *> &Dimensions() noexcept */
    [get] sequence<Expression> Dimensions(es2panda_Context context);
/* [[nodiscard]] ArenaVector<ir::Expression *> const &Dimensions() const noexcept */
    [get] sequence<Expression> DimensionsConst(es2panda_Context context);
/* [[nodiscard]] checker::Signature *Signature() noexcept */
    [get] es2panda_Signature Signature(es2panda_Context context);
/* [[nodiscard]] const checker::Signature *Signature() const noexcept */
    [get] es2panda_Signature SignatureConst(es2panda_Context context);
/* void SetSignature(checker::Signature *signature) noexcept */
    void SetSignature(es2panda_Context context, es2panda_Signature signature);
};

[Entity=Class, Es2pandaAstNodeType = 136] interface TSNamedTupleMember: TypeNode {
    static TSNamedTupleMember Create(es2panda_Context context, Expression label, TypeNode elementType, boolean optional_arg);

    static TSNamedTupleMember Update(es2panda_Context context, es2panda_AstNode original, Expression label, TypeNode elementType, boolean optional_arg);


/* const Expression *Label() const */
    [get] Expression LabelConst(es2panda_Context context);
/* TypeNode *ElementType() */
    [get] TypeNode ElementType(es2panda_Context context);
/* const TypeNode *ElementType() const */
    [get] TypeNode ElementTypeConst(es2panda_Context context);
/* bool IsOptional() const */
    [get] boolean IsOptionalConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 40] interface ImportExpression: Expression {
    static ImportExpression Create(es2panda_Context context, Expression source);

    static ImportExpression Update(es2panda_Context context, es2panda_AstNode original, Expression source);


/* Expression *Source() */
    [get] Expression Source(es2panda_Context context);
/* Expression const *Source() const */
    [get] Expression SourceConst(es2panda_Context context);
};

[Entity=Class] interface AstDumper {
    static es2panda_AstDumper Create(es2panda_Context context, AstNode node, String sourceCode);



/* static const char *ModifierToString(ModifierFlags flags) */
    String ModifierToString(es2panda_Context context, Es2pandaModifierFlags flags);
/* static const char *TypeOperatorToString(TSOperatorType operatorType) */
    String TypeOperatorToString(es2panda_Context context, Es2pandaTSOperatorType operatorType);
/* std::string Str() const */
    [get] String StrConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 64] interface ETSNullType: TypeNode {
    static ETSNullType CreateIr(es2panda_Context context);

    static ETSNullType UpdateIr(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 65] interface ETSUndefinedType: TypeNode {
    static ETSUndefinedType CreateIr(es2panda_Context context);

    static ETSUndefinedType UpdateIr(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 146] interface TypeofExpression: Expression {
    static TypeofExpression Create(es2panda_Context context, Expression argument);

    static TypeofExpression Update(es2panda_Context context, es2panda_AstNode original, Expression argument);


/* [[nodiscard]] Expression *Argument() const noexcept */
    [get] Expression ArgumentConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 89] interface TSEnumMember: Statement {
    static TSEnumMember Create(es2panda_Context context, Expression key, Expression init);

    static TSEnumMember Update(es2panda_Context context, es2panda_AstNode original, Expression key, Expression init);
    static TSEnumMember Create1(es2panda_Context context, Expression key, Expression init, boolean isGenerated);

    static TSEnumMember Update1(es2panda_Context context, es2panda_AstNode original, Expression key, Expression init, boolean isGenerated);


/* const Expression *Key() const */
    [get] Expression KeyConst(es2panda_Context context);
/* Expression *Key() */
    [get] Expression Key(es2panda_Context context);
/* const Expression *Init() const */
    [get] Expression InitConst(es2panda_Context context);
/* Expression *Init() */
    [get] Expression Init(es2panda_Context context);
/* bool IsGenerated() const */
    [get] boolean IsGeneratedConst(es2panda_Context context);
/* [[nodiscard]] util::StringView Name() const */
    String NameConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 87] interface SwitchStatement: Statement {
    static SwitchStatement Create(es2panda_Context context, Expression discriminant, sequence<SwitchCaseStatement> cases, u32 casesLen);

    static SwitchStatement Update(es2panda_Context context, es2panda_AstNode original, Expression discriminant, sequence<SwitchCaseStatement> cases, u32 casesLen);


/* [[nodiscard]] const Expression *Discriminant() const noexcept */
    [get] Expression DiscriminantConst(es2panda_Context context);
/* [[nodiscard]] Expression *Discriminant() noexcept */
    [get] Expression Discriminant(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<SwitchCaseStatement *> &Cases() const noexcept */
    [get] sequence<SwitchCaseStatement> CasesConst(es2panda_Context context);
/* [[nodiscard]] ArenaVector<SwitchCaseStatement *> &Cases() noexcept */
    [get] sequence<SwitchCaseStatement> Cases(es2panda_Context context);
/* void SetScope(varbinder::LocalScope *scope) noexcept */
    void SetScope(es2panda_Context context, LocalScope scope);
};

[Entity=Class, Es2pandaAstNodeType = 24] interface DoWhileStatement: LoopStatement {
    static DoWhileStatement Create(es2panda_Context context, Statement body, Expression test);

    static DoWhileStatement Update(es2panda_Context context, es2panda_AstNode original, Statement body, Expression test);


/* const Statement *Body() const */
    [get] Statement BodyConst(es2panda_Context context);
/* Statement *Body() */
    [get] Statement Body(es2panda_Context context);
/* const Expression *Test() const */
    [get] Expression TestConst(es2panda_Context context);
/* Expression *Test() */
    [get] Expression Test(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 11] interface CatchClause: TypedStatement {
    static CatchClause Create(es2panda_Context context, Expression param, BlockStatement body);

    static CatchClause Update(es2panda_Context context, es2panda_AstNode original, Expression param, BlockStatement body);


/* Expression *Param() */
    [get] Expression Param(es2panda_Context context);
/* const Expression *Param() const */
    [get] Expression ParamConst(es2panda_Context context);
/* BlockStatement *Body() */
    [get] BlockStatement Body(es2panda_Context context);
/* const BlockStatement *Body() const */
    [get] BlockStatement BodyConst(es2panda_Context context);
/* void SetScope(varbinder::CatchScope *scope) */
    void SetScope(es2panda_Context context, CatchScope scope);
/* bool IsDefaultCatchClause() const */
    boolean IsDefaultCatchClauseConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 62] interface SequenceExpression: Expression {
    static SequenceExpression Create(es2panda_Context context, sequence<Expression> sequence_arg, u32 sequenceLen);

    static SequenceExpression Update(es2panda_Context context, es2panda_AstNode original, sequence<Expression> sequence_arg, u32 sequenceLen);


/* [[nodiscard]] const ArenaVector<Expression *> &Sequence() const noexcept */
    [get] sequence<Expression> SequenceConst(es2panda_Context context);
/* [[nodiscard]] ArenaVector<Expression *> &Sequence() noexcept */
    [get] sequence<Expression> Sequence(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 0] interface ArrowFunctionExpression: Expression {
    static ArrowFunctionExpression Create(es2panda_Context context, ScriptFunction func);

    static ArrowFunctionExpression Update(es2panda_Context context, es2panda_AstNode original, ScriptFunction func);
    static ArrowFunctionExpression Create1(es2panda_Context context, ArrowFunctionExpression other);

    static ArrowFunctionExpression Update1(es2panda_Context context, es2panda_AstNode original, ArrowFunctionExpression other);


/* [[nodiscard]] const ScriptFunction *Function() const noexcept */
    [get] ScriptFunction FunctionConst(es2panda_Context context);
/* [[nodiscard]] ScriptFunction *Function() noexcept */
    [get] ScriptFunction Function(es2panda_Context context);
/* ir::TypeNode *CreateTypeAnnotation(checker::ETSChecker *checker) */
    TypeNode CreateTypeAnnotation(es2panda_Context context);
/* ir::TypeNode *CreateReturnNodeFromType(checker::ETSChecker *checker, checker::Type *returnType) */
    TypeNode CreateReturnNodeFromType(es2panda_Context context, Type returnType);
/* bool IsVarFromSubscope(const varbinder::Variable *var) const */
    boolean IsVarFromSubscopeConst(es2panda_Context context, Variable var);
};

[Entity=Class, Es2pandaAstNodeType = 55] interface OmittedExpression: Expression {
    static OmittedExpression Create(es2panda_Context context);

    static OmittedExpression Update(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class, Es2pandaAstNodeType = 79] interface ETSNewClassInstanceExpression: Expression {
    static ETSNewClassInstanceExpression Create(es2panda_Context context, Expression typeReference, sequence<Expression> arguments, u32 argumentsLen, ClassDefinition classDefinition);

    static ETSNewClassInstanceExpression Update(es2panda_Context context, es2panda_AstNode original, Expression typeReference, sequence<Expression> arguments, u32 argumentsLen, ClassDefinition classDefinition);
    static ETSNewClassInstanceExpression Create1(es2panda_Context context, ETSNewClassInstanceExpression other);

    static ETSNewClassInstanceExpression Update1(es2panda_Context context, es2panda_AstNode original, ETSNewClassInstanceExpression other);


/* [[nodiscard]] ir::ClassDefinition *ClassDefinition() noexcept */
    [get] ClassDefinition ClassDefinition(es2panda_Context context);
/* [[nodiscard]] const ir::ClassDefinition *ClassDefinition() const noexcept */
    [get] ClassDefinition ClassDefinitionConst(es2panda_Context context);
/* [[nodiscard]] ir::Expression *GetTypeRef() const noexcept */
    [get] Expression GetTypeRefConst(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<ir::Expression *> &GetArguments() const noexcept */
    [get] sequence<Expression> GetArgumentsConst(es2panda_Context context);
/* void SetArguments(ArenaVector<ir::Expression *> &&arguments) */
    void SetArguments(es2panda_Context context, sequence<Expression> arguments, u32 argumentsLen);
/* [[nodiscard]] checker::Signature *GetSignature() const noexcept */
    [get] es2panda_Signature GetSignatureConst(es2panda_Context context);
/* void SetSignature(checker::Signature *const signature) noexcept */
    void SetSignature(es2panda_Context context, es2panda_Signature signature);
/* void AddToArgumentsFront(ir::Expression *expr) */
    void AddToArgumentsFront(es2panda_Context context, Expression expr);
/* static bool TypeIsAllowedForInstantiation(checker::Type *type) */
    boolean TypeIsAllowedForInstantiation(es2panda_Context context, Type type);
};

[Entity=Class, Es2pandaAstNodeType = 139] interface TSAsExpression: AnnotatedExpression {
    static TSAsExpression Create(es2panda_Context context, Expression expression, TypeNode typeAnnotation, boolean isConst);

    static TSAsExpression Update(es2panda_Context context, es2panda_AstNode original, Expression expression, TypeNode typeAnnotation, boolean isConst);


/* [[nodiscard]] const Expression *Expr() const noexcept */
    [get] Expression ExprConst(es2panda_Context context);
/* [[nodiscard]] Expression *Expr() noexcept */
    Expression Expr(es2panda_Context context);
/* void SetExpr(Expression *expr) noexcept */
    void SetExpr(es2panda_Context context, Expression expr);
/* [[nodiscard]] bool IsConst() const noexcept */
    [get] boolean IsConstConst(es2panda_Context context);
/* void SetUncheckedCast(bool isUncheckedCast) noexcept */
    void SetUncheckedCast(es2panda_Context context, boolean isUncheckedCast);
};

[Entity=Class, Es2pandaAstNodeType = 33] interface ForUpdateStatement: LoopStatement {
    static ForUpdateStatement Create(es2panda_Context context, AstNode init, Expression test, Expression update, Statement body);

    static ForUpdateStatement Update(es2panda_Context context, es2panda_AstNode original, AstNode init, Expression test, Expression update, Statement body);


/* AstNode *Init() */
    [get] AstNode Init(es2panda_Context context);
/* const AstNode *Init() const */
    [get] AstNode InitConst(es2panda_Context context);
/* Expression *Test() */
    [get] Expression Test(es2panda_Context context);
/* const Expression *Test() const */
    [get] Expression TestConst(es2panda_Context context);
/* Expression *Update() */
    [get] Expression Update(es2panda_Context context);
/* const Expression *Update() const */
    [get] Expression UpdateConst(es2panda_Context context);
/* Statement *Body() */
    [get] Statement Body(es2panda_Context context);
/* const Statement *Body() const */
    [get] Statement BodyConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 74] interface ETSTypeReferencePart: TypeNode {
    static ETSTypeReferencePart Create(es2panda_Context context, Expression name, TSTypeParameterInstantiation typeParams, ETSTypeReferencePart prev);

    static ETSTypeReferencePart Update(es2panda_Context context, es2panda_AstNode original, Expression name, TSTypeParameterInstantiation typeParams, ETSTypeReferencePart prev);
    static ETSTypeReferencePart Create1(es2panda_Context context, Expression name);

    static ETSTypeReferencePart Update1(es2panda_Context context, es2panda_AstNode original, Expression name);


/* ir::ETSTypeReferencePart *Previous() */
    [get] ETSTypeReferencePart Previous(es2panda_Context context);
/* const ir::ETSTypeReferencePart *Previous() const */
    [get] ETSTypeReferencePart PreviousConst(es2panda_Context context);
/* ir::Expression *Name() */
    [get] Expression Name(es2panda_Context context);
/* ir::TSTypeParameterInstantiation *TypeParams() */
    [get] TSTypeParameterInstantiation TypeParams(es2panda_Context context);
/* const ir::Expression *Name() const */
    [get] Expression NameConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 59] interface ETSReExportDeclaration: Statement {
    static ETSReExportDeclaration Create(es2panda_Context context, ETSImportDeclaration etsImportDeclarations, sequence<String> userPaths, u32 userPathsLen, String programPath);

    static ETSReExportDeclaration Update(es2panda_Context context, es2panda_AstNode original, ETSImportDeclaration etsImportDeclarations, sequence<String> userPaths, u32 userPathsLen, String programPath);


/* ETSImportDeclaration *GetETSImportDeclarations() const */
    [get] ETSImportDeclaration GetETSImportDeclarationsConst(es2panda_Context context);
/* ETSImportDeclaration *GetETSImportDeclarations() */
    [get] ETSImportDeclaration GetETSImportDeclarations(es2panda_Context context);
/* const ArenaVector<util::StringView> &GetUserPaths() const */
    [get] sequence<String> GetUserPathsConst(es2panda_Context context);
/* util::StringView const &GetProgramPath() const */
    [get] String GetProgramPathConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 70] interface ETSPrimitiveType: TypeNode {
    static ETSPrimitiveType Create(es2panda_Context context, Es2pandaPrimitiveType type);

    static ETSPrimitiveType Update(es2panda_Context context, es2panda_AstNode original, Es2pandaPrimitiveType type);


/* PrimitiveType GetPrimitiveType() const */
    [get] Es2pandaPrimitiveType GetPrimitiveTypeConst(es2panda_Context context);
};

[Entity=Class] interface TypeNode: Expression {


/* [[nodiscard]] virtual checker::Type *GetType([[maybe_unused]] checker::ETSChecker *checker) */
    [get] Type GetType(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 51] interface NewExpression: Expression {
    static NewExpression Create(es2panda_Context context, Expression callee, sequence<Expression> arguments, u32 argumentsLen);

    static NewExpression Update(es2panda_Context context, es2panda_AstNode original, Expression callee, sequence<Expression> arguments, u32 argumentsLen);


/* [[nodiscard]] const Expression *Callee() const noexcept */
    [get] Expression CalleeConst(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<Expression *> &Arguments() const noexcept */
    [get] sequence<Expression> ArgumentsConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 123] interface TSParameterProperty: Expression {
    static TSParameterProperty Create(es2panda_Context context, Es2pandaAccessibilityOption accessibility, Expression parameter, boolean readonly_arg, boolean isStatic, boolean isExport);

    static TSParameterProperty Update(es2panda_Context context, es2panda_AstNode original, Es2pandaAccessibilityOption accessibility, Expression parameter, boolean readonly_arg, boolean isStatic, boolean isExport);


/* AccessibilityOption Accessibility() const */
    [get] Es2pandaAccessibilityOption AccessibilityConst(es2panda_Context context);
/* bool Readonly() const */
    [get] boolean ReadonlyConst(es2panda_Context context);
/* bool IsStatic() const */
    [get] boolean IsStaticConst(es2panda_Context context);
/* bool IsExport() const */
    [get] boolean IsExportConst(es2panda_Context context);
/* const Expression *Parameter() const */
    [get] Expression ParameterConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 69] interface ETSWildcardType: TypeNode {
    static ETSWildcardType Create(es2panda_Context context, ETSTypeReference typeReference, Es2pandaModifierFlags flags);

    static ETSWildcardType Update(es2panda_Context context, es2panda_AstNode original, ETSTypeReference typeReference, Es2pandaModifierFlags flags);


/* ir::ETSTypeReference *TypeReference() */
    [get] ETSTypeReference TypeReference(es2panda_Context context);
/* ir::ETSTypeReference const *TypeReference() const */
    [get] ETSTypeReference TypeReferenceConst(es2panda_Context context);
};

[Entity=Class, Es2pandaAstNodeType = 117] interface TSThisType: TypeNode {
    static TSThisType Create(es2panda_Context context);

    static TSThisType Update(es2panda_Context context, es2panda_AstNode original);


};


[Entity=Class] interface UnknownType {
    static UnknownType Create(es2panda_Context context);



};

[Entity=Class] interface StringLiteralType {
    static StringLiteralType Create(es2panda_Context context, String value);



/* const util::StringView &Value() const */
    [get] String ValueConst(es2panda_Context context);
};

[Entity=Class] interface ObjectType {


/* ObjectType::ObjectTypeKind Kind() const */
    [get] Es2pandaObjectTypeKind KindConst(es2panda_Context context);
/* virtual ArenaVector<Signature *> CallSignatures() */
    [get] sequence<es2panda_Signature> CallSignatures(es2panda_Context context);
/* virtual ArenaVector<Signature *> ConstructSignatures() */
    [get] sequence<es2panda_Signature> ConstructSignatures(es2panda_Context context);
/* virtual const IndexInfo *StringIndexInfo() const */
    [get] es2panda_IndexInfo StringIndexInfoConst(es2panda_Context context);
/* virtual const IndexInfo *NumberIndexInfo() const */
    [get] es2panda_IndexInfo NumberIndexInfoConst(es2panda_Context context);
/* virtual IndexInfo *StringIndexInfo() */
    [get] es2panda_IndexInfo StringIndexInfo(es2panda_Context context);
/* virtual IndexInfo *NumberIndexInfo() */
    [get] es2panda_IndexInfo NumberIndexInfo(es2panda_Context context);
/* virtual ArenaVector<varbinder::LocalVariable *> Properties() */
    [get] sequence<LocalVariable> Properties(es2panda_Context context);
/* ObjectDescriptor *Desc() */
    [get] es2panda_ObjectDescriptor Desc(es2panda_Context context);
/* const ObjectDescriptor *Desc() const */
    [get] es2panda_ObjectDescriptor DescConst(es2panda_Context context);
/* virtual varbinder::LocalVariable *GetProperty(const util::StringView &name,
                                                  [[maybe_unused]] bool searchInBase) const */
    LocalVariable GetPropertyConst(es2panda_Context context, String name, boolean searchInBase);
/* void AddCallSignature(Signature *signature) */
    void AddCallSignature(es2panda_Context context, es2panda_Signature signature);
/* void AddConstructSignature(Signature *signature) */
    void AddConstructSignature(es2panda_Context context, es2panda_Signature signature);
/* void AddObjectFlag(ObjectFlags flag) */
    void AddObjectFlag(es2panda_Context context, Es2pandaObjectFlags flag);
/* void RemoveObjectFlag(ObjectFlags flag) */
    void RemoveObjectFlag(es2panda_Context context, Es2pandaObjectFlags flag);
/* bool HasObjectFlag(ObjectFlags flag) const */
    [get] boolean HasObjectFlagConst(es2panda_Context context, Es2pandaObjectFlags flag);
/* static bool SignatureRelatedToSomeSignature(TypeRelation *relation, Signature *sourceSignature,
                                                ArenaVector<Signature *> *targetSignatures) */
    boolean SignatureRelatedToSomeSignature(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Signature sourceSignature, sequence<es2panda_Signature> targetSignatures, u32 targetSignaturesLen);
/* static bool EachSignatureRelatedToSomeSignature(TypeRelation *relation,
                                                    const ArenaVector<Signature *> &sourceSignatures,
                                                    const ArenaVector<Signature *> &targetSignatures) */
    boolean EachSignatureRelatedToSomeSignature(es2panda_Context context, es2panda_TypeRelation relation, sequence<es2panda_Signature> sourceSignatures, u32 sourceSignaturesLen, sequence<es2panda_Signature> targetSignatures, u32 targetSignaturesLen);
/* bool FindPropertyAndCheckIdentical(TypeRelation *relation, ObjectType *otherObj) */
    boolean FindPropertyAndCheckIdentical(es2panda_Context context, es2panda_TypeRelation relation, ObjectType otherObj);
/* bool IdenticalPropertiesHelper(TypeRelation *relation, ObjectType *otherObj) */
    boolean IdenticalPropertiesHelper(es2panda_Context context, es2panda_TypeRelation relation, ObjectType otherObj);
/* void CheckExcessProperties(TypeRelation *relation, ObjectType *source) */
    void CheckExcessProperties(es2panda_Context context, es2panda_TypeRelation relation, ObjectType source);
/* void AssignProperties(TypeRelation *relation, ObjectType *source) */
    void AssignProperties(es2panda_Context context, es2panda_TypeRelation relation, ObjectType source);
/* void AssignSignatures(TypeRelation *relation, ObjectType *source, bool assignCallSignatures = true) */
    void AssignSignatures(es2panda_Context context, es2panda_TypeRelation relation, ObjectType source, boolean assignCallSignatures);
/* void AssignIndexInfo(TypeRelation *relation, ObjectType *source, bool assignNumberInfo = true) */
    void AssignIndexInfo(es2panda_Context context, es2panda_TypeRelation relation, ObjectType source, boolean assignNumberInfo);
};

[Entity=Class] interface ETSDynamicFunctionType {
    static ETSDynamicFunctionType Create(es2panda_Context context, String name, sequence<es2panda_Signature> signatures, u32 signaturesLen);

    static ETSDynamicFunctionType Create1(es2panda_Context context, String name, es2panda_Signature signature);

    static ETSDynamicFunctionType Create2(es2panda_Context context, String name);



};

[Entity=Class] interface TypeReference {
    static TypeReference Create(es2panda_Context context, sequence<Type> ref);



/* Type *Ref() */
    [get] Type Ref(es2panda_Context context);
/* const Type *Ref() const */
    [get] Type RefConst(es2panda_Context context);
};

[Entity=Class] interface BooleanType {
    static BooleanType Create(es2panda_Context context);



};

[Entity=Class] interface NeverType {
    static NeverType Create(es2panda_Context context);



};

[Entity=Class] interface NumberType {
    static NumberType Create(es2panda_Context context);



};

[Entity=Class] interface ETSFunctionType {
    static ETSFunctionType CreateChecker(es2panda_Context context, String name, sequence<es2panda_Signature> signatures, u32 signaturesLen);

    static ETSFunctionType CreateChecker1(es2panda_Context context, String name, es2panda_Signature signature);

    static ETSFunctionType CreateChecker2(es2panda_Context context, String name);



/* ArenaVector<Signature *> &CallSignatures() */
    [get] sequence<es2panda_Signature> CheckerCallSignatures(es2panda_Context context);
/* const ArenaVector<Signature *> &CallSignatures() const */
    [get] sequence<es2panda_Signature> CheckerCallSignaturesConst(es2panda_Context context);
/* util::StringView Name() const */
    [get] String CheckerNameConst(es2panda_Context context);
/* Type *FunctionalInterface() const */
    [get] Type CheckerFunctionalInterfaceConst(es2panda_Context context);
/* void AddCallSignature(Signature *signature) */
    void CheckerAddCallSignature(es2panda_Context context, es2panda_Signature signature);
/* void SetReferencedSignature(Signature *refSignature) */
    void CheckerSetReferencedSignature(es2panda_Context context, es2panda_Signature refSignature);
/* Signature *GetReferencedSignature() const */
    [get] es2panda_Signature CheckerGetReferencedSignatureConst(es2panda_Context context);
/* Signature *FindSignature(const ir::ScriptFunction *func) const */
    es2panda_Signature CheckerFindSignatureConst(es2panda_Context context, ScriptFunction func);
/* Signature *FindGetter() const */
    es2panda_Signature CheckerFindGetterConst(es2panda_Context context);
/* Signature *FindSetter() const */
    es2panda_Signature CheckerFindSetterConst(es2panda_Context context);
/* Signature *FirstAbstractSignature() */
    es2panda_Signature CheckerFirstAbstractSignature(es2panda_Context context);
/* checker::RelationResult CastFunctionParams(TypeRelation *relation, Signature *targetInvokeSig) */
    Es2pandaRelationResult CheckerCastFunctionParams(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Signature targetInvokeSig);
/* ETSFunctionType *BoxPrimitives(ETSChecker *checker) */
    ETSFunctionType CheckerBoxPrimitives(es2panda_Context context);
};

[Entity=Class] interface UnionType {
    static UnionType Create(es2panda_Context context, sequence<Type> constituentTypes, u32 constituentTypesLen);

    static UnionType Create1(es2panda_Context context, sequence<Type> constituentTypes, u32 constituentTypesLen);



/* const ArenaVector<Type *> &ConstituentTypes() const */
    [get] sequence<Type> ConstituentTypesConst(es2panda_Context context);
/* ArenaVector<Type *> &ConstituentTypes() */
    [get] sequence<Type> ConstituentTypes(es2panda_Context context);
/* void AddConstituentType(Type *type, TypeRelation *relation) */
    void AddConstituentType(es2panda_Context context, Type type, es2panda_TypeRelation relation);
/* void AddConstituentFlag(TypeFlag flag) */
    void AddConstituentFlag(es2panda_Context context, Es2pandaTypeFlag flag);
/* void RemoveConstituentFlag(TypeFlag flag) */
    void RemoveConstituentFlag(es2panda_Context context, Es2pandaTypeFlag flag);
/* bool HasConstituentFlag(TypeFlag flag) const */
    [get] boolean HasConstituentFlagConst(es2panda_Context context, Es2pandaTypeFlag flag);
/* ArenaUnorderedMap<util::StringView, varbinder::Variable *> &CachedSyntheticProperties() */
    [get] sequence<String> CachedSyntheticProperties(es2panda_Context context, sequence<sequence<Variable>> arenaMapValueArray);
/* ObjectType *MergedObjectType() */
    [get] ObjectType MergedObjectType(es2panda_Context context);
/* void SetMergedObjectType(ObjectType *type) */
    void SetMergedObjectType(es2panda_Context context, ObjectType type);
/* static void RemoveDuplicatedTypes(TypeRelation *relation, ArenaVector<Type *> &constituentTypes) */
    void RemoveDuplicatedTypes(es2panda_Context context, es2panda_TypeRelation relation, sequence<Type> constituentTypes, u32 constituentTypesLen);
/* static Type *HandleUnionType(UnionType *unionType, GlobalTypesHolder *globalTypesHolder) */
    Type HandleUnionType(es2panda_Context context, UnionType unionType, es2panda_GlobalTypesHolder globalTypesHolder);
/* static void RemoveRedundantLiteralTypesFromUnion(UnionType *type) */
    void RemoveRedundantLiteralTypesFromUnion(es2panda_Context context, UnionType type);
};

[Entity=Class] interface ETSArrayType {
    static ETSArrayType Create(es2panda_Context context, Type elementType);



/* Type *ElementType() */
    [get] Type ElementType(es2panda_Context context);
/* const Type *ElementType() const */
    [get] Type ElementTypeConst(es2panda_Context context);
};

[Entity=Class] interface Signature {
    static es2panda_Signature Create(es2panda_Context context, es2panda_SignatureInfo signatureInfo, Type returnType);

    static es2panda_Signature Create1(es2panda_Context context, es2panda_SignatureInfo signatureInfo, Type returnType, String internalName);

    static es2panda_Signature Create2(es2panda_Context context, es2panda_SignatureInfo signatureInfo, Type returnType, ScriptFunction func);



/* const SignatureInfo *GetSignatureInfo() const */
    [get] es2panda_SignatureInfo GetSignatureInfoConst(es2panda_Context context);
/* SignatureInfo *GetSignatureInfo() */
    [get] es2panda_SignatureInfo GetSignatureInfo(es2panda_Context context);
/* const ArenaVector<Type *> &TypeParams() const */
    [get] sequence<Type> TypeParamsConst(es2panda_Context context);
/* ArenaVector<Type *> &TypeParams() */
    [get] sequence<Type> TypeParams(es2panda_Context context);
/* const ArenaVector<varbinder::LocalVariable *> &Params() const */
    [get] sequence<LocalVariable> ParamsConst(es2panda_Context context);
/* ArenaVector<varbinder::LocalVariable *> &Params() */
    [get] sequence<LocalVariable> Params(es2panda_Context context);
/* const Type *ReturnType() const */
    [get] Type ReturnTypeConst(es2panda_Context context);
/* Type *ReturnType() */
    [get] Type ReturnType(es2panda_Context context);
/* uint32_t MinArgCount() const */
    [get] u32 MinArgCountConst(es2panda_Context context);
/* uint32_t OptionalArgCount() const */
    [get] u32 OptionalArgCountConst(es2panda_Context context);
/* void SetReturnType(Type *type) */
    [get] void SetReturnType(es2panda_Context context, Type type);
/* void SetOwner(ETSObjectType *owner) */
    void SetOwner(es2panda_Context context, ETSObjectType owner);
/* void SetOwnerVar(varbinder::Variable *owner) */
    void SetOwnerVar(es2panda_Context context, Variable owner);
/* void SetFunction(ir::ScriptFunction *const function) noexcept */
    void SetFunction(es2panda_Context context, ScriptFunction function);
/* ir::ScriptFunction *Function() */
    [get] ScriptFunction Function(es2panda_Context context);
/* ETSObjectType *Owner() */
    [get] ETSObjectType Owner(es2panda_Context context);
/* const ETSObjectType *Owner() const */
    [get] ETSObjectType OwnerConst(es2panda_Context context);
/* varbinder::Variable *OwnerVar() */
    [get] Variable OwnerVar(es2panda_Context context);
/* const ir::ScriptFunction *Function() const */
    [get] ScriptFunction FunctionConst(es2panda_Context context);
/* const varbinder::LocalVariable *RestVar() const */
    [get] LocalVariable RestVarConst(es2panda_Context context);
/* uint8_t ProtectionFlag() const */
    u8 ProtectionFlagConst(es2panda_Context context);
/* void AddSignatureFlag(SignatureFlags const flag) noexcept */
    void AddSignatureFlag(es2panda_Context context, Es2pandaSignatureFlags flag);
/* void RemoveSignatureFlag(SignatureFlags const flag) noexcept */
    void RemoveSignatureFlag(es2panda_Context context, Es2pandaSignatureFlags flag);
/* bool HasSignatureFlag(SignatureFlags const flag) const noexcept */
    [get] boolean HasSignatureFlagConst(es2panda_Context context, Es2pandaSignatureFlags flag);
/* [[nodiscard]] SignatureFlags GetFlags() const noexcept */
    [get] Es2pandaSignatureFlags GetFlagsConst(es2panda_Context context);
/* bool IsFinal() const noexcept */
    [get] boolean IsFinalConst(es2panda_Context context);
/* util::StringView InternalName() const */
    String InternalNameConst(es2panda_Context context);
/* Signature *Copy(ArenaAllocator *allocator, TypeRelation *relation, GlobalTypesHolder *globalTypes) */
    es2panda_Signature Copy(es2panda_Context context, es2panda_TypeRelation relation, es2panda_GlobalTypesHolder globalTypes);
/* Signature *Substitute(TypeRelation *relation, const Substitution *substitution) */
    es2panda_Signature Substitute(es2panda_Context context, es2panda_TypeRelation relation, sequence<ETSTypeParameter> substitutionKeyArray, sequence<Type> substitutionValueArray, u32 substitutionLen);
/* std::string ToString() const */
    String ToStringConst(es2panda_Context context);
/* void Compatible(TypeRelation *relation, Signature *other) */
    void Compatible(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Signature other);
/* bool CheckFunctionalInterfaces(TypeRelation *relation, Type *source, Type *target) */
    boolean CheckFunctionalInterfaces(es2panda_Context context, es2panda_TypeRelation relation, Type source, Type target);
/* void AssignmentTarget(TypeRelation *relation, Signature *source) */
    void AssignmentTarget(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Signature source);
/* Signature *BoxPrimitives(ETSChecker *checker) */
    es2panda_Signature BoxPrimitives(es2panda_Context context);
};

[Entity=Class] interface ETSBigIntType {
    static ETSBigIntType Create(es2panda_Context context, ETSObjectType super);

    static ETSBigIntType Create1(es2panda_Context context, ETSObjectType super, es2panda_TypeRelation relation, String value);



/* util::StringView GetValue() const */
    [get] String GetValueConst(es2panda_Context context);
};

[Entity=Class] interface AnyType {
    static AnyType Create(es2panda_Context context);



};

[Entity=Class] interface GlobalTypesHolder {
    static es2panda_GlobalTypesHolder Create(es2panda_Context context);



/* void AddETSEscompatLayer() */
    void AddETSEscompatLayer(es2panda_Context context);
/* void AddEtsSpecificTypes(ArenaAllocator *allocator) */
    void AddEtsSpecificTypes(es2panda_Context context);
/* void AddEtsSpecificBuiltinTypes() */
    void AddEtsSpecificBuiltinTypes(es2panda_Context context);
/* void AddTSSpecificTypes(ArenaAllocator *allocator) */
    void AddTSSpecificTypes(es2panda_Context context);
/* void AddFunctionTypes(ArenaAllocator *allocator) */
    void AddFunctionTypes(es2panda_Context context);
/* Type *GlobalNumberType() */
    Type GlobalNumberType(es2panda_Context context);
/* Type *GlobalAnyType() */
    Type GlobalAnyType(es2panda_Context context);
/* Type *GlobalStringType() */
    Type GlobalStringType(es2panda_Context context);
/* Type *GlobalBooleanType() */
    Type GlobalBooleanType(es2panda_Context context);
/* Type *GlobalVoidType() */
    Type GlobalVoidType(es2panda_Context context);
/* Type *GlobalNullType() */
    Type GlobalNullType(es2panda_Context context);
/* Type *GlobalUndefinedType() */
    Type GlobalUndefinedType(es2panda_Context context);
/* Type *GlobalUnknownType() */
    Type GlobalUnknownType(es2panda_Context context);
/* Type *GlobalNeverType() */
    Type GlobalNeverType(es2panda_Context context);
/* Type *GlobalNonPrimitiveType() */
    Type GlobalNonPrimitiveType(es2panda_Context context);
/* Type *GlobalBigintType() */
    Type GlobalBigintType(es2panda_Context context);
/* Type *GlobalFalseType() */
    Type GlobalFalseType(es2panda_Context context);
/* Type *GlobalTrueType() */
    Type GlobalTrueType(es2panda_Context context);
/* Type *GlobalNumberOrBigintType() */
    Type GlobalNumberOrBigintType(es2panda_Context context);
/* Type *GlobalStringOrNumberType() */
    Type GlobalStringOrNumberType(es2panda_Context context);
/* Type *GlobalZeroType() */
    Type GlobalZeroType(es2panda_Context context);
/* Type *GlobalEmptyStringType() */
    Type GlobalEmptyStringType(es2panda_Context context);
/* Type *GlobalZeroBigintType() */
    Type GlobalZeroBigintType(es2panda_Context context);
/* Type *GlobalPrimitiveType() */
    Type GlobalPrimitiveType(es2panda_Context context);
/* Type *GlobalEmptyTupleType() */
    Type GlobalEmptyTupleType(es2panda_Context context);
/* Type *GlobalEmptyObjectType() */
    Type GlobalEmptyObjectType(es2panda_Context context);
/* Type *GlobalResolvingReturnType() */
    Type GlobalResolvingReturnType(es2panda_Context context);
/* Type *GlobalErrorType() */
    Type GlobalErrorType(es2panda_Context context);
/* Type *GlobalByteType() */
    Type GlobalByteType(es2panda_Context context);
/* Type *GlobalShortType() */
    Type GlobalShortType(es2panda_Context context);
/* Type *GlobalIntType() */
    Type GlobalIntType(es2panda_Context context);
/* Type *GlobalLongType() */
    Type GlobalLongType(es2panda_Context context);
/* Type *GlobalFloatType() */
    Type GlobalFloatType(es2panda_Context context);
/* Type *GlobalDoubleType() */
    Type GlobalDoubleType(es2panda_Context context);
/* Type *GlobalCharType() */
    Type GlobalCharType(es2panda_Context context);
/* Type *GlobalETSBooleanType() */
    Type GlobalETSBooleanType(es2panda_Context context);
/* Type *GlobalETSStringLiteralType() */
    Type GlobalETSStringLiteralType(es2panda_Context context);
/* Type *GlobalETSVoidType() */
    Type GlobalETSVoidType(es2panda_Context context);
/* Type *GlobalETSObjectType() */
    Type GlobalETSObjectType(es2panda_Context context);
/* Type *GlobalETSNullType() */
    Type GlobalETSNullType(es2panda_Context context);
/* Type *GlobalETSUndefinedType() */
    Type GlobalETSUndefinedType(es2panda_Context context);
/* Type *GlobalETSNeverType() */
    Type GlobalETSNeverType(es2panda_Context context);
/* Type *GlobalETSNullishType() */
    Type GlobalETSNullishType(es2panda_Context context);
/* Type *GlobalETSNullishObjectType() */
    Type GlobalETSNullishObjectType(es2panda_Context context);
/* Type *GlobalWildcardType() */
    Type GlobalWildcardType(es2panda_Context context);
/* Type *GlobalETSBooleanBuiltinType() */
    Type GlobalETSBooleanBuiltinType(es2panda_Context context);
/* Type *GlobalByteBuiltinType() */
    Type GlobalByteBuiltinType(es2panda_Context context);
/* Type *GlobalCharBuiltinType() */
    Type GlobalCharBuiltinType(es2panda_Context context);
/* Type *GlobalComparableBuiltinType() */
    Type GlobalComparableBuiltinType(es2panda_Context context);
/* Type *GlobalConsoleBuiltinType() */
    Type GlobalConsoleBuiltinType(es2panda_Context context);
/* Type *GlobalDoubleBuiltinType() */
    Type GlobalDoubleBuiltinType(es2panda_Context context);
/* Type *GlobalExceptionBuiltinType() */
    Type GlobalExceptionBuiltinType(es2panda_Context context);
/* Type *GlobalFloatBuiltinType() */
    Type GlobalFloatBuiltinType(es2panda_Context context);
/* Type *GlobalFloatingBuiltinType() */
    Type GlobalFloatingBuiltinType(es2panda_Context context);
/* Type *GlobalIntegerBuiltinType() */
    Type GlobalIntegerBuiltinType(es2panda_Context context);
/* Type *GlobalIntegralBuiltinType() */
    Type GlobalIntegralBuiltinType(es2panda_Context context);
/* Type *GlobalLongBuiltinType() */
    Type GlobalLongBuiltinType(es2panda_Context context);
/* Type *GlobalErrorBuiltinType() */
    Type GlobalErrorBuiltinType(es2panda_Context context);
/* Type *GlobalRuntimeBuiltinType() */
    Type GlobalRuntimeBuiltinType(es2panda_Context context);
/* Type *GlobalShortBuiltinType() */
    Type GlobalShortBuiltinType(es2panda_Context context);
/* Type *GlobalStackTraceElementBuiltinType() */
    Type GlobalStackTraceElementBuiltinType(es2panda_Context context);
/* Type *GlobalStackTraceBuiltinType() */
    Type GlobalStackTraceBuiltinType(es2panda_Context context);
/* Type *GlobalNullPointerExceptionBuiltinType() */
    Type GlobalNullPointerExceptionBuiltinType(es2panda_Context context);
/* Type *GlobalArrayIndexOutOfBoundsErrorBuiltinType() */
    Type GlobalArrayIndexOutOfBoundsErrorBuiltinType(es2panda_Context context);
/* Type *GlobalArithmeticErrorBuiltinType() */
    Type GlobalArithmeticErrorBuiltinType(es2panda_Context context);
/* Type *GlobalClassNotFoundExceptionBuiltinType() */
    Type GlobalClassNotFoundExceptionBuiltinType(es2panda_Context context);
/* [[nodiscard]] Type *GlobalClassCastErrorBuiltinType() const noexcept */
    Type GlobalClassCastErrorBuiltinTypeConst(es2panda_Context context);
/* Type *GlobalETSStringBuiltinType() */
    Type GlobalETSStringBuiltinType(es2panda_Context context);
/* Type *GlobalETSBigIntBuiltinType() */
    Type GlobalETSBigIntBuiltinType(es2panda_Context context);
/* Type *GlobalETSBigIntLiteralType() */
    Type GlobalETSBigIntLiteralType(es2panda_Context context);
/* Type *GlobalStringBuilderBuiltinType() */
    Type GlobalStringBuilderBuiltinType(es2panda_Context context);
/* Type *GlobalTypeBuiltinType() */
    Type GlobalTypeBuiltinType(es2panda_Context context);
/* Type *GlobalTypesBuiltinType() */
    Type GlobalTypesBuiltinType(es2panda_Context context);
/* Type *GlobalPromiseBuiltinType() */
    Type GlobalPromiseBuiltinType(es2panda_Context context);
/* Type *GlobalBoxBuiltinType() */
    Type GlobalBoxBuiltinType(es2panda_Context context);
/* Type *GlobalBooleanBoxBuiltinType() */
    Type GlobalBooleanBoxBuiltinType(es2panda_Context context);
/* Type *GlobalByteBoxBuiltinType() */
    Type GlobalByteBoxBuiltinType(es2panda_Context context);
/* Type *GlobalCharBoxBuiltinType() */
    Type GlobalCharBoxBuiltinType(es2panda_Context context);
/* Type *GlobalShortBoxBuiltinType() */
    Type GlobalShortBoxBuiltinType(es2panda_Context context);
/* Type *GlobalIntBoxBuiltinType() */
    Type GlobalIntBoxBuiltinType(es2panda_Context context);
/* Type *GlobalLongBoxBuiltinType() */
    Type GlobalLongBoxBuiltinType(es2panda_Context context);
/* Type *GlobalFloatBoxBuiltinType() */
    Type GlobalFloatBoxBuiltinType(es2panda_Context context);
/* Type *GlobalDoubleBoxBuiltinType() */
    Type GlobalDoubleBoxBuiltinType(es2panda_Context context);
/* size_t VariadicFunctionTypeThreshold() */
    u32 VariadicFunctionTypeThreshold(es2panda_Context context);
/* Type *GlobalFunctionBuiltinType(size_t nargs, ir::ScriptFunctionFlags flags) */
    Type GlobalFunctionBuiltinType(es2panda_Context context, u32 nargs, Es2pandaScriptFunctionFlags flags);
/* Type *GlobalArrayBuiltinType() */
    Type GlobalArrayBuiltinType(es2panda_Context context);
/* Type *GlobalClassOutOfMemoryErrorBuiltinType() */
    Type GlobalClassOutOfMemoryErrorBuiltinType(es2panda_Context context);
/* Type *GlobalNoSuchMethodErrorBuiltinType() */
    Type GlobalNoSuchMethodErrorBuiltinType(es2panda_Context context);
/* Type *GlobalAssertionErrorBuiltinType() */
    Type GlobalAssertionErrorBuiltinType(es2panda_Context context);
/* Type *GlobalDivideByZeroErrorBuiltinType() */
    Type GlobalDivideByZeroErrorBuiltinType(es2panda_Context context);
/* Type *GlobalNullPointerErrorBuiltinType() */
    Type GlobalNullPointerErrorBuiltinType(es2panda_Context context);
/* Type *GlobalUncaughtExceptionErrorBuiltinType() */
    Type GlobalUncaughtExceptionErrorBuiltinType(es2panda_Context context);
/* Type *GlobalMapBuiltinType() */
    Type GlobalMapBuiltinType(es2panda_Context context);
/* Type *GlobalRegExpBuiltinType() */
    Type GlobalRegExpBuiltinType(es2panda_Context context);
/* Type *GlobalSetBuiltinType() */
    Type GlobalSetBuiltinType(es2panda_Context context);
/* Type *GlobalJSRuntimeBuiltinType() */
    Type GlobalJSRuntimeBuiltinType(es2panda_Context context);
/* Type *GlobalJSValueBuiltinType() */
    Type GlobalJSValueBuiltinType(es2panda_Context context);
/* Type *GlobalTypeError() */
    Type GlobalTypeError(es2panda_Context context);
/* void InitializeBuiltin(util::StringView name, Type *type) */
    void InitializeBuiltin(es2panda_Context context, String name, Type type);
};

[Entity=Class] interface LongType {
    static LongType Create(es2panda_Context context);

    static LongType Create1(es2panda_Context context, i64 value);



/* UType GetValue() const */
    [get] i64 GetValueConst(es2panda_Context context);
};

[Entity=Class] interface BigintLiteralType {
    static BigintLiteralType Create(es2panda_Context context, String value, boolean negative);



/* const util::StringView &Value() const */
    [get] String ValueConst(es2panda_Context context);
/* bool Negative() const */
    [get] boolean NegativeConst(es2panda_Context context);
};

[Entity=Class] interface ETSAsyncFuncReturnType {
    static ETSAsyncFuncReturnType Create(es2panda_Context context, es2panda_TypeRelation relation, ETSObjectType promiseType);



/* const Type *GetPromiseTypeArg() const */
    [get] Type GetPromiseTypeArgConst(es2panda_Context context);
/* Type *GetPromiseTypeArg() */
    [get] Type GetPromiseTypeArg(es2panda_Context context);
/* [[nodiscard]] const Type *PromiseType() const noexcept */
    [get] Type PromiseTypeConst(es2panda_Context context);
/* [[nodiscard]] Type *PromiseType() noexcept */
    [get] Type PromiseType(es2panda_Context context);
};

[Entity=Class] interface VoidType {
    static VoidType Create(es2panda_Context context);



};

[Entity=Class] interface DoubleType {
    static DoubleType Create(es2panda_Context context);

    static DoubleType Create1(es2panda_Context context, f64 value);



/* UType GetValue() const */
    [get] f64 GetValueConst(es2panda_Context context);
};

[Entity=Class] interface ETSExtensionFuncHelperType {
    static ETSExtensionFuncHelperType Create(es2panda_Context context, ETSFunctionType classMethodType, ETSFunctionType extensionFunctionType);



/* ETSFunctionType *ClassMethodType() */
    [get] ETSFunctionType ClassMethodType(es2panda_Context context);
/* ETSFunctionType *ExtensionMethodType() */
    [get] ETSFunctionType ExtensionMethodType(es2panda_Context context);
};

[Entity=Class] interface NullType {
    static NullType Create(es2panda_Context context);



};

[Entity=Class] interface ETSVoidType {
    static ETSVoidType Create(es2panda_Context context);



};

[Entity=Class] interface ETSNonNullishType {
    static ETSNonNullishType Create(es2panda_Context context, ETSTypeParameter tparam);



/* ETSTypeParameter *GetUnderlying() const */
    [get] ETSTypeParameter GetUnderlyingConst(es2panda_Context context);
};

[Entity=Class] interface BigintType {
    static BigintType Create(es2panda_Context context);



};

[Entity=Class] interface ETSStringType {
    static ETSStringType Create(es2panda_Context context, ETSObjectType super);

    static ETSStringType Create1(es2panda_Context context, ETSObjectType super, es2panda_TypeRelation relation);

    static ETSStringType Create2(es2panda_Context context, ETSObjectType super, es2panda_TypeRelation relation, String value);



/* util::StringView GetValue() const */
    [get] String GetValueConst(es2panda_Context context);
/* bool IsConvertibleTo(Type const *to) const */
    boolean IsConvertibleToConst(es2panda_Context context, Type to);
};

[Entity=Class] interface TypeParameter {
    static TypeParameter Create(es2panda_Context context, Type constraint, Type defaultType);



/* const Type *ConstraintType() const */
    [get] Type ConstraintTypeConst(es2panda_Context context);
/* Type *DefaultType() */
    [get] Type DefaultType(es2panda_Context context);
/* Type **DefaultTypeRef() */
    [get] sequence<Type> DefaultTypeRef(es2panda_Context context);
/* void SetDefaultType(Type *type) */
    void SetDefaultType(es2panda_Context context, Type type);
};

[Entity=Class] interface IntType {
    static IntType Create(es2panda_Context context);

    static IntType Create1(es2panda_Context context, i32 value);



/* UType GetValue() const */
    [get] i32 GetValueConst(es2panda_Context context);
};

[Entity=Class] interface NumberLiteralType {
    static NumberLiteralType Create(es2panda_Context context, f64 value);



/* double Value() const */
    [get] f64 ValueConst(es2panda_Context context);
};

[Entity=Class] interface ETSEnumType {
    static ETSEnumType Create(es2panda_Context context, TSEnumDeclaration enumDecl, i32 ordinal, TSEnumMember member, Es2pandaTypeFlag typeFlag);



/* [[nodiscard]] const ir::TSEnumDeclaration *GetDecl() const noexcept */
    TSEnumDeclaration GetDeclConst(es2panda_Context context);
/* [[nodiscard]] Type *BoxedType() const noexcept */
    Type BoxedTypeConst(es2panda_Context context);
/* [[nodiscard]] const ArenaVector<ir::AstNode *> &GetMembers() const noexcept */
    sequence<AstNode> GetMembersConst(es2panda_Context context);
/* [[nodiscard]] varbinder::LocalVariable *GetMemberVar() const noexcept */
    LocalVariable GetMemberVarConst(es2panda_Context context);
/* [[nodiscard]] util::StringView GetName() const noexcept */
    String GetNameConst(es2panda_Context context);
/* [[nodiscard]] UType GetOrdinal() const noexcept */
    i32 GetOrdinalConst(es2panda_Context context);
/* [[nodiscard]] ETSEnumType *LookupConstant(ETSChecker *checker, const ir::Expression *expression,
                                              const ir::Identifier *prop) const */
    ETSEnumType LookupConstantConst(es2panda_Context context, Expression expression, Identifier prop);
/* [[nodiscard]] ETSFunctionType *LookupMethod(ETSChecker *checker, const ir::Expression *expression,
                                                const ir::Identifier *prop) const */
    ETSFunctionType LookupMethodConst(es2panda_Context context, Expression expression, Identifier prop);
/* [[nodiscard]] bool IsLiteralType() const noexcept */
    boolean IsLiteralTypeConst(es2panda_Context context);
/* [[nodiscard]] bool IsSameEnumType(const ETSEnumType *const other) const noexcept */
    boolean IsSameEnumTypeConst(es2panda_Context context, ETSEnumType other);
/* [[nodiscard]] bool IsSameEnumLiteralType(const ETSEnumType *const other) const noexcept */
    boolean IsSameEnumLiteralTypeConst(es2panda_Context context, ETSEnumType other);
/* [[nodiscard]] bool IsEnumInstanceExpression(const ir::Expression *expression) const noexcept */
    boolean IsEnumInstanceExpressionConst(es2panda_Context context, Expression expression);
/* [[nodiscard]] bool IsEnumLiteralExpression(const ir::Expression *expression) const noexcept */
    boolean IsEnumLiteralExpressionConst(es2panda_Context context, Expression expression);
/* [[nodiscard]] bool IsEnumTypeExpression(const ir::Expression *expression) const noexcept */
    boolean IsEnumTypeExpressionConst(es2panda_Context context, Expression expression);
/* [[nodiscard]] Method ToStringMethod() const noexcept */
    es2panda_Signature ToStringMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
/* void SetToStringMethod(Method const &method) noexcept */
    void SetToStringMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
/* [[nodiscard]] Method ValueOfMethod() const noexcept */
    es2panda_Signature ValueOfMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
/* void SetValueOfMethod(Method const &method) noexcept */
    void SetValueOfMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
/* [[nodiscard]] Method GetNameMethod() const noexcept */
    es2panda_Signature GetNameMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
/* void SetGetNameMethod(Method const &method) noexcept */
    void SetGetNameMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
/* [[nodiscard]] Method GetValueOfMethod() const noexcept */
    es2panda_Signature GetValueOfMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
/* void SetGetValueOfMethod(Method const &method) noexcept */
    void SetGetValueOfMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
/* [[nodiscard]] Method ValuesMethod() const noexcept */
    es2panda_Signature ValuesMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
/* void SetValuesMethod(Method const &method) noexcept */
    void SetValuesMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
/* [[nodiscard]] Method FromIntMethod() const noexcept */
    es2panda_Signature FromIntMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
/* void SetFromIntMethod(Method const &method) noexcept */
    void SetFromIntMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
/* [[nodiscard]] Method BoxedFromIntMethod() const noexcept */
    es2panda_Signature BoxedFromIntMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
/* void SetBoxedFromIntMethod(Method const &method) noexcept */
    void SetBoxedFromIntMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
/* [[nodiscard]] Method UnboxMethod() const noexcept */
    es2panda_Signature UnboxMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
/* void SetUnboxMethod(Method const &method) noexcept */
    void SetUnboxMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
};

[Entity=Class] interface ETSIntEnumType {
    static ETSIntEnumType Create(es2panda_Context context, TSEnumDeclaration enumDecl, i32 ordinal, TSEnumMember member);



};

[Entity=Class] interface ETSStringEnumType {
    static ETSStringEnumType Create(es2panda_Context context, TSEnumDeclaration enumDecl, i32 ordinal, TSEnumMember member);



};

[Entity=Class] interface ETSDynamicType {


/* varbinder::LocalVariable *GetPropertyDynamic(const util::StringView &name, const ETSChecker *checker) const */
    LocalVariable GetPropertyDynamicConst(es2panda_Context context, String name);
/* bool HasDecl() const */
    [get] boolean HasDeclConst(es2panda_Context context);
/* static bool IsConvertible(Type const *target) */
    boolean IsConvertible(es2panda_Context context, Type target);
};

[Entity=Class] interface CharType {
    static CharType Create(es2panda_Context context);

    static CharType Create1(es2panda_Context context, i16 value);



/* UType GetValue() const */
    [get] i16 GetValueConst(es2panda_Context context);
};

[Entity=Class] interface UndefinedType {
    static UndefinedType Create(es2panda_Context context);



};

[Entity=Class] interface StringType {
    static StringType Create(es2panda_Context context);



};

[Entity=Class] interface NonPrimitiveType {
    static NonPrimitiveType Create(es2panda_Context context);



};

[Entity=Class] interface ETSNullType {
    static ETSNullType CreateChecker(es2panda_Context context);



};

[Entity=Class] interface ETSUndefinedType {
    static ETSUndefinedType CreateChecker(es2panda_Context context);



};

[Entity=Class] interface Type {


/* bool IsETSStringType() const */
    boolean IsETSStringTypeConst(es2panda_Context context);
/* bool IsETSBigIntType() const */
    boolean IsETSBigIntTypeConst(es2panda_Context context);
/* bool IsETSArrowType() const */
    boolean IsETSArrowTypeConst(es2panda_Context context);
/* bool IsETSPrimitiveType() const */
    boolean IsETSPrimitiveTypeConst(es2panda_Context context);
/* bool IsETSReferenceType() const */
    boolean IsETSReferenceTypeConst(es2panda_Context context);
/* bool IsETSAsyncFuncReturnType() const */
    boolean IsETSAsyncFuncReturnTypeConst(es2panda_Context context);
/* bool IsETSUnboxableObject() const */
    boolean IsETSUnboxableObjectConst(es2panda_Context context);
/* bool PossiblyETSNull() const */
    boolean PossiblyETSNullConst(es2panda_Context context);
/* bool PossiblyETSUndefined() const */
    boolean PossiblyETSUndefinedConst(es2panda_Context context);
/* bool PossiblyETSNullish() const */
    boolean PossiblyETSNullishConst(es2panda_Context context);
/* bool DefinitelyETSNullish() const */
    boolean DefinitelyETSNullishConst(es2panda_Context context);
/* bool DefinitelyNotETSNullish() const */
    boolean DefinitelyNotETSNullishConst(es2panda_Context context);
/* bool PossiblyETSString() const */
    boolean PossiblyETSStringConst(es2panda_Context context);
/* bool PossiblyETSValueTyped() const */
    boolean PossiblyETSValueTypedConst(es2panda_Context context);
/* bool PossiblyETSValueTypedExceptNullish() const */
    boolean PossiblyETSValueTypedExceptNullishConst(es2panda_Context context);
/* ETSStringType *AsETSStringType() */
    ETSStringType AsETSStringType(es2panda_Context context);
/* const ETSStringType *AsETSStringType() const */
    ETSStringType AsETSStringTypeConst(es2panda_Context context);
/* const ETSBigIntType *AsETSBigIntType() const */
    ETSBigIntType AsETSBigIntTypeConst(es2panda_Context context);
/* bool IsETSDynamicType() const */
    [get] boolean IsETSDynamicTypeConst(es2panda_Context context);
/* ETSDynamicType *AsETSDynamicType() */
    ETSDynamicType AsETSDynamicType(es2panda_Context context);
/* const ETSDynamicType *AsETSDynamicType() const */
    ETSDynamicType AsETSDynamicTypeConst(es2panda_Context context);
/* ETSAsyncFuncReturnType *AsETSAsyncFuncReturnType() */
    ETSAsyncFuncReturnType AsETSAsyncFuncReturnType(es2panda_Context context);
/* const ETSAsyncFuncReturnType *AsETSAsyncFuncReturnType() const */
    ETSAsyncFuncReturnType AsETSAsyncFuncReturnTypeConst(es2panda_Context context);
/* bool IsETSDynamicFunctionType() const */
    [get] boolean IsETSDynamicFunctionTypeConst(es2panda_Context context);
/* ETSDynamicFunctionType *AsETSDynamicFunctionType() */
    ETSDynamicFunctionType AsETSDynamicFunctionType(es2panda_Context context);
/* const ETSDynamicFunctionType *AsETSDynamicFunctionType() const */
    ETSDynamicFunctionType AsETSDynamicFunctionTypeConst(es2panda_Context context);
/* bool IsConditionalExprType() const */
    [get] boolean IsConditionalExprTypeConst(es2panda_Context context);
/* bool IsConstantType() const */
    [get] boolean IsConstantTypeConst(es2panda_Context context);
/* TypeFlag TypeFlags() const */
    [get] Es2pandaTypeFlag TypeFlagsConst(es2panda_Context context);
/* bool HasTypeFlag(TypeFlag typeFlag) const */
    [get] boolean HasTypeFlagConst(es2panda_Context context, Es2pandaTypeFlag typeFlag);
/* void AddTypeFlag(TypeFlag typeFlag) */
    void AddTypeFlag(es2panda_Context context, Es2pandaTypeFlag typeFlag);
/* void RemoveTypeFlag(TypeFlag typeFlag) */
    void RemoveTypeFlag(es2panda_Context context, Es2pandaTypeFlag typeFlag);
/* uint64_t Id() const */
    [get] u64 IdConst(es2panda_Context context);
/* void SetVariable(varbinder::Variable *variable) */
    void SetVariable(es2panda_Context context, Variable variable);
/* varbinder::Variable *Variable() */
    [get] Variable Variable(es2panda_Context context);
/* const varbinder::Variable *Variable() const */
    [get] Variable VariableConst(es2panda_Context context);
/* util::StringView ToAssemblerTypeView(ArenaAllocator *allocator) const */
    String ToAssemblerTypeViewConst(es2panda_Context context);
/* bool IsLambdaObject() const */
    boolean IsLambdaObjectConst(es2panda_Context context);
/* [[nodiscard]] std::string ToString() const */
    String ToStringConst(es2panda_Context context);
/* [[nodiscard]] std::string ToStringPrecise() const */
    String ToStringPreciseConst(es2panda_Context context);
/* std::string ToStringAsSrc() const */
    String ToStringAsSrcConst(es2panda_Context context);
/* virtual TypeFacts GetTypeFacts() const */
    Es2pandaTypeFacts GetTypeFactsConst(es2panda_Context context);
/* virtual uint32_t Rank() const */
    [get] u32 RankConst(es2panda_Context context);
/* virtual void Identical(TypeRelation *relation, Type *other) */
    void Identical(es2panda_Context context, es2panda_TypeRelation relation, Type other);
/* virtual void AssignmentTarget(TypeRelation *relation, Type *source) = 0 */
    void AssignmentTarget(es2panda_Context context, es2panda_TypeRelation relation, Type source);
/* virtual bool AssignmentSource(TypeRelation *relation, Type *target) */
    boolean AssignmentSource(es2panda_Context context, es2panda_TypeRelation relation, Type target);
/* virtual void Compare(TypeRelation *relation, Type *other) */
    void Compare(es2panda_Context context, es2panda_TypeRelation relation, Type other);
/* virtual void Cast(TypeRelation *relation, Type *target) */
    void Cast(es2panda_Context context, es2panda_TypeRelation relation, Type target);
/* virtual void CastTarget(TypeRelation *relation, Type *source) */
    void CastTarget(es2panda_Context context, es2panda_TypeRelation relation, Type source);
/* virtual void IsSupertypeOf(TypeRelation *relation, Type *source) */
    void IsSupertypeOf(es2panda_Context context, es2panda_TypeRelation relation, Type source);
/* virtual void IsSubtypeOf(TypeRelation *relation, Type *target) */
    void IsSubtypeOf(es2panda_Context context, es2panda_TypeRelation relation, Type target);
/* virtual Type *AsSuper(Checker *checker, varbinder::Variable *sourceVar) */
    Type AsSuper(es2panda_Context context, Variable sourceVar);
/* [[nodiscard]] static std::uint32_t GetPrecedence(Type const *type) noexcept */
    u32 GetPrecedence(es2panda_Context context, Type type);
/* virtual Type *Instantiate(ArenaAllocator *allocator, TypeRelation *relation, GlobalTypesHolder *globalTypes) */
    Type Instantiate(es2panda_Context context, es2panda_TypeRelation relation, es2panda_GlobalTypesHolder globalTypes);
/* [[nodiscard]] virtual Type *Clone(Checker *checker) */
    Type Clone(es2panda_Context context);
/* virtual Type *Substitute(TypeRelation *relation, const Substitution *substitution) */
    Type Substitute(es2panda_Context context, es2panda_TypeRelation relation, sequence<ETSTypeParameter> substitutionKeyArray, sequence<Type> substitutionValueArray, u32 substitutionLen);
};

[Entity=Class] interface ETSTupleType {
    static ETSTupleType Create(es2panda_Context context, Type elementType, Type spreadType);

    static ETSTupleType Create1(es2panda_Context context, i32 size, Type elementType, Type spreadType);

    static ETSTupleType Create2(es2panda_Context context, sequence<Type> typeList, u32 typeListLen, Type elementType, Type spreadType);



/* [[nodiscard]] TupleSizeType GetTupleSize() const */
    [get] i32 GetTupleSizeConst(es2panda_Context context);
/* [[nodiscard]] TupleSizeType GetMinTupleSize() const */
    [get] i32 GetMinTupleSizeConst(es2panda_Context context);
/* [[nodiscard]] ArenaVector<Type *> const &GetTupleTypesList() const */
    [get] sequence<Type> GetTupleTypesListConst(es2panda_Context context);
/* [[nodiscard]] bool HasSpreadType() const */
    [get] boolean HasSpreadTypeConst(es2panda_Context context);
/* [[nodiscard]] Type *GetSpreadType() const */
    [get] Type GetSpreadTypeConst(es2panda_Context context);
/* void SetSpreadType(Type *const newSpreadType) */
    void SetSpreadType(es2panda_Context context, Type newSpreadType);
/* [[nodiscard]] Type *GetTypeAtIndex(int32_t index) const */
    Type GetTypeAtIndexConst(es2panda_Context context, i32 index);
};

[Entity=Class] interface TypeRelation {
    static es2panda_TypeRelation Create(es2panda_Context context);



/* bool IsTrue() const */
    [get] boolean IsTrueConst(es2panda_Context context);
/* bool IsError() const */
    [get] boolean IsErrorConst(es2panda_Context context);
/* bool ApplyNarrowing() const */
    [get] boolean ApplyNarrowingConst(es2panda_Context context);
/* bool ApplyWidening() const */
    [get] boolean ApplyWideningConst(es2panda_Context context);
/* bool ApplyBoxing() const */
    [get] boolean ApplyBoxingConst(es2panda_Context context);
/* bool ApplyUnboxing() const */
    [get] boolean ApplyUnboxingConst(es2panda_Context context);
/* bool ApplyStringToChar() const */
    [get] boolean ApplyStringToCharConst(es2panda_Context context);
/* bool NoReturnTypeCheck() const */
    [get] boolean NoReturnTypeCheckConst(es2panda_Context context);
/* bool DirectReturn() const */
    [get] boolean DirectReturnConst(es2panda_Context context);
/* bool InAssignmentContext() const */
    [get] boolean InAssignmentContextConst(es2panda_Context context);
/* bool OnlyCheckWidening() const */
    [get] boolean OnlyCheckWideningConst(es2panda_Context context);
/* bool OnlyCheckBoxingUnboxing() const */
    [get] boolean OnlyCheckBoxingUnboxingConst(es2panda_Context context);
/* bool IgnoreTypeParameters() const */
    [get] boolean IgnoreTypeParametersConst(es2panda_Context context);
/* [[nodiscard]] bool InCastingContext() const noexcept */
    [get] boolean InCastingContextConst(es2panda_Context context);
/* [[nodiscard]] bool UncheckedCast() const noexcept */
    [get] boolean UncheckedCastConst(es2panda_Context context);
/* [[nodiscard]] bool NoThrow() const noexcept */
    [get] boolean NoThrowConst(es2panda_Context context);
/* [[nodiscard]] bool NoThrowGenericTypeAlias() const noexcept */
    [get] boolean NoThrowGenericTypeAliasConst(es2panda_Context context);
/* [[nodiscard]] bool IsOverridingCheck() const noexcept */
    [get] boolean IsOverridingCheckConst(es2panda_Context context);
/* [[nodiscard]] bool IsBridgeCheck() const noexcept */
    [get] boolean IsBridgeCheckConst(es2panda_Context context);
/* [[nodiscard]] TypeRelationFlag GetTypeRelationFlags() const noexcept */
    [get] Es2pandaTypeRelationFlag GetTypeRelationFlagsConst(es2panda_Context context);
/* ir::Expression *GetNode() const */
    [get] Expression GetNodeConst(es2panda_Context context);
/* void IncreaseTypeRecursionCount(Type *const type) */
    void IncreaseTypeRecursionCount(es2panda_Context context, Type type);
/* bool IsAtTypeDepthLimit(Type *const type) */
    boolean IsAtTypeDepthLimit(es2panda_Context context, Type type);
/* void DecreaseTypeRecursionCount(Type *const type) */
    void DecreaseTypeRecursionCount(es2panda_Context context, Type type);
/* bool IsIdenticalTo(Type const *source, Type const *target) */
    [get] boolean IsIdenticalTo(es2panda_Context context, Type source, Type target);
/* bool IsIdenticalTo(Type *source, Type *target) */
    boolean IsIdenticalTo1(es2panda_Context context, Type source, Type target);
/* bool IsIdenticalTo(IndexInfo *source, IndexInfo *target) */
    boolean IsIdenticalTo2(es2panda_Context context, es2panda_IndexInfo source, es2panda_IndexInfo target);
/* bool IsCompatibleTo(Signature *source, Signature *target) */
    boolean IsCompatibleTo(es2panda_Context context, es2panda_Signature source, es2panda_Signature target);
/* bool IsAssignableTo(Type *source, Type *target) */
    boolean IsAssignableTo(es2panda_Context context, Type source, Type target);
/* bool IsComparableTo(Type *source, Type *target) */
    boolean IsComparableTo(es2panda_Context context, Type source, Type target);
/* bool IsCastableTo(Type *const source, Type *const target) */
    boolean IsCastableTo(es2panda_Context context, Type source, Type target);
/* bool IsSupertypeOf(Type const *super, Type const *sub) */
    [get] boolean IsSupertypeOf(es2panda_Context context, Type super, Type sub);
/* bool IsSupertypeOf(Type *super, Type *sub) */
    boolean IsSupertypeOf1(es2panda_Context context, Type super, Type sub);
/* void RaiseError(const std::string &errMsg, const lexer::SourcePosition &loc) const */
    void RaiseErrorConst(es2panda_Context context, String errMsg, es2panda_SourcePosition loc);
/* void SetNode(ir::Expression *node) */
    void SetNode(es2panda_Context context, Expression node);
/* void SetFlags(TypeRelationFlag flags) */
    void SetFlags(es2panda_Context context, Es2pandaTypeRelationFlag flags);
/* void RemoveFlags(TypeRelationFlag flags) */
    void RemoveFlags(es2panda_Context context, Es2pandaTypeRelationFlag flags);
};

[Entity=Class] interface EnumLiteralType {
    static EnumLiteralType Create(es2panda_Context context, String name, Scope scope, Es2pandaEnumLiteralTypeKind kind);



/* varbinder::Scope *Scope() */
    [get] Scope Scope(es2panda_Context context);
/* const varbinder::Scope *Scope() const */
    [get] Scope ScopeConst(es2panda_Context context);
/* EnumLiteralTypeKind Kind() const */
    [get] Es2pandaEnumLiteralTypeKind KindConst(es2panda_Context context);
};

[Entity=Class] interface FloatType {
    static FloatType Create(es2panda_Context context);

    static FloatType Create1(es2panda_Context context, f32 value);



/* UType GetValue() const */
    [get] f32 GetValueConst(es2panda_Context context);
};

[Entity=Class] interface ByteType {
    static ByteType Create(es2panda_Context context);

    static ByteType Create1(es2panda_Context context, i8 value);



/* UType GetValue() const */
    [get] i8 GetValueConst(es2panda_Context context);
};

[Entity=Class] interface ETSTypeParameter {
    static ETSTypeParameter Create(es2panda_Context context);

    static ETSTypeParameter Create1(es2panda_Context context, Type defaultType, Type constraintType);



/* void SetDeclNode(ir::TSTypeParameter *decl) noexcept */
    void SetDeclNode(es2panda_Context context, TSTypeParameter decl);
/* [[nodiscard]] ir::TSTypeParameter *GetDeclNode() const noexcept */
    [get] TSTypeParameter GetDeclNodeConst(es2panda_Context context);
/* [[nodiscard]] ETSTypeParameter *GetOriginal() const noexcept */
    ETSTypeParameter GetOriginalConst(es2panda_Context context);
/* [[nodiscard]] util::StringView const &Name() const noexcept */
    String NameConst(es2panda_Context context);
/* void SetDefaultType(Type *type) noexcept */
    void SetDefaultType(es2panda_Context context, Type type);
/* [[nodiscard]] Type *GetDefaultType() const noexcept */
    [get] Type GetDefaultTypeConst(es2panda_Context context);
/* void SetConstraintType(Type *type) noexcept */
    void SetConstraintType(es2panda_Context context, Type type);
/* [[nodiscard]] Type *GetConstraintType() const */
    Type GetConstraintTypeConst(es2panda_Context context);
};

[Entity=Class] interface ETSUnionType {
    static ETSUnionType CreateChecker(es2panda_Context context, sequence<Type> constituentTypes, u32 constituentTypesLen);



/* [[nodiscard]] const ArenaVector<Type *> &ConstituentTypes() const noexcept */
    [get] sequence<Type> CheckerConstituentTypesConst(es2panda_Context context);
/* Type *FindTypeIsCastableToThis(ir::Expression *node, TypeRelation *relation, Type *source) const */
    Type CheckerFindTypeIsCastableToThisConst(es2panda_Context context, Expression node, es2panda_TypeRelation relation, Type source);
/* Type *FindTypeIsCastableToSomeType(ir::Expression *node, TypeRelation *relation, Type *target) const */
    Type CheckerFindTypeIsCastableToSomeTypeConst(es2panda_Context context, Expression node, es2panda_TypeRelation relation, Type target);
/* Type *FindUnboxableType() const */
    Type CheckerFindUnboxableTypeConst(es2panda_Context context);
/* bool HasObjectType(ETSObjectFlags flag) const */
    boolean CheckerHasObjectTypeConst(es2panda_Context context, Es2pandaETSObjectFlags flag);
/* bool HasUndefinedType() const */
    boolean CheckerHasUndefinedTypeConst(es2panda_Context context);
/* bool HasType(Type *type) const */
    boolean CheckerHasTypeConst(es2panda_Context context, Type type);
/* bool HasNullishType(const ETSChecker *checker) const */
    boolean CheckerHasNullishTypeConst(es2panda_Context context);
/* bool IsOverlapWith(TypeRelation *relation, Type *type) */
    boolean CheckerIsOverlapWith(es2panda_Context context, es2panda_TypeRelation relation, Type type);
/* Type *FindExactOrBoxedType(ETSChecker *checker, Type *type) const */
    Type CheckerFindExactOrBoxedTypeConst(es2panda_Context context, Type type);
/* static void NormalizeTypes(TypeRelation *relation, ArenaVector<Type *> &types) */
    void CheckerNormalizeTypes(es2panda_Context context, es2panda_TypeRelation relation, sequence<Type> types, u32 typesLen);
/* static ArenaVector<Type *> GetNonConstantTypes(ETSChecker *checker, const ArenaVector<Type *> &types) */
    sequence<Type> CheckerGetNonConstantTypes(es2panda_Context context, sequence<Type> types, u32 typesLen);
/* Type *GetAssemblerLUB() const */
    [get] Type CheckerGetAssemblerLUBConst(es2panda_Context context);
/* [[nodiscard]] checker::Type *GetAssignableType(ETSChecker *checker, checker::Type *sourceType) const noexcept */
    Type CheckerGetAssignableTypeConst(es2panda_Context context, Type sourceType);
/* [[nodiscard]] std::pair<checker::Type *, checker::Type *> GetComplimentaryType(ETSChecker *checker,
                                                                                   checker::Type *sourceType) */
    Type CheckerGetComplimentaryType(es2panda_Context context, Type sourceType, sequence<Type> returnTypeSecond);
};

[Entity=Class] interface EnumType {
    static EnumType Create(es2panda_Context context, Variable enumLiteralVar, EnumVariable enumVar);



/* const varbinder::Variable *EnumLiteralVar() const */
    [get] Variable EnumLiteralVarConst(es2panda_Context context);
/* const varbinder::EnumVariable *EnumVar() const */
    [get] EnumVariable EnumVarConst(es2panda_Context context);
};

[Entity=Class] interface WildcardType {
    static WildcardType Create(es2panda_Context context);



};

[Entity=Class] interface ETSBooleanType {
    static ETSBooleanType Create(es2panda_Context context);

    static ETSBooleanType Create1(es2panda_Context context, boolean value);



/* UType GetValue() const */
    [get] boolean GetValueConst(es2panda_Context context);
};

[Entity=Class] interface BooleanLiteralType {
    static BooleanLiteralType Create(es2panda_Context context, boolean value);



/* bool Value() const */
    [get] boolean ValueConst(es2panda_Context context);
};

[Entity=Class] interface ETSObjectType {
    static ETSObjectType Create(es2panda_Context context, String name, String internalName, AstNode declNode, Es2pandaETSObjectFlags flags);



/* void AddConstructSignature(Signature *signature) */
    void AddConstructSignature(es2panda_Context context, es2panda_Signature signature);
/* void AddConstructSignature(const ArenaVector<Signature *> &signatures) const */
    void AddConstructSignatureConst(es2panda_Context context, sequence<es2panda_Signature> signatures, u32 signaturesLen);
/* void AddInterface(ETSObjectType *interface) */
    void AddInterface(es2panda_Context context, ETSObjectType interface);
/* void SetSuperType(ETSObjectType *super) */
    void SetSuperType(es2panda_Context context, ETSObjectType super);
/* void SetTypeArguments(ArenaVector<Type *> &&typeArgs) */
    void SetTypeArguments(es2panda_Context context, sequence<Type> typeArgs, u32 typeArgsLen);
/* void SetEnclosingType(ETSObjectType *enclosingType) */
    void SetEnclosingType(es2panda_Context context, ETSObjectType enclosingType);
/* void SetRelation(TypeRelation *relation) */
    void SetRelation(es2panda_Context context, es2panda_TypeRelation relation);
/* TypeRelation *GetRelation() const */
    [get] es2panda_TypeRelation GetRelationConst(es2panda_Context context);
/* PropertyMap InstanceMethods() const */
    sequence<String> InstanceMethodsConst(es2panda_Context context, sequence<sequence<LocalVariable>> arenaMapValueArray);
/* PropertyMap InstanceFields() const */
    sequence<String> InstanceFieldsConst(es2panda_Context context, sequence<sequence<LocalVariable>> arenaMapValueArray);
/* PropertyMap InstanceDecls() const */
    sequence<String> InstanceDeclsConst(es2panda_Context context, sequence<sequence<LocalVariable>> arenaMapValueArray);
/* PropertyMap StaticMethods() const */
    sequence<String> StaticMethodsConst(es2panda_Context context, sequence<sequence<LocalVariable>> arenaMapValueArray);
/* PropertyMap StaticFields() const */
    sequence<String> StaticFieldsConst(es2panda_Context context, sequence<sequence<LocalVariable>> arenaMapValueArray);
/* PropertyMap StaticDecls() const */
    sequence<String> StaticDeclsConst(es2panda_Context context, sequence<sequence<LocalVariable>> arenaMapValueArray);
/* const ArenaVector<Type *> &TypeArguments() const */
    [get] sequence<Type> TypeArgumentsConst(es2panda_Context context);
/* const ArenaVector<Signature *> &ConstructSignatures() const */
    sequence<es2panda_Signature> ConstructSignaturesConst(es2panda_Context context);
/* ArenaVector<Signature *> &ConstructSignatures() */
    sequence<es2panda_Signature> ConstructSignatures(es2panda_Context context);
/* const ArenaVector<ETSObjectType *> &Interfaces() const */
    [get] sequence<ETSObjectType> InterfacesConst(es2panda_Context context);
/* ArenaVector<ETSObjectType *> &Interfaces() */
    [get] sequence<ETSObjectType> Interfaces(es2panda_Context context);
/* ir::AstNode *GetDeclNode() const */
    [get] AstNode GetDeclNodeConst(es2panda_Context context);
/* const ETSObjectType *SuperType() const */
    [get] ETSObjectType SuperTypeConst(es2panda_Context context);
/* ETSObjectType *SuperType() */
    [get] ETSObjectType SuperType(es2panda_Context context);
/* const ETSObjectType *EnclosingType() const */
    [get] ETSObjectType EnclosingTypeConst(es2panda_Context context);
/* ETSObjectType *EnclosingType() */
    [get] ETSObjectType EnclosingType(es2panda_Context context);
/* ETSObjectType *OutermostClass() */
    ETSObjectType OutermostClass(es2panda_Context context);
/* void SetBaseType(ETSObjectType *baseType) */
    void SetBaseType(es2panda_Context context, ETSObjectType baseType);
/* ETSObjectType *GetBaseType() noexcept */
    [get] ETSObjectType GetBaseType(es2panda_Context context);
/* const ETSObjectType *GetBaseType() const noexcept */
    [get] ETSObjectType GetBaseTypeConst(es2panda_Context context);
/* ETSObjectType *GetOriginalBaseType() const noexcept */
    [get] ETSObjectType GetOriginalBaseTypeConst(es2panda_Context context);
/* bool IsGlobalETSObjectType() const noexcept */
    [get] boolean IsGlobalETSObjectTypeConst(es2panda_Context context);
/* bool IsPropertyInherited(const varbinder::Variable *var) */
    boolean IsPropertyInherited(es2panda_Context context, Variable var);
/* bool IsPropertyOfAscendant(const varbinder::Variable *var) const */
    boolean IsPropertyOfAscendantConst(es2panda_Context context, Variable var);
/* bool IsSignatureInherited(Signature *signature) */
    boolean IsSignatureInherited(es2panda_Context context, es2panda_Signature signature);
/* bool IsDescendantOf(const ETSObjectType *ascendant) const */
    boolean IsDescendantOfConst(es2panda_Context context, ETSObjectType ascendant);
/* const util::StringView &Name() const */
    [get] String NameConst(es2panda_Context context);
/* const util::StringView &AssemblerName() const */
    [get] String AssemblerNameConst(es2panda_Context context);
/* ETSObjectFlags ObjectFlags() const */
    [get] Es2pandaETSObjectFlags ObjectFlagsConst(es2panda_Context context);
/* void AddObjectFlag(ETSObjectFlags flag) */
    void AddObjectFlag(es2panda_Context context, Es2pandaETSObjectFlags flag);
/* void RemoveObjectFlag(ETSObjectFlags flag) */
    void RemoveObjectFlag(es2panda_Context context, Es2pandaETSObjectFlags flag);
/* bool HasObjectFlag(ETSObjectFlags flag) const */
    [get] boolean HasObjectFlagConst(es2panda_Context context, Es2pandaETSObjectFlags flag);
/* ETSFunctionType *GetFunctionalInterfaceInvokeType() const */
    ETSFunctionType GetFunctionalInterfaceInvokeTypeConst(es2panda_Context context);
/* ETSObjectFlags BuiltInKind() const */
    [get] Es2pandaETSObjectFlags BuiltInKindConst(es2panda_Context context);
/* ETSObjectFlags UnboxableKind() const */
    [get] Es2pandaETSObjectFlags UnboxableKindConst(es2panda_Context context);
/* ETSEnumType *GetUnboxedEnumType() const */
    ETSEnumType GetUnboxedEnumTypeConst(es2panda_Context context);
/* ETSObjectType *GetInstantiatedType(util::StringView hash) */
    ETSObjectType GetInstantiatedType(es2panda_Context context, String hash);
/* varbinder::Scope *GetTypeArgumentScope() const */
    Scope GetTypeArgumentScopeConst(es2panda_Context context);
/* InstantiationMap &GetInstantiationMap() */
    [get] sequence<String> GetInstantiationMap(es2panda_Context context, sequence<sequence<ETSObjectType>> arenaMapValueArray);
/* [[nodiscard]] bool IsGeneric() const noexcept */
    [get] boolean IsGenericConst(es2panda_Context context);
/* [[nodiscard]] bool IsPartial() const noexcept */
    [get] boolean IsPartialConst(es2panda_Context context);
/* std::vector<const varbinder::LocalVariable *> ForeignProperties() const */
    sequence<LocalVariable> ForeignPropertiesConst(es2panda_Context context);
/* varbinder::LocalVariable *GetProperty(const util::StringView &name, PropertySearchFlags flags) const */
    LocalVariable GetPropertyConst(es2panda_Context context, String name, Es2pandaPropertySearchFlags flags);
/* std::vector<varbinder::LocalVariable *> GetAllProperties() const */
    sequence<LocalVariable> GetAllPropertiesConst(es2panda_Context context);
/* varbinder::LocalVariable *CopyProperty(varbinder::LocalVariable *prop, ArenaAllocator *allocator,
                                           TypeRelation *relation, GlobalTypesHolder *globalTypes) */
    LocalVariable CopyProperty(es2panda_Context context, LocalVariable prop, es2panda_TypeRelation relation, es2panda_GlobalTypesHolder globalTypes);
/* std::vector<varbinder::LocalVariable *> Methods() const */
    sequence<LocalVariable> MethodsConst(es2panda_Context context);
/* std::vector<varbinder::LocalVariable *> Fields() const */
    sequence<LocalVariable> FieldsConst(es2panda_Context context);
/* varbinder::LocalVariable *CreateSyntheticVarFromEverySignature(const util::StringView &name,
                                                                   PropertySearchFlags flags) const */
    LocalVariable CreateSyntheticVarFromEverySignatureConst(es2panda_Context context, String name, Es2pandaPropertySearchFlags flags);
/* varbinder::LocalVariable *CollectSignaturesForSyntheticType(ETSFunctionType *funcType, const util::StringView &name,
                                                                PropertySearchFlags flags) const */
    LocalVariable CollectSignaturesForSyntheticTypeConst(es2panda_Context context, ETSFunctionType funcType, String name, Es2pandaPropertySearchFlags flags);
/* bool CheckIdenticalFlags(ETSObjectType *other) const */
    boolean CheckIdenticalFlagsConst(es2panda_Context context, ETSObjectType other);
/* void Iterate(const PropertyTraverser &cb) const */
    void IterateConst(es2panda_Context context, PropertyTraverser cb);
/* void UpdateTypeProperties(checker::ETSChecker *checker, PropertyProcesser const &func) */
    void UpdateTypeProperties(es2panda_Context context, PropertyProcessor func);
/* ETSObjectType *Substitute(TypeRelation *relation, const Substitution *substitution, bool cache) */
    ETSObjectType Substitute(es2panda_Context context, es2panda_TypeRelation relation, sequence<ETSTypeParameter> substitutionKeyArray, sequence<Type> substitutionValueArray, u32 substitutionLen, boolean cache);
/* ETSObjectType *SubstituteArguments(TypeRelation *relation, ArenaVector<Type *> const &arguments) */
    ETSObjectType SubstituteArguments(es2panda_Context context, es2panda_TypeRelation relation, sequence<Type> arguments, u32 argumentsLen);
/* bool CastNumericObject(TypeRelation *relation, Type *target) */
    boolean CastNumericObject(es2panda_Context context, es2panda_TypeRelation relation, Type target);
/* bool DefaultObjectTypeChecks(const ETSChecker *etsChecker, TypeRelation *relation, Type *source) */
    boolean DefaultObjectTypeChecks(es2panda_Context context, es2panda_TypeRelation relation, Type source);
/* static std::string NameToDescriptor(util::StringView name) */
    String NameToDescriptor(es2panda_Context context, String name);
/* void AddReExports(ETSObjectType *reExport) */
    void AddReExports(es2panda_Context context, ETSObjectType reExport);
/* void AddReExportAlias(util::StringView const &value, util::StringView const &key) */
    void AddReExportAlias(es2panda_Context context, String value, String key);
/* util::StringView GetReExportAliasValue(util::StringView const &key) const */
    String GetReExportAliasValueConst(es2panda_Context context, String key);
/* bool IsReExportHaveAliasValue(util::StringView const &key) const */
    boolean IsReExportHaveAliasValueConst(es2panda_Context context, String key);
/* const ArenaVector<ETSObjectType *> &ReExports() const */
    sequence<ETSObjectType> ReExportsConst(es2panda_Context context);
/* [[nodiscard]] static std::uint32_t GetPrecedence(checker::ETSChecker *checker, ETSObjectType const *type) noexcept */
    u32 GetPrecedence(es2panda_Context context, ETSObjectType type);
/* bool IsPropertiesInstantiated() const */
    [get] boolean IsPropertiesInstantiatedConst(es2panda_Context context);
};

[Entity=Class] interface ArrayType {
    static ArrayType Create(es2panda_Context context, Type elementType);



/* Type *ElementType() */
    [get] Type ElementType(es2panda_Context context);
/* const Type *ElementType() const */
    [get] Type ElementTypeConst(es2panda_Context context);
};

[Entity=Class] interface ShortType {
    static ShortType Create(es2panda_Context context);

    static ShortType Create1(es2panda_Context context, i16 value);



/* UType GetValue() const */
    [get] i16 GetValueConst(es2panda_Context context);
};

[Entity=Class] interface Checker {


};

[Entity=Class] interface ETSChecker {


};

[Entity=Class] interface CheckerContext {
    static es2panda_CheckerContext Create(es2panda_Context context, Es2pandaCheckerStatus newStatus);

    static es2panda_CheckerContext Create1(es2panda_Context context, Es2pandaCheckerStatus newStatus, ETSObjectType containingClass);

    static es2panda_CheckerContext Create2(es2panda_Context context, Es2pandaCheckerStatus newStatus, ETSObjectType containingClass, es2panda_Signature containingSignature);



/* [[nodiscard]] const CapturedVarsMap &CapturedVars() const noexcept */
    [get] sequence<Variable> CapturedVarsConst(es2panda_Context context, sequence<sequence<es2panda_SourcePosition>> arenaMapValueArray);
/* [[nodiscard]] CapturedVarsMap &CapturedVars() noexcept */
    [get] sequence<Variable> CapturedVars(es2panda_Context context, sequence<sequence<es2panda_SourcePosition>> arenaMapValueArray);
/* [[nodiscard]] const CheckerStatus &Status() const noexcept */
    [get] Es2pandaCheckerStatus StatusConst(es2panda_Context context);
/* [[nodiscard]] ETSObjectType *ContainingClass() const noexcept */
    [get] ETSObjectType ContainingClassConst(es2panda_Context context);
/* [[nodiscard]] Signature *ContainingSignature() const noexcept */
    [get] es2panda_Signature ContainingSignatureConst(es2panda_Context context);
/* [[nodiscard]] CheckerStatus &Status() noexcept */
    [get] Es2pandaCheckerStatus Status(es2panda_Context context);
/* void SetContainingSignature(Signature *containingSignature) noexcept */
    void SetContainingSignature(es2panda_Context context, es2panda_Signature containingSignature);
/* void SetContainingClass(ETSObjectType *containingClass) noexcept */
    void SetContainingClass(es2panda_Context context, ETSObjectType containingClass);
/* void AddCapturedVar(varbinder::Variable *var, const lexer::SourcePosition &pos) */
    void AddCapturedVar(es2panda_Context context, Variable var, es2panda_SourcePosition pos);
/* [[nodiscard]] ir::ArrowFunctionExpression *ContainingLambda() const noexcept */
    [get] ArrowFunctionExpression ContainingLambdaConst(es2panda_Context context);
/* void SetContainingLambda(ir::ArrowFunctionExpression *containingLambda) noexcept */
    void SetContainingLambda(es2panda_Context context, ArrowFunctionExpression containingLambda);
/* void ClearSmartCasts() noexcept */
    void ClearSmartCasts(es2panda_Context context);
/* void RemoveSmartCast(varbinder::Variable const *const variable) noexcept */
    void RemoveSmartCast(es2panda_Context context, Variable variable);
/* void SetSmartCast(varbinder::Variable const *const variable, checker::Type *const smartType) noexcept */
    void SetSmartCast(es2panda_Context context, Variable variable, Type smartType);
/* [[nodiscard]] checker::Type *GetSmartCast(varbinder::Variable const *const variable) const noexcept */
    Type GetSmartCastConst(es2panda_Context context, Variable variable);
/* [[nodiscard]] bool IsInTestExpression() const noexcept */
    [get] boolean IsInTestExpressionConst(es2panda_Context context);
/* [[nodiscard]] bool IsInLoop() const noexcept */
    [get] boolean IsInLoopConst(es2panda_Context context);
/* void EnterPath() noexcept */
    void EnterPath(es2panda_Context context);
/* [[nodiscard]] bool ExitPath() noexcept */
    boolean ExitPath(es2panda_Context context);
/* void CheckTestSmartCastCondition(lexer::TokenType operatorType) */
    void CheckTestSmartCastCondition(es2panda_Context context, Es2pandaTokenType operatorType);
/* void CheckIdentifierSmartCastCondition(ir::Identifier const *identifier) noexcept */
    void CheckIdentifierSmartCastCondition(es2panda_Context context, Identifier identifier);
/* void CheckUnarySmartCastCondition(ir::UnaryExpression const *unaryExpression) noexcept */
    void CheckUnarySmartCastCondition(es2panda_Context context, UnaryExpression unaryExpression);
/* void CheckBinarySmartCastCondition(ir::BinaryExpression *binaryExpression) noexcept */
    void CheckBinarySmartCastCondition(es2panda_Context context, BinaryExpression binaryExpression);
/* void OnBreakStatement(ir::BreakStatement const *breakStatement) */
    void OnBreakStatement(es2panda_Context context, BreakStatement breakStatement);
/* void CombineBreakSmartCasts(ir::Statement const *targetStatement) */
    void CombineBreakSmartCasts(es2panda_Context context, Statement targetStatement);
};

[Entity=Class] interface ResolveResult {
    static es2panda_ResolveResult Create(es2panda_Context context, Variable v, Es2pandaResolvedKind kind);



/* varbinder::Variable *Variable() */
    [get] Variable Variable(es2panda_Context context);
/* ResolvedKind Kind() */
    [get] Es2pandaResolvedKind Kind(es2panda_Context context);
};


[Entity=Class] interface Variable {


/* [[nodiscard]] const Decl *Declaration() const noexcept */
    [get] Decl DeclarationConst(es2panda_Context context);
/* [[nodiscard]] Decl *Declaration() noexcept */
    [get] Decl Declaration(es2panda_Context context);
/* [[nodiscard]] VariableFlags Flags() const noexcept */
    [get] Es2pandaVariableFlags FlagsConst(es2panda_Context context);
/* [[nodiscard]] checker::Type *TsType() const */
    [get] Type TsTypeConst(es2panda_Context context);
/* [[nodiscard]] Scope *GetScope() const noexcept */
    [get] Scope GetScopeConst(es2panda_Context context);
/* void SetTsType(checker::Type *tsType) noexcept */
    void SetTsType(es2panda_Context context, Type tsType);
/* void SetScope(varbinder::Scope *scope) noexcept */
    void SetScope(es2panda_Context context, Scope scope);
/* void AddFlag(VariableFlags flag) noexcept */
    void AddFlag(es2panda_Context context, Es2pandaVariableFlags flag);
/* [[nodiscard]] bool HasFlag(VariableFlags flag) const noexcept */
    [get] boolean HasFlagConst(es2panda_Context context, Es2pandaVariableFlags flag);
/* void RemoveFlag(VariableFlags flag) noexcept */
    void RemoveFlag(es2panda_Context context, Es2pandaVariableFlags flag);
/* void Reset(Decl *decl, VariableFlags flags) noexcept */
    void Reset(es2panda_Context context, Decl decl, Es2pandaVariableFlags flags);
/* [[nodiscard]] bool LexicalBound() const noexcept */
    [get] boolean LexicalBoundConst(es2panda_Context context);
/* [[nodiscard]] const util::StringView &Name() const */
    String NameConst(es2panda_Context context);
/* virtual void SetLexical(Scope *scope) = 0 */
    void SetLexical(es2panda_Context context, Scope scope);
};

[Entity=Class] interface LocalVariable {
    static LocalVariable Create(es2panda_Context context, Decl decl, Es2pandaVariableFlags flags);

    static LocalVariable Create1(es2panda_Context context, Es2pandaVariableFlags flags);



/* void BindVReg(compiler::VReg vreg) */
    void BindVReg(es2panda_Context context, es2panda_VReg vreg);
/* void BindLexEnvSlot(uint32_t slot) */
    void BindLexEnvSlot(es2panda_Context context, u32 slot);
/* compiler::VReg Vreg() const */
    [get] es2panda_VReg VregConst(es2panda_Context context);
/* compiler::VReg &Vreg() */
    [get] es2panda_VReg Vreg(es2panda_Context context);
/* uint32_t LexIdx() const */
    u32 LexIdxConst(es2panda_Context context);
/* LocalVariable *Copy(ArenaAllocator *allocator, Decl *decl) const */
    LocalVariable CopyConst(es2panda_Context context, Decl decl);
};

[Entity=Class] interface GlobalVariable {
    static GlobalVariable Create(es2panda_Context context, Decl decl, Es2pandaVariableFlags flags);



};

[Entity=Class] interface ModuleVariable {
    static ModuleVariable Create(es2panda_Context context, Decl decl, Es2pandaVariableFlags flags);



/* compiler::VReg &ModuleReg() */
    [get] es2panda_VReg ModuleReg(es2panda_Context context);
/* compiler::VReg ModuleReg() const */
    [get] es2panda_VReg ModuleRegConst(es2panda_Context context);
/* const util::StringView &ExoticName() const */
    [get] String ExoticNameConst(es2panda_Context context);
/* util::StringView &ExoticName() */
    [get] String ExoticName(es2panda_Context context);
};

[Entity=Class] interface EnumVariable {
    static EnumVariable Create(es2panda_Context context, Decl decl, boolean backReference);



/* void SetValue(EnumMemberResult value) */
    void SetValue(es2panda_Context context, es2panda_variantDoubleCharArrayBool value);
/* const EnumMemberResult &Value() const */
    [get] es2panda_variantDoubleCharArrayBool ValueConst(es2panda_Context context);
/* bool BackReference() const */
    [get] boolean BackReferenceConst(es2panda_Context context);
/* void SetBackReference() */
    void SetBackReference(es2panda_Context context);
/* void ResetDecl(Decl *decl) */
    void ResetDecl(es2panda_Context context, Decl decl);
};

[Entity=Class] interface Scope {


/* virtual ScopeType Type() const = 0 */
    Es2pandaScopeType TypeConst(es2panda_Context context);
/* bool IsVariableScope() const */
    [get] boolean IsVariableScopeConst(es2panda_Context context);
/* bool IsFunctionVariableScope() const */
    [get] boolean IsFunctionVariableScopeConst(es2panda_Context context);
/* FunctionScope *AsFunctionVariableScope() */
    FunctionScope AsFunctionVariableScope(es2panda_Context context);
/* const FunctionScope *AsFunctionVariableScope() const */
    FunctionScope AsFunctionVariableScopeConst(es2panda_Context context);
/* VariableScope *AsVariableScope() */
    VariableScope AsVariableScope(es2panda_Context context);
/* const VariableScope *AsVariableScope() const */
    VariableScope AsVariableScopeConst(es2panda_Context context);
/* VariableScope *EnclosingVariableScope() */
    VariableScope EnclosingVariableScope(es2panda_Context context);
/* const VariableScope *EnclosingVariableScope() const */
    VariableScope EnclosingVariableScopeConst(es2panda_Context context);
/* ClassScope *EnclosingClassScope() */
    ClassScope EnclosingClassScope(es2panda_Context context);
/* const ClassScope *EnclosingClassScope() const */
    ClassScope EnclosingClassScopeConst(es2panda_Context context);
/* void AddFlag(ScopeFlags flag) */
    void AddFlag(es2panda_Context context, Es2pandaScopeFlags flag);
/* void ClearFlag(ScopeFlags flag) */
    void ClearFlag(es2panda_Context context, Es2pandaScopeFlags flag);
/* bool HasFlag(ScopeFlags flag) const */
    [get] boolean HasFlagConst(es2panda_Context context, Es2pandaScopeFlags flag);
/* ArenaVector<Decl *> &Decls() */
    [get] sequence<Decl> Decls(es2panda_Context context);
/* const ArenaVector<Decl *> &Decls() const */
    [get] sequence<Decl> DeclsConst(es2panda_Context context);
/* void SetParent(Scope *parent) */
    void SetParent(es2panda_Context context, Scope parent);
/* Scope *Parent() */
    [get] Scope Parent(es2panda_Context context);
/* const Scope *Parent() const */
    [get] Scope ParentConst(es2panda_Context context);
/* const compiler::IRNode *ScopeStart() const */
    [get] es2panda_IRNode ScopeStartConst(es2panda_Context context);
/* const compiler::IRNode *ScopeEnd() const */
    [get] es2panda_IRNode ScopeEndConst(es2panda_Context context);
/* void SetScopeStart(const compiler::IRNode *ins) */
    void SetScopeStart(es2panda_Context context, es2panda_IRNode ins);
/* void SetScopeEnd(const compiler::IRNode *ins) */
    void SetScopeEnd(es2panda_Context context, es2panda_IRNode ins);
/* ir::AstNode *Node() */
    [get] AstNode Node(es2panda_Context context);
/* const ir::AstNode *Node() const */
    [get] AstNode NodeConst(es2panda_Context context);
/* void BindNode(ir::AstNode *node) */
    void BindNode(es2panda_Context context, AstNode node);
/* Variable *AddDecl(ArenaAllocator *allocator, Decl *decl, ScriptExtension extension) */
    Variable AddDecl(es2panda_Context context, Decl decl);
/* Variable *AddTsDecl(ArenaAllocator *allocator, Decl *decl, ScriptExtension extension) */
    Variable AddTsDecl(es2panda_Context context, Decl decl);
/* virtual void MergeBindings(VariableMap const &bindings) */
    void MergeBindings(es2panda_Context context, sequence<String> bindingsKeyArray, sequence<Variable> bindingsValueArray, u32 bindingsLen);
/* virtual VariableMap::size_type EraseBinding(const util::StringView &name) */
    u32 EraseBinding(es2panda_Context context, String name);
/* const VariableMap &Bindings() const */
    [get] sequence<String> BindingsConst(es2panda_Context context, sequence<sequence<Variable>> arenaMapValueArray);
/* ArenaMap<util::StringView, Variable *> OrderedBindings(ArenaAllocator *allocator) const */
    sequence<String> OrderedBindingsConst(es2panda_Context context, sequence<sequence<Variable>> arenaMapValueArray);
/* virtual Variable *AddBinding(ArenaAllocator *allocator, Variable *currentVariable, Decl *newDecl,
                                 [[maybe_unused]] ScriptExtension extension) = 0 */
    Variable AddBinding(es2panda_Context context, Variable currentVariable, Decl newDecl);
/* virtual Variable *FindLocal(const util::StringView &name, ResolveBindingOptions options) const */
    Variable FindLocalConst(es2panda_Context context, String name, Es2pandaResolveBindingOptions options);
/* bool IsSuperscopeOf(const varbinder::Scope *subscope) const */
    boolean IsSuperscopeOfConst(es2panda_Context context, Scope subscope);
/* ConstScopeFindResult Find(const util::StringView &name,
                              ResolveBindingOptions options = ResolveBindingOptions::BINDINGS) const */
    es2panda_ScopeFindResult FindConst(es2panda_Context context, String name, Es2pandaResolveBindingOptions options);
/* ScopeFindResult Find(const util::StringView &name, ResolveBindingOptions options = ResolveBindingOptions::BINDINGS) */
    es2panda_ScopeFindResult Find(es2panda_Context context, String name, Es2pandaResolveBindingOptions options);
/* ConstScopeFindResult FindInGlobal(const util::StringView &name,
                                      ResolveBindingOptions options = ResolveBindingOptions::BINDINGS) const */
    es2panda_ScopeFindResult FindInGlobalConst(es2panda_Context context, String name, Es2pandaResolveBindingOptions options);
/* ConstScopeFindResult FindInFunctionScope(const util::StringView &name,
                                             ResolveBindingOptions options = ResolveBindingOptions::BINDINGS) const */
    es2panda_ScopeFindResult FindInFunctionScopeConst(es2panda_Context context, String name, Es2pandaResolveBindingOptions options);
/* Decl *FindDecl(const util::StringView &name) const */
    Decl FindDeclConst(es2panda_Context context, String name);
};

[Entity=Class] interface VariableScope {


/* uint32_t NextSlot() */
    [get] u32 NextSlot(es2panda_Context context);
/* uint32_t LexicalSlots() const */
    [get] u32 LexicalSlotsConst(es2panda_Context context);
/* bool NeedLexEnv() const */
    [get] boolean NeedLexEnvConst(es2panda_Context context);
/* uint32_t EvalBindings() const */
    [get] u32 EvalBindingsConst(es2panda_Context context);
/* void CheckDirectEval(public_lib::Context *context) */
    void CheckDirectEval(es2panda_Context context);
};

[Entity=Class] interface ParamScope {


/* ArenaVector<LocalVariable *> &Params() */
    [get] sequence<LocalVariable> Params(es2panda_Context context);
/* const ArenaVector<LocalVariable *> &Params() const */
    [get] sequence<LocalVariable> ParamsConst(es2panda_Context context);
};

[Entity=Class] interface FunctionParamScope {
    static FunctionParamScope Create(es2panda_Context context, Scope parent);



/* FunctionScope *GetFunctionScope() const */
    [get] FunctionScope GetFunctionScopeConst(es2panda_Context context);
/* void BindFunctionScope(FunctionScope *funcScope) */
    void BindFunctionScope(es2panda_Context context, FunctionScope funcScope);
/* LocalVariable *NameVar() const */
    [get] LocalVariable NameVarConst(es2panda_Context context);
/* void BindName(ArenaAllocator *allocator, util::StringView name) */
    void BindName(es2panda_Context context, String name);
};

[Entity=Class] interface LocalScope {
    static LocalScope Create(es2panda_Context context, Scope parent);

    static LocalScope Create1(es2panda_Context context, Scope parent, Es2pandaScopeFlags flags);



};

[Entity=Class] interface LocalScopeWithTypeAlias {
    static LocalScopeWithTypeAlias Create(es2panda_Context context, Scope parent);

    static LocalScopeWithTypeAlias Create1(es2panda_Context context, Scope parent, Es2pandaScopeFlags flags);



/* const LocalScope *TypeAliasScope() const */
    [get] LocalScope TypeAliasScopeConst(es2panda_Context context);
/* LocalScope *TypeAliasScope() */
    [get] LocalScope TypeAliasScope(es2panda_Context context);
};

[Entity=Class] interface FunctionScope {
    static FunctionScope Create(es2panda_Context context, Scope parent);



/* void BindName(util::StringView name) */
    void BindName(es2panda_Context context, String name);
/* void BindInternalName(util::StringView internalName) */
    void BindInternalName(es2panda_Context context, String internalName);
/* const util::StringView &Name() const */
    [get] String NameConst(es2panda_Context context);
/* const util::StringView &InternalName() const */
    [get] String InternalNameConst(es2panda_Context context);
/* const LocalScope *TypeAliasScope() const */
    [get] LocalScope TypeAliasScopeConst(es2panda_Context context);
/* Variable *InsertBindingIfAbsentInScope(ArenaAllocator *allocator, Variable *currentVariable, Decl *newDecl,
                                           VariableFlags flag) */
    Variable InsertBindingIfAbsentInScope(es2panda_Context context, Variable currentVariable, Decl newDecl, Es2pandaVariableFlags flag);
};

[Entity=Class] interface ClassScope {
    static ClassScope Create(es2panda_Context context, Scope parent);



/* LocalScope *StaticDeclScope() */
    [get] LocalScope StaticDeclScope(es2panda_Context context);
/* const LocalScope *StaticDeclScope() const */
    [get] LocalScope StaticDeclScopeConst(es2panda_Context context);
/* LocalScope *StaticFieldScope() */
    [get] LocalScope StaticFieldScope(es2panda_Context context);
/* const LocalScope *StaticFieldScope() const */
    [get] LocalScope StaticFieldScopeConst(es2panda_Context context);
/* LocalScope *StaticMethodScope() */
    [get] LocalScope StaticMethodScope(es2panda_Context context);
/* const LocalScope *StaticMethodScope() const */
    [get] LocalScope StaticMethodScopeConst(es2panda_Context context);
/* LocalScope *InstanceFieldScope() */
    [get] LocalScope InstanceFieldScope(es2panda_Context context);
/* const LocalScope *InstanceFieldScope() const */
    [get] LocalScope InstanceFieldScopeConst(es2panda_Context context);
/* LocalScope *InstanceMethodScope() */
    [get] LocalScope InstanceMethodScope(es2panda_Context context);
/* const LocalScope *InstanceMethodScope() const */
    [get] LocalScope InstanceMethodScopeConst(es2panda_Context context);
/* LocalScope *InstanceDeclScope() */
    [get] LocalScope InstanceDeclScope(es2panda_Context context);
/* const LocalScope *InstanceDeclScope() const */
    [get] LocalScope InstanceDeclScopeConst(es2panda_Context context);
/* uint32_t GetAndIncrementAnonymousClassIdx() const */
    [get] u32 GetAndIncrementAnonymousClassIdxConst(es2panda_Context context);
/* void SetBindingProps(Decl *newDecl, BindingProps *props, bool isStatic) */
    void SetBindingProps(es2panda_Context context, Decl newDecl, es2panda_BindingProps props, boolean isStatic);
};

[Entity=Class] interface AnnotationScope {
    static AnnotationScope Create(es2panda_Context context, Scope parent);



};

[Entity=Class] interface AnnotationParamScope {
    static AnnotationParamScope Create(es2panda_Context context, Scope parent);



};

[Entity=Class] interface CatchParamScope {
    static CatchParamScope Create(es2panda_Context context, Scope parent);



};

[Entity=Class] interface CatchScope {
    static CatchScope Create(es2panda_Context context, Scope parent);



};

[Entity=Class] interface LoopDeclarationScope {
    static LoopDeclarationScope Create(es2panda_Context context, Scope parent);



/* Scope *InitScope() */
    Scope InitScope(es2panda_Context context);
/* void ConvertToVariableScope(ArenaAllocator *allocator) */
    void ConvertToVariableScope(es2panda_Context context);
};

[Entity=Class] interface LoopScope {
    static LoopScope Create(es2panda_Context context, Scope parent);



/* LoopDeclarationScope *DeclScope() */
    [get] LoopDeclarationScope DeclScope(es2panda_Context context);
/* void BindDecls(LoopDeclarationScope *declScope) */
    void BindDecls(es2panda_Context context, LoopDeclarationScope declScope);
/* void ConvertToVariableScope(ArenaAllocator *allocator) */
    void ConvertToVariableScope(es2panda_Context context);
};

[Entity=Class] interface GlobalScope {
    static GlobalScope Create(es2panda_Context context);



/* [[nodiscard]] bool IsForeignBinding(const util::StringView &name) const */
    boolean IsForeignBindingConst(es2panda_Context context, String name);
};

[Entity=Class] interface ModuleScope {
    static ModuleScope Create(es2panda_Context context);



/* const LocalExportNameMap &LocalExports() const */
    [get] sequence<Variable> LocalExportsConst(es2panda_Context context, sequence<sequence<String>> arenaMapValueArray);
/* void AddImportDecl(ir::ImportDeclaration *importDecl, ImportDeclList &&decls) */
    void AddImportDecl(es2panda_Context context, ImportDeclaration importDecl, sequence<ImportDecl> decls, u32 declsLen);
/* void AddExportDecl(ir::AstNode *exportDecl, ExportDecl *decl) */
    void AddExportDecl(es2panda_Context context, AstNode exportDecl, ExportDecl decl);
/* void AddExportDecl(ir::AstNode *exportDecl, ExportDeclList &&decls) */
    void AddExportDecl1(es2panda_Context context, AstNode exportDecl, sequence<ExportDecl> decls, u32 declsLen);
/* bool ExportAnalysis() */
    boolean ExportAnalysis(es2panda_Context context);
};

[Entity=Class] interface VarBinder {


};

[Entity=Class] interface ETSBinder {


/* void ResolveReferenceForScope(ir::AstNode *node, Scope *scope) */
    void ResolveReferenceForScope(es2panda_Context context, AstNode node, Scope scope);
/* void ResolveReferencesForScope(ir::AstNode const *parent, Scope *scope) */
    void ResolveReferencesForScope(es2panda_Context context, AstNode parent, Scope scope);
/* void ResolveReferencesForScopeWithContext(ir::AstNode *node, Scope *scope) */
    void ResolveReferencesForScopeWithContext(es2panda_Context context, AstNode node, Scope scope);
};

[Entity=Class] interface Decl {


/* virtual DeclType Type() const = 0 */
    Es2pandaDeclType TypeConst(es2panda_Context context);
/* const util::StringView &Name() const */
    [get] String NameConst(es2panda_Context context);
/* ir::AstNode *Node() */
    [get] AstNode Node(es2panda_Context context);
/* const ir::AstNode *Node() const */
    [get] AstNode NodeConst(es2panda_Context context);
/* void BindNode(ir::AstNode *node) */
    void BindNode(es2panda_Context context, AstNode node);
/* bool IsLetOrConstDecl() const */
    [get] boolean IsLetOrConstDeclConst(es2panda_Context context);
/* bool PossibleTDZ() const */
    [get] boolean PossibleTDZConst(es2panda_Context context);
};

[Entity=Class] interface EnumLiteralDecl {
    static EnumLiteralDecl Create(es2panda_Context context, String name, boolean isConst);

    static EnumLiteralDecl Create1(es2panda_Context context, String name, AstNode declNode, boolean isConst);



/* bool IsConst() const */
    [get] boolean IsConstConst(es2panda_Context context);
/* void BindScope(LocalScope *scope) */
    void BindScope(es2panda_Context context, LocalScope scope);
/* LocalScope *Scope() */
    [get] LocalScope Scope(es2panda_Context context);
};

[Entity=Class] interface InterfaceDecl {
    static InterfaceDecl Create(es2panda_Context context, String name);

    static InterfaceDecl Create1(es2panda_Context context, String name, AstNode declNode);



};

[Entity=Class] interface ClassDecl {
    static ClassDecl Create(es2panda_Context context, String name);

    static ClassDecl Create1(es2panda_Context context, String name, AstNode node);



};

[Entity=Class] interface FunctionDecl {
    static FunctionDecl Create(es2panda_Context context, String name, AstNode node);



};

[Entity=Class] interface TypeParameterDecl {
    static TypeParameterDecl Create(es2panda_Context context, String name);



};

[Entity=Class] interface PropertyDecl {
    static PropertyDecl Create(es2panda_Context context, String name);



};

[Entity=Class] interface MethodDecl {
    static MethodDecl Create(es2panda_Context context, String name);



};

[Entity=Class] interface EnumDecl {
    static EnumDecl Create(es2panda_Context context, String name);



};

[Entity=Class] interface TypeAliasDecl {
    static TypeAliasDecl Create(es2panda_Context context, String name);

    static TypeAliasDecl Create1(es2panda_Context context, String name, AstNode node);



};

[Entity=Class] interface NameSpaceDecl {
    static NameSpaceDecl Create(es2panda_Context context, String name);



};

[Entity=Class] interface VarDecl {
    static VarDecl Create(es2panda_Context context, String name);



};

[Entity=Class] interface LetDecl {
    static LetDecl Create(es2panda_Context context, String name);

    static LetDecl Create1(es2panda_Context context, String name, AstNode declNode);



};

[Entity=Class] interface ConstDecl {
    static ConstDecl Create(es2panda_Context context, String name);

    static ConstDecl Create1(es2panda_Context context, String name, AstNode declNode);



};

[Entity=Class] interface LabelDecl {
    static LabelDecl Create(es2panda_Context context, String name);

    static LabelDecl Create1(es2panda_Context context, String name, AstNode declNode);



};

[Entity=Class] interface ReadonlyDecl {
    static ReadonlyDecl Create(es2panda_Context context, String name);

    static ReadonlyDecl Create1(es2panda_Context context, String name, AstNode declNode);



};

[Entity=Class] interface ParameterDecl {
    static ParameterDecl Create(es2panda_Context context, String name);



};

[Entity=Class] interface AnnotationDecl {
    static AnnotationDecl Create(es2panda_Context context, String name);

    static AnnotationDecl Create1(es2panda_Context context, String name, AstNode node);



};

[Entity=Class] interface AnnotationUsage {
    static AnnotationUsage CreateVarbinder(es2panda_Context context, String name);

    static AnnotationUsage CreateVarbinder1(es2panda_Context context, String name, AstNode node);



};

[Entity=Class] interface ImportDecl {
    static ImportDecl Create(es2panda_Context context, String importName, String localName);

    static ImportDecl Create1(es2panda_Context context, String importName, String localName, AstNode node);



/* const util::StringView &ImportName() const */
    [get] String ImportNameConst(es2panda_Context context);
/* const util::StringView &LocalName() const */
    [get] String LocalNameConst(es2panda_Context context);
};

[Entity=Class] interface ExportDecl {
    static ExportDecl Create(es2panda_Context context, String exportName, String localName);

    static ExportDecl Create1(es2panda_Context context, String exportName, String localName, AstNode node);



/* const util::StringView &ExportName() const */
    [get] String ExportNameConst(es2panda_Context context);
/* const util::StringView &LocalName() const */
    [get] String LocalNameConst(es2panda_Context context);
};

[Entity=Class] interface RecordTable {
    static es2panda_RecordTable Create(es2panda_Context context, Es2pandaRecordTableFlags flags);



/* bool IsExternal() const */
    [get] boolean IsExternalConst(es2panda_Context context);
/* ArenaSet<ir::ClassDefinition *> &ClassDefinitions() */
    [get] sequence<ClassDefinition> ClassDefinitions(es2panda_Context context);
/* const ArenaSet<ir::ClassDefinition *> &ClassDefinitions() const */
    [get] sequence<ClassDefinition> ClassDefinitionsConst(es2panda_Context context);
/* ArenaSet<ir::TSInterfaceDeclaration *> &InterfaceDeclarations() */
    [get] sequence<TSInterfaceDeclaration> InterfaceDeclarations(es2panda_Context context);
/* const ArenaSet<ir::TSInterfaceDeclaration *> &InterfaceDeclarations() const */
    [get] sequence<TSInterfaceDeclaration> InterfaceDeclarationsConst(es2panda_Context context);
/* ArenaSet<ir::AnnotationDeclaration *> &AnnotationDeclarations() */
    [get] sequence<AnnotationDeclaration> AnnotationDeclarations(es2panda_Context context);
/* const ArenaSet<ir::AnnotationDeclaration *> &AnnotationDeclarations() const */
    [get] sequence<AnnotationDeclaration> AnnotationDeclarationsConst(es2panda_Context context);
/* ArenaVector<FunctionScope *> &Signatures() */
    [get] sequence<FunctionScope> Signatures(es2panda_Context context);
/* const ArenaVector<FunctionScope *> &Signatures() const */
    [get] sequence<FunctionScope> SignaturesConst(es2panda_Context context);
/* void SetClassDefinition(ir::ClassDefinition *classDefinition) */
    void SetClassDefinition(es2panda_Context context, ClassDefinition classDefinition);
/* ir::ClassDefinition *ClassDefinition() */
    [get] ClassDefinition ClassDefinition(es2panda_Context context);
/* const ir::ClassDefinition *ClassDefinition() const */
    [get] ClassDefinition ClassDefinitionConst(es2panda_Context context);
/* void SetInterfaceDeclaration(ir::TSInterfaceDeclaration *interfaceDeclaration) */
    void SetInterfaceDeclaration(es2panda_Context context, TSInterfaceDeclaration interfaceDeclaration);
/* ir::TSInterfaceDeclaration *InterfaceDeclaration() */
    [get] TSInterfaceDeclaration InterfaceDeclaration(es2panda_Context context);
/* const ir::TSInterfaceDeclaration *InterfaceDeclaration() const */
    [get] TSInterfaceDeclaration InterfaceDeclarationConst(es2panda_Context context);
/* void SetAnnotationDeclaration(ir::AnnotationDeclaration *annotationDeclaration) */
    void SetAnnotationDeclaration(es2panda_Context context, AnnotationDeclaration annotationDeclaration);
/* ir::AnnotationDeclaration *AnnotationDeclaration() */
    [get] AnnotationDeclaration AnnotationDeclaration(es2panda_Context context);
/* const ir::AnnotationDeclaration *AnnotationDeclaration() const */
    [get] AnnotationDeclaration AnnotationDeclarationConst(es2panda_Context context);
/* void SetProgram(parser::Program *program) */
    void SetProgram(es2panda_Context context);
/* util::StringView RecordName() const */
    String RecordNameConst(es2panda_Context context);
};

[Entity=Class] interface BoundContext {


/* util::StringView FormRecordName() const */
    String FormRecordNameConst(es2panda_Context context);
};


[Entity=Class] interface ETSParser {


/* void AddDirectImportsToDirectExternalSources(const ArenaVector<util::StringView> &directImportsFromMainSource,
                                                 parser::Program *newProg) const */
    void AddDirectImportsToDirectExternalSourcesConst(es2panda_Context context, sequence<String> directImportsFromMainSource, u32 directImportsFromMainSourceLen);
/* ArenaVector<ir::ETSImportDeclaration *> ParseDefaultSources(std::string_view srcFile, std::string_view importSrc) */
    sequence<ETSImportDeclaration> ParseDefaultSources(es2panda_Context context, String srcFile, String importSrc);
/* std::string_view FormattingFileName() */
    [get] String FormattingFileName(es2panda_Context context);
/* ir::Expression *CreateExpression(std::string_view sourceCode,
                                     ExpressionParseFlags flags = ExpressionParseFlags::NO_OPTS) */
    Expression CreateExpression(es2panda_Context context, String sourceCode, Es2pandaExpressionParseFlags flags);
/* ir::Expression *CreateFormattedExpression(std::string_view sourceCode, std::vector<ir::AstNode *> &insertingNodes) */
    Expression CreateFormattedExpression(es2panda_Context context, String sourceCode, sequence<AstNode> insertingNodes, u32 insertingNodesLen);
/* ir::Statement *CreateFormattedStatement(std::string_view sourceCode, std::vector<ir::AstNode *> &insertingNodes) */
    Statement CreateFormattedStatement(es2panda_Context context, String sourceCode, sequence<AstNode> insertingNodes, u32 insertingNodesLen);
/* ArenaVector<ir::Statement *> CreateStatements(std::string_view sourceCode) */
    sequence<Statement> CreateStatements(es2panda_Context context, String sourceCode);
/* ArenaVector<ir::Statement *> CreateFormattedStatements(std::string_view sourceCode,
                                                           std::vector<ir::AstNode *> &insertingNodes) */
    sequence<Statement> CreateFormattedStatements(es2panda_Context context, String sourceCode, sequence<AstNode> insertingNodes, u32 insertingNodesLen);
/* ir::Statement *ParseTopLevelAnnotation(ir::ModifierFlags memberModifiers) */
    Statement ParseTopLevelAnnotation(es2panda_Context context, Es2pandaModifierFlags memberModifiers);
/* ArenaVector<ir::AnnotationUsage *> ParseAnnotations(bool isTopLevelSt) */
    sequence<AnnotationUsage> ParseAnnotations(es2panda_Context context, boolean isTopLevelSt);
/* ir::ClassDeclaration *CreateFormattedClassDeclaration(std::string_view sourceCode,
                                                          std::vector<ir::AstNode *> &insertingNodes,
                                                          bool allowStatic = false) */
    ClassDeclaration CreateFormattedClassDeclaration(es2panda_Context context, String sourceCode, sequence<AstNode> insertingNodes, u32 insertingNodesLen, boolean allowStatic);
/* ir::AstNode *CreateFormattedClassElement(std::string_view sourceCode, std::vector<ir::AstNode *> &insertingNodes,
                                             const ArenaVector<ir::AstNode *> &properties,
                                             ir::ClassDefinitionModifiers modifiers) */
    AstNode CreateFormattedClassElement(es2panda_Context context, String sourceCode, sequence<AstNode> insertingNodes, u32 insertingNodesLen, sequence<AstNode> properties, u32 propertiesLen, Es2pandaClassDefinitionModifiers modifiers);
/* ir::AstNode *CreateFormattedClassFieldDefinition(std::string_view sourceCode,
                                                     std::vector<ir::AstNode *> &insertingNodes) */
    AstNode CreateFormattedClassFieldDefinition(es2panda_Context context, String sourceCode, sequence<AstNode> insertingNodes, u32 insertingNodesLen);
/* ir::AstNode *CreateFormattedClassMethodDefinition(std::string_view sourceCode,
                                                      std::vector<ir::AstNode *> &insertingNodes) */
    AstNode CreateFormattedClassMethodDefinition(es2panda_Context context, String sourceCode, sequence<AstNode> insertingNodes, u32 insertingNodesLen);
/* ir::Statement *CreateFormattedTopLevelStatement(std::string_view sourceCode,
                                                    std::vector<ir::AstNode *> &insertingNodes) */
    Statement CreateFormattedTopLevelStatement(es2panda_Context context, String sourceCode, sequence<AstNode> insertingNodes, u32 insertingNodesLen);
/* void ApplyAnnotationsToNode(ir::AstNode *node, ArenaVector<ir::AnnotationUsage *> &&annotations,
                                lexer::SourcePosition pos) */
    void ApplyAnnotationsToNode(es2panda_Context context, AstNode node, sequence<AnnotationUsage> annotations, u32 annotationsLen, es2panda_SourcePosition pos);
};


[Entity=Class] interface ASTVerifier {
    static es2panda_AstVerifier Create(es2panda_Context context);



/* void Verify(std::string_view phaseName) */
    void Verify(es2panda_Context context, String phaseName);
/* void IntroduceNewInvariants(std::string_view phaseName) */
    void IntroduceNewInvariants(es2panda_Context context, String phaseName);
/* void DumpMessages() const */
    void DumpMessagesConst(es2panda_Context context);
/* bool TreatAsWarning(VerifierInvariants id) const */
    [get] boolean TreatAsWarningConst(es2panda_Context context, Es2pandaEnum id);
/* bool TreatAsError(VerifierInvariants id) const */
    [get] boolean TreatAsErrorConst(es2panda_Context context, Es2pandaEnum id);
/* bool HasErrors() const */
    [get] boolean HasErrorsConst(es2panda_Context context);
/* bool HasWarnings() const */
    [get] boolean HasWarningsConst(es2panda_Context context);
};

[Entity=Class] interface CheckMessage {
    static es2panda_VerifierMessage Create(es2panda_Context context, String cause, String message, u32 line);



};

