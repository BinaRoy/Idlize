/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


// typedef struct es2panda_variantDoubleCharArrayBool {
//     int index;
//     union {
//         double d;
//         char *c;
//         bool b;
//     } variant;
// } es2panda_variantDoubleCharArrayBool;
interface es2panda_variantDoubleCharArrayBool {
    attribute i32 index;
    attribute double d;
    attribute String c;
    attribute bool b;
};

dictionary es2panda_variantIndex {
    i32 DOUBLE = 0;
    i32 CHAR = 1;
    i32 BOOL = 2;
};


[Entity=Class] interface es2panda_Config {};
[Entity=Class] interface es2panda_Context {};
[Entity=Class] interface es2panda_Program {};
[Entity=Class] interface es2panda_ExternalSource {};
[Entity=Class] interface es2panda_ArkTsConfig {};
[Entity=Class] interface es2panda_AstNode {};
[Entity=Class] interface es2panda_FunctionSignature {};
[Entity=Class] interface es2panda_SourcePosition {};
[Entity=Class] interface es2panda_SourceRange {};
[Entity=Class] interface es2panda_SrcDumper {};
[Entity=Class] interface es2panda_AstDumper {};
[Entity=Class] interface es2panda_LabelPair {};
[Entity=Class] interface es2panda_ScriptFunctionData {};
[Entity=Class] interface es2panda_ImportSource {};
[Entity=Class] interface es2panda_Signature {};
[Entity=Class] interface es2panda_SignatureInfo {};
[Entity=Class] interface es2panda_CheckerContext {};
[Entity=Class] interface es2panda_ResolveResult {};
[Entity=Class] interface es2panda_ValidationInfo {};
[Entity=Class] interface es2panda_Type {};
[Entity=Class] interface es2panda_TypeRelation {};
[Entity=Class] interface es2panda_IndexInfo {};
[Entity=Class] interface es2panda_GlobalTypesHolder {};
[Entity=Class] interface es2panda_ObjectDescriptor {};
[Entity=Class] interface es2panda_Variable {};
[Entity=Class] interface es2panda_Scope {};
[Entity=Class] interface es2panda_ScopeFindResult {};
[Entity=Class] interface es2panda_BindingProps {};
[Entity=Class] interface es2panda_Declaration {};
[Entity=Class] interface es2panda_RecordTable {};
[Entity=Class] interface es2panda_BoundContext {};
[Entity=Class] interface es2panda_AstVisitor {};
[Entity=Class] interface es2panda_AstVerifier {};
[Entity=Class] interface es2panda_VerifierMessage {};
[Entity=Class] interface es2panda_CodeGen {};
[Entity=Class] interface es2panda_VReg {};
[Entity=Class] interface es2panda_IRNode {};
[Entity=Class] interface es2panda_ErrorLogger {};
[Entity=Class] interface es2panda_VerificationContext {};


interface NodeTraverser {
    void Do(es2panda_AstNode e2p_node);
};

interface NodeTransformer {
    es2panda_AstNode Do(es2panda_AstNode e2p_node);
};

interface NodePredicate {
    bool Do(es2panda_AstNode e2p_node);
};

interface PropertyProcessor {
    es2panda_Variable Do(es2panda_Variable e2p_variable, es2panda_Type e2p_type);
};

interface PropertyTraverser {
    void Do(es2panda_Variable e2p_variable);
};

interface ClassBuilder {
    void Do(sequence<es2panda_AstNode> e2p_node, u32 size);
};

interface MethodBuilder {
    void Do(sequence<es2panda_AstNode> statements, u32 sizeStatements, sequence<es2panda_AstNode> expression,
        u32 sizeExpression, sequence<es2panda_Type> e2p_type);
};

interface ClassInitializerBuilder {
    void Do(sequence<es2panda_AstNode> statements, u32 sizeStatements, sequence<es2panda_AstNode> expression,
        u32 sizeExpression);
};

interface es2panda_DynamicImportData {
    attribute es2panda_AstNode import_node;
    attribute es2panda_AstNode specifier;
    attribute es2panda_Variable variable;
};

dictionary es2panda_ContextState {
    i32 ES2PANDA_STATE_NEW = 0;
    i32 ES2PANDA_STATE_PARSED = 1;
    i32 ES2PANDA_STATE_SCOPE_INITED = 2;
    i32 ES2PANDA_STATE_BOUND = 3;
    i32 ES2PANDA_STATE_CHECKED = 4;
    i32 ES2PANDA_STATE_LOWERED = 5;
    i32 ES2PANDA_STATE_ASM_GENERATED = 6;
    i32 ES2PANDA_STATE_BIN_GENERATED = 7;
    i32 ES2PANDA_STATE_ERROR = 8;
};

[Entity=Class] interface VoidPtr {}; // void *


dictionary Es2pandaAstNodeType {
    i32 AST_NODE_TYPE_ARROW_FUNCTION_EXPRESSION = 0;
    i32 AST_NODE_TYPE_ANNOTATION_DECLARATION = 1;
    i32 AST_NODE_TYPE_ANNOTATION_USAGE = 2;
    i32 AST_NODE_TYPE_ASSERT_STATEMENT = 3;
    i32 AST_NODE_TYPE_AWAIT_EXPRESSION = 4;
    i32 AST_NODE_TYPE_BIGINT_LITERAL = 5;
    i32 AST_NODE_TYPE_BINARY_EXPRESSION = 6;
    i32 AST_NODE_TYPE_BLOCK_STATEMENT = 7;
    i32 AST_NODE_TYPE_BOOLEAN_LITERAL = 8;
    i32 AST_NODE_TYPE_BREAK_STATEMENT = 9;
    i32 AST_NODE_TYPE_CALL_EXPRESSION = 10;
    i32 AST_NODE_TYPE_CATCH_CLAUSE = 11;
    i32 AST_NODE_TYPE_CHAIN_EXPRESSION = 12;
    i32 AST_NODE_TYPE_CHAR_LITERAL = 13;
    i32 AST_NODE_TYPE_CLASS_DEFINITION = 14;
    i32 AST_NODE_TYPE_CLASS_DECLARATION = 15;
    i32 AST_NODE_TYPE_CLASS_EXPRESSION = 16;
    i32 AST_NODE_TYPE_CLASS_PROPERTY = 17;
    i32 AST_NODE_TYPE_CLASS_STATIC_BLOCK = 18;
    i32 AST_NODE_TYPE_CONDITIONAL_EXPRESSION = 19;
    i32 AST_NODE_TYPE_CONTINUE_STATEMENT = 20;
    i32 AST_NODE_TYPE_DEBUGGER_STATEMENT = 21;
    i32 AST_NODE_TYPE_DECORATOR = 22;
    i32 AST_NODE_TYPE_DIRECT_EVAL = 23;
    i32 AST_NODE_TYPE_DO_WHILE_STATEMENT = 24;
    i32 AST_NODE_TYPE_EMPTY_STATEMENT = 25;
    i32 AST_NODE_TYPE_EXPORT_ALL_DECLARATION = 26;
    i32 AST_NODE_TYPE_EXPORT_DEFAULT_DECLARATION = 27;
    i32 AST_NODE_TYPE_EXPORT_NAMED_DECLARATION = 28;
    i32 AST_NODE_TYPE_EXPORT_SPECIFIER = 29;
    i32 AST_NODE_TYPE_EXPRESSION_STATEMENT = 30;
    i32 AST_NODE_TYPE_FOR_IN_STATEMENT = 31;
    i32 AST_NODE_TYPE_FOR_OF_STATEMENT = 32;
    i32 AST_NODE_TYPE_FOR_UPDATE_STATEMENT = 33;
    i32 AST_NODE_TYPE_FUNCTION_DECLARATION = 34;
    i32 AST_NODE_TYPE_FUNCTION_EXPRESSION = 35;
    i32 AST_NODE_TYPE_IDENTIFIER = 36;
    i32 AST_NODE_TYPE_DUMMYNODE = 37;
    i32 AST_NODE_TYPE_IF_STATEMENT = 38;
    i32 AST_NODE_TYPE_IMPORT_DECLARATION = 39;
    i32 AST_NODE_TYPE_IMPORT_EXPRESSION = 40;
    i32 AST_NODE_TYPE_IMPORT_DEFAULT_SPECIFIER = 41;
    i32 AST_NODE_TYPE_IMPORT_NAMESPACE_SPECIFIER = 42;
    i32 AST_NODE_TYPE_IMPORT_SPECIFIER = 43;
    i32 AST_NODE_TYPE_LABELLED_STATEMENT = 44;
    i32 AST_NODE_TYPE_MEMBER_EXPRESSION = 45;
    i32 AST_NODE_TYPE_META_PROPERTY_EXPRESSION = 46;
    i32 AST_NODE_TYPE_METHOD_DEFINITION = 47;
    i32 AST_NODE_TYPE_NAMED_TYPE = 48;
    i32 AST_NODE_TYPE_NAMESPACE_DECLARATION = 49;
    i32 AST_NODE_TYPE_NAMESPACE_DEFINITION = 50;
    i32 AST_NODE_TYPE_NEW_EXPRESSION = 51;
    i32 AST_NODE_TYPE_NULL_LITERAL = 52;
    i32 AST_NODE_TYPE_UNDEFINED_LITERAL = 53;
    i32 AST_NODE_TYPE_NUMBER_LITERAL = 54;
    i32 AST_NODE_TYPE_OMITTED_EXPRESSION = 55;
    i32 AST_NODE_TYPE_PREFIX_ASSERTION_EXPRESSION = 56;
    i32 AST_NODE_TYPE_PROPERTY = 57;
    i32 AST_NODE_TYPE_REGEXP_LITERAL = 58;
    i32 AST_NODE_TYPE_REEXPORT_STATEMENT = 59;
    i32 AST_NODE_TYPE_RETURN_STATEMENT = 60;
    i32 AST_NODE_TYPE_SCRIPT_FUNCTION = 61;
    i32 AST_NODE_TYPE_SEQUENCE_EXPRESSION = 62;
    i32 AST_NODE_TYPE_STRING_LITERAL = 63;
    i32 AST_NODE_TYPE_ETS_NULL_TYPE = 64;
    i32 AST_NODE_TYPE_ETS_UNDEFINED_TYPE = 65;
    i32 AST_NODE_TYPE_ETS_NEVER_TYPE = 66;
    i32 AST_NODE_TYPE_ETS_STRING_LITERAL_TYPE = 67;
    i32 AST_NODE_TYPE_ETS_FUNCTION_TYPE = 68;
    i32 AST_NODE_TYPE_ETS_WILDCARD_TYPE = 69;
    i32 AST_NODE_TYPE_ETS_PRIMITIVE_TYPE = 70;
    i32 AST_NODE_TYPE_ETS_PACKAGE_DECLARATION = 71;
    i32 AST_NODE_TYPE_ETS_CLASS_LITERAL = 72;
    i32 AST_NODE_TYPE_ETS_TYPE_REFERENCE = 73;
    i32 AST_NODE_TYPE_ETS_TYPE_REFERENCE_PART = 74;
    i32 AST_NODE_TYPE_ETS_UNION_TYPE = 75;
    i32 AST_NODE_TYPE_ETS_LAUNCH_EXPRESSION = 76;
    i32 AST_NODE_TYPE_ETS_NEW_ARRAY_INSTANCE_EXPRESSION = 77;
    i32 AST_NODE_TYPE_ETS_NEW_MULTI_DIM_ARRAY_INSTANCE_EXPRESSION = 78;
    i32 AST_NODE_TYPE_ETS_NEW_CLASS_INSTANCE_EXPRESSION = 79;
    i32 AST_NODE_TYPE_ETS_IMPORT_DECLARATION = 80;
    i32 AST_NODE_TYPE_ETS_PARAMETER_EXPRESSION = 81;
    i32 AST_NODE_TYPE_ETS_TUPLE = 82;
    i32 AST_NODE_TYPE_ETS_SCRIPT = 83;
    i32 AST_NODE_TYPE_SUPER_EXPRESSION = 84;
    i32 AST_NODE_TYPE_STRUCT_DECLARATION = 85;
    i32 AST_NODE_TYPE_SWITCH_CASE_STATEMENT = 86;
    i32 AST_NODE_TYPE_SWITCH_STATEMENT = 87;
    i32 AST_NODE_TYPE_TS_ENUM_DECLARATION = 88;
    i32 AST_NODE_TYPE_TS_ENUM_MEMBER = 89;
    i32 AST_NODE_TYPE_TS_EXTERNAL_MODULE_REFERENCE = 90;
    i32 AST_NODE_TYPE_TS_NUMBER_KEYWORD = 91;
    i32 AST_NODE_TYPE_TS_ANY_KEYWORD = 92;
    i32 AST_NODE_TYPE_TS_STRING_KEYWORD = 93;
    i32 AST_NODE_TYPE_TS_BOOLEAN_KEYWORD = 94;
    i32 AST_NODE_TYPE_TS_VOID_KEYWORD = 95;
    i32 AST_NODE_TYPE_TS_UNDEFINED_KEYWORD = 96;
    i32 AST_NODE_TYPE_TS_UNKNOWN_KEYWORD = 97;
    i32 AST_NODE_TYPE_TS_OBJECT_KEYWORD = 98;
    i32 AST_NODE_TYPE_TS_BIGINT_KEYWORD = 99;
    i32 AST_NODE_TYPE_TS_NEVER_KEYWORD = 100;
    i32 AST_NODE_TYPE_TS_NON_NULL_EXPRESSION = 101;
    i32 AST_NODE_TYPE_TS_NULL_KEYWORD = 102;
    i32 AST_NODE_TYPE_TS_ARRAY_TYPE = 103;
    i32 AST_NODE_TYPE_TS_UNION_TYPE = 104;
    i32 AST_NODE_TYPE_TS_TYPE_LITERAL = 105;
    i32 AST_NODE_TYPE_TS_PROPERTY_SIGNATURE = 106;
    i32 AST_NODE_TYPE_TS_METHOD_SIGNATURE = 107;
    i32 AST_NODE_TYPE_TS_SIGNATURE_DECLARATION = 108;
    i32 AST_NODE_TYPE_TS_PARENT_TYPE = 109;
    i32 AST_NODE_TYPE_TS_LITERAL_TYPE = 110;
    i32 AST_NODE_TYPE_TS_INFER_TYPE = 111;
    i32 AST_NODE_TYPE_TS_CONDITIONAL_TYPE = 112;
    i32 AST_NODE_TYPE_TS_IMPORT_TYPE = 113;
    i32 AST_NODE_TYPE_TS_INTERSECTION_TYPE = 114;
    i32 AST_NODE_TYPE_TS_MAPPED_TYPE = 115;
    i32 AST_NODE_TYPE_TS_MODULE_BLOCK = 116;
    i32 AST_NODE_TYPE_TS_THIS_TYPE = 117;
    i32 AST_NODE_TYPE_TS_TYPE_OPERATOR = 118;
    i32 AST_NODE_TYPE_TS_TYPE_PARAMETER = 119;
    i32 AST_NODE_TYPE_TS_TYPE_PARAMETER_DECLARATION = 120;
    i32 AST_NODE_TYPE_TS_TYPE_PARAMETER_INSTANTIATION = 121;
    i32 AST_NODE_TYPE_TS_TYPE_PREDICATE = 122;
    i32 AST_NODE_TYPE_TS_PARAMETER_PROPERTY = 123;
    i32 AST_NODE_TYPE_TS_MODULE_DECLARATION = 124;
    i32 AST_NODE_TYPE_TS_IMPORT_EQUALS_DECLARATION = 125;
    i32 AST_NODE_TYPE_TS_FUNCTION_TYPE = 126;
    i32 AST_NODE_TYPE_TS_CONSTRUCTOR_TYPE = 127;
    i32 AST_NODE_TYPE_TS_TYPE_ALIAS_DECLARATION = 128;
    i32 AST_NODE_TYPE_TS_TYPE_REFERENCE = 129;
    i32 AST_NODE_TYPE_TS_QUALIFIED_NAME = 130;
    i32 AST_NODE_TYPE_TS_INDEXED_ACCESS_TYPE = 131;
    i32 AST_NODE_TYPE_TS_INTERFACE_DECLARATION = 132;
    i32 AST_NODE_TYPE_TS_INTERFACE_BODY = 133;
    i32 AST_NODE_TYPE_TS_INTERFACE_HERITAGE = 134;
    i32 AST_NODE_TYPE_TS_TUPLE_TYPE = 135;
    i32 AST_NODE_TYPE_TS_NAMED_TUPLE_MEMBER = 136;
    i32 AST_NODE_TYPE_TS_INDEX_SIGNATURE = 137;
    i32 AST_NODE_TYPE_TS_TYPE_QUERY = 138;
    i32 AST_NODE_TYPE_TS_AS_EXPRESSION = 139;
    i32 AST_NODE_TYPE_TS_CLASS_IMPLEMENTS = 140;
    i32 AST_NODE_TYPE_TS_TYPE_ASSERTION = 141;
    i32 AST_NODE_TYPE_TAGGED_TEMPLATE_EXPRESSION = 142;
    i32 AST_NODE_TYPE_TEMPLATE_ELEMENT = 143;
    i32 AST_NODE_TYPE_TEMPLATE_LITERAL = 144;
    i32 AST_NODE_TYPE_THIS_EXPRESSION = 145;
    i32 AST_NODE_TYPE_TYPEOF_EXPRESSION = 146;
    i32 AST_NODE_TYPE_THROW_STATEMENT = 147;
    i32 AST_NODE_TYPE_TRY_STATEMENT = 148;
    i32 AST_NODE_TYPE_UNARY_EXPRESSION = 149;
    i32 AST_NODE_TYPE_UPDATE_EXPRESSION = 150;
    i32 AST_NODE_TYPE_VARIABLE_DECLARATION = 151;
    i32 AST_NODE_TYPE_VARIABLE_DECLARATOR = 152;
    i32 AST_NODE_TYPE_WHILE_STATEMENT = 153;
    i32 AST_NODE_TYPE_YIELD_EXPRESSION = 154;
    i32 AST_NODE_TYPE_OPAQUE_TYPE_NODE = 155;
    i32 AST_NODE_TYPE_BLOCK_EXPRESSION = 156;
    i32 AST_NODE_TYPE_ERROR_TYPE_NODE = 157;
    i32 AST_NODE_TYPE_ARRAY_EXPRESSION = 158;
    i32 AST_NODE_TYPE_ARRAY_PATTERN = 159;
    i32 AST_NODE_TYPE_ASSIGNMENT_EXPRESSION = 160;
    i32 AST_NODE_TYPE_ASSIGNMENT_PATTERN = 161;
    i32 AST_NODE_TYPE_OBJECT_EXPRESSION = 162;
    i32 AST_NODE_TYPE_OBJECT_PATTERN = 163;
    i32 AST_NODE_TYPE_SPREAD_ELEMENT = 164;
    i32 AST_NODE_TYPE_REST_ELEMENT = 165;
};

dictionary Es2pandaScopeType {
    i32 SCOPE_TYPE_PARAM = 0;
    i32 SCOPE_TYPE_CATCH_PARAM = 1;
    i32 SCOPE_TYPE_FUNCTION_PARAM = 2;
    i32 SCOPE_TYPE_CATCH = 3;
    i32 SCOPE_TYPE_CLASS = 4;
    i32 SCOPE_TYPE_ANNOTATION = 5;
    i32 SCOPE_TYPE_ANNOTATIONPARAMSCOPE = 6;
    i32 SCOPE_TYPE_LOCAL = 7;
    i32 SCOPE_TYPE_LOCAL_WITH_ALIAS = 8;
    i32 SCOPE_TYPE_LOOP = 9;
    i32 SCOPE_TYPE_LOOP_DECL = 10;
    i32 SCOPE_TYPE_FUNCTION = 11;
    i32 SCOPE_TYPE_GLOBAL = 12;
    i32 SCOPE_TYPE_MODULE = 13;
};

dictionary Es2pandaDeclType {
    i32 DECL_TYPE_NONE = 0;
    i32 DECL_TYPE_VAR = 1;
    i32 DECL_TYPE_LET = 2;
    i32 DECL_TYPE_CONST = 3;
    i32 DECL_TYPE_LABEL = 4;
    i32 DECL_TYPE_READONLY = 5;
    i32 DECL_TYPE_FUNC = 6;
    i32 DECL_TYPE_PARAM = 7;
    i32 DECL_TYPE_IMPORT = 8;
    i32 DECL_TYPE_DYNAMIC_IMPORT = 9;
    i32 DECL_TYPE_EXPORT = 10;
    i32 DECL_TYPE_ANNOTATIONDECL = 11;
    i32 DECL_TYPE_ANNOTATIONUSAGE = 12;
    i32 DECL_TYPE_TYPE_ALIAS = 13;
    i32 DECL_TYPE_NAMESPACE = 14;
    i32 DECL_TYPE_INTERFACE = 15;
    i32 DECL_TYPE_ENUM_LITERAL = 16;
    i32 DECL_TYPE_TYPE_PARAMETER = 17;
    i32 DECL_TYPE_PROPERTY = 18;
    i32 DECL_TYPE_CLASS = 19;
    i32 DECL_TYPE_METHOD = 20;
    i32 DECL_TYPE_ENUM = 21;
};

dictionary Es2pandaResolveBindingOptions {
    i32 RESOLVE_BINDING_OPTIONS_BINDINGS = 0;
    i32 RESOLVE_BINDING_OPTIONS_INTERFACES = 1;
    i32 RESOLVE_BINDING_OPTIONS_VARIABLES = 2;
    i32 RESOLVE_BINDING_OPTIONS_METHODS = 4;
    i32 RESOLVE_BINDING_OPTIONS_DECLARATION = 8;
    i32 RESOLVE_BINDING_OPTIONS_STATIC_VARIABLES = 16;
    i32 RESOLVE_BINDING_OPTIONS_STATIC_METHODS = 32;
    i32 RESOLVE_BINDING_OPTIONS_STATIC_DECLARATION = 64;
    i32 RESOLVE_BINDING_OPTIONS_TYPE_ALIASES = 128;
    i32 RESOLVE_BINDING_OPTIONS_ALL = 256;
    i32 RESOLVE_BINDING_OPTIONS_ALL_NON_TYPE = 512;
    i32 RESOLVE_BINDING_OPTIONS_ALL_VARIABLES = 18;
    i32 RESOLVE_BINDING_OPTIONS_ALL_METHOD = 36;
    i32 RESOLVE_BINDING_OPTIONS_ALL_DECLARATION = 72;
    i32 RESOLVE_BINDING_OPTIONS_ALL_STATIC = 112;
    i32 RESOLVE_BINDING_OPTIONS_ALL_NON_STATIC = 14;
    i32 RESOLVE_BINDING_OPTIONS_LAST = 128;
};

dictionary Es2pandaVariableKind {
    i32 VARIABLE_KIND_NONE = 0;
    i32 VARIABLE_KIND_VAR = 1;
    i32 VARIABLE_KIND_LEXICAL = 2;
    i32 VARIABLE_KIND_FUNCTION = 3;
    i32 VARIABLE_KIND_MODULE = 4;
};


typedef u64 Es2pandaVariableFlags;

dictionary Es2pandaLetOrConstStatus {
    i32 LET_OR_CONST_STATUS_INITIALIZED = 0;
    i32 LET_OR_CONST_STATUS_UNINITIALIZED = 1;
};

dictionary Es2pandaScopeFlags {
    i32 SCOPE_FLAGS_NONE = 0;
    i32 SCOPE_FLAGS_SET_LEXICAL_FUNCTION = 1;
    i32 SCOPE_FLAGS_USE_ARGS = 2;
    i32 SCOPE_FLAGS_USE_SUPER = 4;
    i32 SCOPE_FLAGS_INNER_ARROW = 8;
    i32 SCOPE_FLAGS_NO_REG_STORE = 16;
    i32 SCOPE_FLAGS_DECL_SCOPE = 32;
    i32 SCOPE_FLAGS_FIELD_SCOPE = 64;
    i32 SCOPE_FLAGS_METHOD_SCOPE = 128;
    i32 SCOPE_FLAGS_STATIC = 256;
    i32 SCOPE_FLAGS_TYPE_ALIAS = 512;
    i32 SCOPE_FLAGS_LOOP_SCOPE = 1024;
    i32 SCOPE_FLAGS_STATIC_DECL_SCOPE = 288;
    i32 SCOPE_FLAGS_STATIC_FIELD_SCOPE = 320;
    i32 SCOPE_FLAGS_STATIC_METHOD_SCOPE = 384;
};

dictionary Es2pandaEnum {
    i32 ENUM_NODE_HAS_PARENT = 0;
    i32 ENUM_NODE_HAS_SOURCE_RANGE = 1;
    i32 ENUM_EVERY_CHILD_HAS_VALID_PARENT = 2;
    i32 ENUM_EVERY_CHILD_IN_PARENT_RANGE = 3;
    i32 ENUM_VARIABLE_HAS_SCOPE = 4;
    i32 ENUM_NODE_HAS_TYPE = 5;
    i32 ENUM_IDENTIFIER_HAS_VARIABLE = 6;
    i32 ENUM_REFERENCE_TYPE_ANNOTATION_IS_NULL = 7;
    i32 ENUM_ARITHMETIC_OPERATION_VALID = 8;
    i32 ENUM_SEQUENCE_EXPRESSION_HAS_LAST_TYPE = 9;
    i32 ENUM_CHECK_INFINITE_LOOP = 10;
    i32 ENUM_FOR_LOOP_CORRECTLY_INITIALIZED = 11;
    i32 ENUM_VARIABLE_HAS_ENCLOSING_SCOPE = 12;
    i32 ENUM_MODIFIER_ACCESS_VALID = 13;
    i32 ENUM_VARIABLE_NAME_IDENTIFIER_NAME_SAME = 14;
    i32 ENUM_CHECK_ABSTRACT_METHOD = 15;
    i32 ENUM_GETTER_SETTER_VALIDATION = 16;
    i32 ENUM_CHECK_SCOPE_DECLARATION = 17;
    i32 ENUM_CHECK_CONST_PROPERTIES = 18;
    i32 ENUM_COUNT = 19;
    i32 ENUM_AFTER_SCOPES_INIT_PHASE_FIRST = 0;
    i32 ENUM_AFTER_SCOPES_INIT_PHASE_LAST = 4;
    i32 ENUM_AFTER_CHECKER_PHASE_FIRST = 5;
    i32 ENUM_AFTER_CHECKER_PHASE_LAST = 18;
    i32 ENUM_FIRST = 0;
    i32 ENUM_LAST = 18;
    i32 ENUM_INVALID = 19;
};

dictionary Es2pandaRegExpFlags {
    i32 REG_EXP_FLAGS_EMPTY = 0;
    i32 REG_EXP_FLAGS_GLOBAL = 1;
    i32 REG_EXP_FLAGS_IGNORE_CASE = 2;
    i32 REG_EXP_FLAGS_MULTILINE = 4;
    i32 REG_EXP_FLAGS_DOTALL = 8;
    i32 REG_EXP_FLAGS_UNICODE = 16;
    i32 REG_EXP_FLAGS_STICKY = 32;
};

dictionary Es2pandaId {
    i32 ID_AS = 0;
    i32 ID_JS = 1;
    i32 ID_TS = 2;
    i32 ID_ETS = 3;
    i32 ID_COUNT = 4;
};

dictionary Es2pandaTokenType {
    i32 TOKEN_TYPE_EOS = 0;
    i32 TOKEN_TYPE_LITERAL_IDENT = 1;
    i32 TOKEN_TYPE_LITERAL_STRING = 2;
    i32 TOKEN_TYPE_LITERAL_CHAR = 3;
    i32 TOKEN_TYPE_LITERAL_NUMBER = 4;
    i32 TOKEN_TYPE_LITERAL_REGEXP = 5;
    i32 TOKEN_TYPE_LITERAL_TRUE = 6;
    i32 TOKEN_TYPE_LITERAL_FALSE = 7;
    i32 TOKEN_TYPE_LITERAL_NULL = 8;
    i32 TOKEN_TYPE_PUNCTUATOR_NULLISH_COALESCING = 9;
    i32 TOKEN_TYPE_PUNCTUATOR_LOGICAL_OR = 10;
    i32 TOKEN_TYPE_PUNCTUATOR_LOGICAL_AND = 11;
    i32 TOKEN_TYPE_PUNCTUATOR_BITWISE_OR = 12;
    i32 TOKEN_TYPE_PUNCTUATOR_BITWISE_XOR = 13;
    i32 TOKEN_TYPE_PUNCTUATOR_BITWISE_AND = 14;
    i32 TOKEN_TYPE_PUNCTUATOR_EQUAL = 15;
    i32 TOKEN_TYPE_PUNCTUATOR_NOT_EQUAL = 16;
    i32 TOKEN_TYPE_PUNCTUATOR_STRICT_EQUAL = 17;
    i32 TOKEN_TYPE_PUNCTUATOR_NOT_STRICT_EQUAL = 18;
    i32 TOKEN_TYPE_PUNCTUATOR_LESS_THAN = 19;
    i32 TOKEN_TYPE_PUNCTUATOR_LESS_THAN_EQUAL = 20;
    i32 TOKEN_TYPE_PUNCTUATOR_GREATER_THAN = 21;
    i32 TOKEN_TYPE_PUNCTUATOR_GREATER_THAN_EQUAL = 22;
    i32 TOKEN_TYPE_PUNCTUATOR_LEFT_SHIFT = 23;
    i32 TOKEN_TYPE_PUNCTUATOR_RIGHT_SHIFT = 24;
    i32 TOKEN_TYPE_PUNCTUATOR_UNSIGNED_RIGHT_SHIFT = 25;
    i32 TOKEN_TYPE_PUNCTUATOR_PLUS = 26;
    i32 TOKEN_TYPE_PUNCTUATOR_MINUS = 27;
    i32 TOKEN_TYPE_PUNCTUATOR_MULTIPLY = 28;
    i32 TOKEN_TYPE_PUNCTUATOR_DIVIDE = 29;
    i32 TOKEN_TYPE_PUNCTUATOR_MOD = 30;
    i32 TOKEN_TYPE_KEYW_IN = 31;
    i32 TOKEN_TYPE_KEYW_INSTANCEOF = 32;
    i32 TOKEN_TYPE_PUNCTUATOR_EXPONENTIATION = 33;
    i32 TOKEN_TYPE_PUNCTUATOR_LEFT_PARENTHESIS = 34;
    i32 TOKEN_TYPE_PUNCTUATOR_RIGHT_PARENTHESIS = 35;
    i32 TOKEN_TYPE_PUNCTUATOR_LEFT_BRACE = 36;
    i32 TOKEN_TYPE_PUNCTUATOR_RIGHT_BRACE = 37;
    i32 TOKEN_TYPE_PUNCTUATOR_PERIOD = 38;
    i32 TOKEN_TYPE_PUNCTUATOR_PERIOD_PERIOD_PERIOD = 39;
    i32 TOKEN_TYPE_PUNCTUATOR_PERIOD_QUESTION = 40;
    i32 TOKEN_TYPE_PUNCTUATOR_COMMA = 41;
    i32 TOKEN_TYPE_PUNCTUATOR_COLON = 42;
    i32 TOKEN_TYPE_PUNCTUATOR_SEMI_COLON = 43;
    i32 TOKEN_TYPE_PUNCTUATOR_LEFT_SQUARE_BRACKET = 44;
    i32 TOKEN_TYPE_PUNCTUATOR_RIGHT_SQUARE_BRACKET = 45;
    i32 TOKEN_TYPE_PUNCTUATOR_QUESTION_MARK = 46;
    i32 TOKEN_TYPE_PUNCTUATOR_QUESTION_DOT = 47;
    i32 TOKEN_TYPE_PUNCTUATOR_TILDE = 48;
    i32 TOKEN_TYPE_PUNCTUATOR_EXCLAMATION_MARK = 49;
    i32 TOKEN_TYPE_PUNCTUATOR_PLUS_PLUS = 50;
    i32 TOKEN_TYPE_PUNCTUATOR_MINUS_MINUS = 51;
    i32 TOKEN_TYPE_PUNCTUATOR_SUBSTITUTION = 52;
    i32 TOKEN_TYPE_PUNCTUATOR_UNSIGNED_RIGHT_SHIFT_EQUAL = 53;
    i32 TOKEN_TYPE_PUNCTUATOR_RIGHT_SHIFT_EQUAL = 54;
    i32 TOKEN_TYPE_PUNCTUATOR_LEFT_SHIFT_EQUAL = 55;
    i32 TOKEN_TYPE_PUNCTUATOR_PLUS_EQUAL = 56;
    i32 TOKEN_TYPE_PUNCTUATOR_MINUS_EQUAL = 57;
    i32 TOKEN_TYPE_PUNCTUATOR_MULTIPLY_EQUAL = 58;
    i32 TOKEN_TYPE_PUNCTUATOR_DIVIDE_EQUAL = 59;
    i32 TOKEN_TYPE_PUNCTUATOR_MOD_EQUAL = 60;
    i32 TOKEN_TYPE_PUNCTUATOR_BITWISE_AND_EQUAL = 61;
    i32 TOKEN_TYPE_PUNCTUATOR_BITWISE_OR_EQUAL = 62;
    i32 TOKEN_TYPE_PUNCTUATOR_BITWISE_XOR_EQUAL = 63;
    i32 TOKEN_TYPE_PUNCTUATOR_LOGICAL_AND_EQUAL = 64;
    i32 TOKEN_TYPE_PUNCTUATOR_LOGICAL_OR_EQUAL = 65;
    i32 TOKEN_TYPE_PUNCTUATOR_LOGICAL_NULLISH_EQUAL = 66;
    i32 TOKEN_TYPE_PUNCTUATOR_EXPONENTIATION_EQUAL = 67;
    i32 TOKEN_TYPE_PUNCTUATOR_ARROW = 68;
    i32 TOKEN_TYPE_PUNCTUATOR_BACK_TICK = 69;
    i32 TOKEN_TYPE_PUNCTUATOR_HASH_MARK = 70;
    i32 TOKEN_TYPE_PUNCTUATOR_AT = 71;
    i32 TOKEN_TYPE_PUNCTUATOR_FORMAT = 72;
    i32 TOKEN_TYPE_PUNCTUATOR_DOLLAR_DOLLAR = 73;
    i32 TOKEN_TYPE_KEYW_GET = 74;
    i32 TOKEN_TYPE_KEYW_SET = 75;
    i32 TOKEN_TYPE_KEYW_OF = 76;
    i32 TOKEN_TYPE_KEYW_FROM = 77;
    i32 TOKEN_TYPE_KEYW_AS = 78;
    i32 TOKEN_TYPE_KEYW_META = 79;
    i32 TOKEN_TYPE_KEYW_REQUIRE = 80;
    i32 TOKEN_TYPE_KEYW_ABSTRACT = 81;
    i32 TOKEN_TYPE_KEYW_TARGET = 82;
    i32 TOKEN_TYPE_KEYW_OUT = 83;
    i32 TOKEN_TYPE_FIRST_KEYW = 84;
    i32 TOKEN_TYPE_KEYW_AWAIT = 85;
    i32 TOKEN_TYPE_KEYW_BIGINT = 86;
    i32 TOKEN_TYPE_KEYW_BOOLEAN = 87;
    i32 TOKEN_TYPE_KEYW_BYTE = 88;
    i32 TOKEN_TYPE_KEYW_BREAK = 89;
    i32 TOKEN_TYPE_KEYW_CASE = 90;
    i32 TOKEN_TYPE_KEYW_CATCH = 91;
    i32 TOKEN_TYPE_KEYW_CHAR = 92;
    i32 TOKEN_TYPE_KEYW_CLASS = 93;
    i32 TOKEN_TYPE_KEYW_CONST = 94;
    i32 TOKEN_TYPE_KEYW_CONSTRUCTOR = 95;
    i32 TOKEN_TYPE_KEYW_CONTINUE = 96;
    i32 TOKEN_TYPE_KEYW_DEBUGGER = 97;
    i32 TOKEN_TYPE_KEYW_DEFAULT = 98;
    i32 TOKEN_TYPE_KEYW_DELETE = 99;
    i32 TOKEN_TYPE_KEYW_DO = 100;
    i32 TOKEN_TYPE_KEYW_DOUBLE = 101;
    i32 TOKEN_TYPE_KEYW_ELSE = 102;
    i32 TOKEN_TYPE_KEYW_ENUM = 103;
    i32 TOKEN_TYPE_KEYW_EXPORT = 104;
    i32 TOKEN_TYPE_KEYW_EXTENDS = 105;
    i32 TOKEN_TYPE_KEYW_FINALLY = 106;
    i32 TOKEN_TYPE_KEYW_FLOAT = 107;
    i32 TOKEN_TYPE_KEYW_FOR = 108;
    i32 TOKEN_TYPE_KEYW_FUNCTION = 109;
    i32 TOKEN_TYPE_KEYW_IF = 110;
    i32 TOKEN_TYPE_KEYW_IMPORT = 111;
    i32 TOKEN_TYPE_KEYW_INT = 112;
    i32 TOKEN_TYPE_KEYW_LAUNCH = 113;
    i32 TOKEN_TYPE_KEYW_LONG = 114;
    i32 TOKEN_TYPE_KEYW_NATIVE = 115;
    i32 TOKEN_TYPE_KEYW_NEVER = 116;
    i32 TOKEN_TYPE_KEYW_NEW = 117;
    i32 TOKEN_TYPE_KEYW_NUMBER = 118;
    i32 TOKEN_TYPE_KEYW_OBJECT = 119;
    i32 TOKEN_TYPE_KEYW_FINAL = 120;
    i32 TOKEN_TYPE_KEYW_OVERRIDE = 121;
    i32 TOKEN_TYPE_KEYW_REGEXP = 122;
    i32 TOKEN_TYPE_KEYW_RETHROWS = 123;
    i32 TOKEN_TYPE_KEYW_RETURN = 124;
    i32 TOKEN_TYPE_KEYW_SHORT = 125;
    i32 TOKEN_TYPE_KEYW_STRING = 126;
    i32 TOKEN_TYPE_KEYW_STRUCT = 127;
    i32 TOKEN_TYPE_KEYW_SUPER = 128;
    i32 TOKEN_TYPE_KEYW_SWITCH = 129;
    i32 TOKEN_TYPE_KEYW_THIS = 130;
    i32 TOKEN_TYPE_KEYW_THROW = 131;
    i32 TOKEN_TYPE_KEYW_THROWS = 132;
    i32 TOKEN_TYPE_KEYW_TYPE = 133;
    i32 TOKEN_TYPE_KEYW_TRY = 134;
    i32 TOKEN_TYPE_KEYW_TYPEOF = 135;
    i32 TOKEN_TYPE_KEYW_UNDEFINED = 136;
    i32 TOKEN_TYPE_KEYW_UNKNOWN = 137;
    i32 TOKEN_TYPE_KEYW_VAR = 138;
    i32 TOKEN_TYPE_KEYW_VOID = 139;
    i32 TOKEN_TYPE_KEYW_WHILE = 140;
    i32 TOKEN_TYPE_KEYW_WITH = 141;
    i32 TOKEN_TYPE_KEYW_I8 = 142;
    i32 TOKEN_TYPE_KEYW_I16 = 143;
    i32 TOKEN_TYPE_KEYW_I32 = 144;
    i32 TOKEN_TYPE_KEYW_I64 = 145;
    i32 TOKEN_TYPE_KEYW_ISIZE = 146;
    i32 TOKEN_TYPE_KEYW_U8 = 147;
    i32 TOKEN_TYPE_KEYW_U16 = 148;
    i32 TOKEN_TYPE_KEYW_U32 = 149;
    i32 TOKEN_TYPE_KEYW_U64 = 150;
    i32 TOKEN_TYPE_KEYW_USIZE = 151;
    i32 TOKEN_TYPE_KEYW_F32 = 152;
    i32 TOKEN_TYPE_KEYW_F64 = 153;
    i32 TOKEN_TYPE_KEYW_V128 = 154;
    i32 TOKEN_TYPE_KEYW_FUNCREF = 155;
    i32 TOKEN_TYPE_KEYW_EXTERNREF = 156;
    i32 TOKEN_TYPE_KEYW_ANYREF = 157;
    i32 TOKEN_TYPE_KEYW_EQREF = 158;
    i32 TOKEN_TYPE_KEYW_I31REF = 159;
    i32 TOKEN_TYPE_KEYW_DATAREF = 160;
    i32 TOKEN_TYPE_KEYW_ASYNC = 161;
    i32 TOKEN_TYPE_KEYW_READONLY = 162;
    i32 TOKEN_TYPE_KEYW_KEYOF = 163;
    i32 TOKEN_TYPE_KEYW_MODULE = 164;
    i32 TOKEN_TYPE_KEYW_NAMESPACE = 165;
    i32 TOKEN_TYPE_KEYW_INFER = 166;
    i32 TOKEN_TYPE_KEYW_DECLARE = 167;
    i32 TOKEN_TYPE_KEYW_ARGUMENTS = 168;
    i32 TOKEN_TYPE_KEYW_EVAL = 169;
    i32 TOKEN_TYPE_KEYW_STATIC = 170;
    i32 TOKEN_TYPE_KEYW_GLOBAL = 171;
    i32 TOKEN_TYPE_KEYW_IS = 172;
    i32 TOKEN_TYPE_KEYW_ASSERTS = 173;
    i32 TOKEN_TYPE_KEYW_ASSERT = 174;
    i32 TOKEN_TYPE_KEYW_TRAP = 175;
    i32 TOKEN_TYPE_KEYW_PRIVATE = 176;
    i32 TOKEN_TYPE_KEYW_PROTECTED = 177;
    i32 TOKEN_TYPE_KEYW_PUBLIC = 178;
    i32 TOKEN_TYPE_KEYW_INTERNAL = 179;
    i32 TOKEN_TYPE_KEYW_IMPLEMENTS = 180;
    i32 TOKEN_TYPE_KEYW_INTERFACE = 181;
    i32 TOKEN_TYPE_KEYW_PACKAGE = 182;
    i32 TOKEN_TYPE_KEYW_LET = 183;
    i32 TOKEN_TYPE_KEYW_YIELD = 184;
    i32 TOKEN_TYPE_KEYW_ANY = 84;
};

dictionary Es2pandaAstNodeFlags {
    i32 AST_NODE_FLAGS_NO_OPTS = 0;
    i32 AST_NODE_FLAGS_CHECKCAST = 1;
    i32 AST_NODE_FLAGS_CONVERT_TO_STRING = 2;
    i32 AST_NODE_FLAGS_ALLOW_REQUIRED_INSTANTIATION = 4;
    i32 AST_NODE_FLAGS_HAS_EXPORT_ALIAS = 8;
    i32 AST_NODE_FLAGS_GENERATE_VALUE_OF = 16;
    i32 AST_NODE_FLAGS_GENERATE_GET_NAME = 32;
    i32 AST_NODE_FLAGS_RECHECK = 64;
};

dictionary Es2pandaModifierFlags {
    i32 MODIFIER_FLAGS_NONE = 0;
    i32 MODIFIER_FLAGS_STATIC = 1;
    i32 MODIFIER_FLAGS_ASYNC = 2;
    i32 MODIFIER_FLAGS_PUBLIC = 4;
    i32 MODIFIER_FLAGS_PROTECTED = 8;
    i32 MODIFIER_FLAGS_PRIVATE = 16;
    i32 MODIFIER_FLAGS_DECLARE = 32;
    i32 MODIFIER_FLAGS_READONLY = 64;
    i32 MODIFIER_FLAGS_OPTIONAL = 128;
    i32 MODIFIER_FLAGS_DEFINITE = 256;
    i32 MODIFIER_FLAGS_ABSTRACT = 512;
    i32 MODIFIER_FLAGS_CONST = 1024;
    i32 MODIFIER_FLAGS_FINAL = 2048;
    i32 MODIFIER_FLAGS_NATIVE = 4096;
    i32 MODIFIER_FLAGS_OVERRIDE = 8192;
    i32 MODIFIER_FLAGS_CONSTRUCTOR = 16384;
    i32 MODIFIER_FLAGS_SYNCHRONIZED = 32768;
    i32 MODIFIER_FLAGS_FUNCTIONAL = 65536;
    i32 MODIFIER_FLAGS_IN = 131072;
    i32 MODIFIER_FLAGS_OUT = 262144;
    i32 MODIFIER_FLAGS_INTERNAL = 524288;
    i32 MODIFIER_FLAGS_EXPORT = 1048576;
    i32 MODIFIER_FLAGS_GETTER = 2097152;
    i32 MODIFIER_FLAGS_SETTER = 4194304;
    i32 MODIFIER_FLAGS_DEFAULT_EXPORT = 8388608;
    i32 MODIFIER_FLAGS_EXPORT_TYPE = 16777216;
    i32 MODIFIER_FLAGS_SUPER_OWNER = 33554432;
    i32 MODIFIER_FLAGS_ANNOTATION_DECLARATION = 67108864;
    i32 MODIFIER_FLAGS_ANNOTATION_USAGE = 134217728;
    i32 MODIFIER_FLAGS_READONLY_PARAMETER = 268435456;
    i32 MODIFIER_FLAGS_ACCESS = 524316;
    i32 MODIFIER_FLAGS_ALL = 524927;
    i32 MODIFIER_FLAGS_ALLOWED_IN_CTOR_PARAMETER = 524380;
    i32 MODIFIER_FLAGS_INTERNAL_PROTECTED = 524296;
    i32 MODIFIER_FLAGS_ACCESSOR_MODIFIERS = 2560;
    i32 MODIFIER_FLAGS_GETTER_SETTER = 6291456;
    i32 MODIFIER_FLAGS_EXPORTED = 26214400;
};

dictionary Es2pandaPrivateFieldKind {
    i32 PRIVATE_FIELD_KIND_FIELD = 0;
    i32 PRIVATE_FIELD_KIND_METHOD = 1;
    i32 PRIVATE_FIELD_KIND_GET = 2;
    i32 PRIVATE_FIELD_KIND_SET = 3;
    i32 PRIVATE_FIELD_KIND_STATIC_FIELD = 4;
    i32 PRIVATE_FIELD_KIND_STATIC_METHOD = 5;
    i32 PRIVATE_FIELD_KIND_STATIC_GET = 6;
    i32 PRIVATE_FIELD_KIND_STATIC_SET = 7;
};

dictionary Es2pandaScriptFunctionFlags {
    i32 SCRIPT_FUNCTION_FLAGS_NONE = 0;
    i32 SCRIPT_FUNCTION_FLAGS_GENERATOR = 1;
    i32 SCRIPT_FUNCTION_FLAGS_ASYNC = 2;
    i32 SCRIPT_FUNCTION_FLAGS_ARROW = 4;
    i32 SCRIPT_FUNCTION_FLAGS_EXPRESSION = 8;
    i32 SCRIPT_FUNCTION_FLAGS_OVERLOAD = 16;
    i32 SCRIPT_FUNCTION_FLAGS_CONSTRUCTOR = 32;
    i32 SCRIPT_FUNCTION_FLAGS_METHOD = 64;
    i32 SCRIPT_FUNCTION_FLAGS_STATIC_BLOCK = 128;
    i32 SCRIPT_FUNCTION_FLAGS_HIDDEN = 256;
    i32 SCRIPT_FUNCTION_FLAGS_IMPLICIT_SUPER_CALL_NEEDED = 512;
    i32 SCRIPT_FUNCTION_FLAGS_ENUM = 1024;
    i32 SCRIPT_FUNCTION_FLAGS_EXTERNAL = 2048;
    i32 SCRIPT_FUNCTION_FLAGS_PROXY = 4096;
    i32 SCRIPT_FUNCTION_FLAGS_THROWS = 8192;
    i32 SCRIPT_FUNCTION_FLAGS_RETHROWS = 16384;
    i32 SCRIPT_FUNCTION_FLAGS_GETTER = 32768;
    i32 SCRIPT_FUNCTION_FLAGS_SETTER = 65536;
    i32 SCRIPT_FUNCTION_FLAGS_ENTRY_POINT = 131072;
    i32 SCRIPT_FUNCTION_FLAGS_INSTANCE_EXTENSION_METHOD = 262144;
    i32 SCRIPT_FUNCTION_FLAGS_HAS_RETURN = 524288;
    i32 SCRIPT_FUNCTION_FLAGS_ASYNC_IMPL = 1048576;
    i32 SCRIPT_FUNCTION_FLAGS_EXTERNAL_OVERLOAD = 2097152;
    i32 SCRIPT_FUNCTION_FLAGS_HAS_THROW = 4194304;
};

dictionary Es2pandaTSOperatorType {
    i32 TS_OPERATOR_TYPE_READONLY = 0;
    i32 TS_OPERATOR_TYPE_KEYOF = 1;
    i32 TS_OPERATOR_TYPE_UNIQUE = 2;
};

dictionary Es2pandaMappedOption {
    i32 MAPPED_OPTION_NO_OPTS = 0;
    i32 MAPPED_OPTION_PLUS = 1;
    i32 MAPPED_OPTION_MINUS = 2;
};

dictionary Es2pandaBoxingUnboxingFlags {
    i32 BOXING_UNBOXING_FLAGS_NONE = 0;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_BOOLEAN = 1;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_BYTE = 2;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_SHORT = 4;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_CHAR = 8;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_INT = 16;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_LONG = 32;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_FLOAT = 64;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_DOUBLE = 128;
    i32 BOXING_UNBOXING_FLAGS_BOX_TO_ENUM = 256;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_BOOLEAN = 512;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_BYTE = 1024;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_SHORT = 2048;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_CHAR = 4096;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_INT = 8192;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_LONG = 16384;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_FLOAT = 32768;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_DOUBLE = 65536;
    i32 BOXING_UNBOXING_FLAGS_UNBOX_TO_ENUM = 131072;
    i32 BOXING_UNBOXING_FLAGS_BOXING_FLAG = 511;
    i32 BOXING_UNBOXING_FLAGS_UNBOXING_FLAG = 261632;
};

dictionary Es2pandaClassDefinitionModifiers {
    i32 CLASS_DEFINITION_MODIFIERS_NONE = 0;
    i32 CLASS_DEFINITION_MODIFIERS_DECLARATION = 1;
    i32 CLASS_DEFINITION_MODIFIERS_ID_REQUIRED = 2;
    i32 CLASS_DEFINITION_MODIFIERS_GLOBAL = 4;
    i32 CLASS_DEFINITION_MODIFIERS_HAS_SUPER = 8;
    i32 CLASS_DEFINITION_MODIFIERS_SET_CTOR_ID = 16;
    i32 CLASS_DEFINITION_MODIFIERS_EXTERN = 32;
    i32 CLASS_DEFINITION_MODIFIERS_ANONYMOUS = 64;
    i32 CLASS_DEFINITION_MODIFIERS_GLOBAL_INITIALIZED = 128;
    i32 CLASS_DEFINITION_MODIFIERS_CLASS_DECL = 256;
    i32 CLASS_DEFINITION_MODIFIERS_INNER = 512;
    i32 CLASS_DEFINITION_MODIFIERS_FROM_EXTERNAL = 1024;
    i32 CLASS_DEFINITION_MODIFIERS_LOCAL = 2048;
    i32 CLASS_DEFINITION_MODIFIERS_CLASSDEFINITION_CHECKED = 4096;
    i32 CLASS_DEFINITION_MODIFIERS_DECLARATION_ID_REQUIRED = 3;
};

dictionary Es2pandaOperandKind {
    i32 OPERAND_KIND_SRC_VREG = 0;
    i32 OPERAND_KIND_DST_VREG = 1;
    i32 OPERAND_KIND_SRC_DST_VREG = 2;
    i32 OPERAND_KIND_IMM = 3;
    i32 OPERAND_KIND_ID = 4;
    i32 OPERAND_KIND_STRING_ID = 5;
    i32 OPERAND_KIND_LABEL = 6;
};

dictionary Es2pandaOperandType {
    i32 OPERAND_TYPE_REF = 0;
    i32 OPERAND_TYPE_B32 = 1;
    i32 OPERAND_TYPE_B64 = 2;
    i32 OPERAND_TYPE_ANY = 3;
    i32 OPERAND_TYPE_NONE = 4;
};

dictionary Es2pandaTypeRelationFlag {
    i32 TYPE_RELATION_FLAG_NONE = 0;
    i32 TYPE_RELATION_FLAG_NARROWING = 1;
    i32 TYPE_RELATION_FLAG_WIDENING = 2;
    i32 TYPE_RELATION_FLAG_BOXING = 4;
    i32 TYPE_RELATION_FLAG_UNBOXING = 8;
    i32 TYPE_RELATION_FLAG_CAPTURE = 16;
    i32 TYPE_RELATION_FLAG_STRING = 32;
    i32 TYPE_RELATION_FLAG_VALUE_SET = 64;
    i32 TYPE_RELATION_FLAG_UNCHECKED = 128;
    i32 TYPE_RELATION_FLAG_NO_THROW = 256;
    i32 TYPE_RELATION_FLAG_SELF_REFERENCE = 512;
    i32 TYPE_RELATION_FLAG_NO_RETURN_TYPE_CHECK = 1024;
    i32 TYPE_RELATION_FLAG_DIRECT_RETURN = 2048;
    i32 TYPE_RELATION_FLAG_NO_WIDENING = 4096;
    i32 TYPE_RELATION_FLAG_NO_BOXING = 8192;
    i32 TYPE_RELATION_FLAG_NO_UNBOXING = 16384;
    i32 TYPE_RELATION_FLAG_ONLY_CHECK_WIDENING = 32768;
    i32 TYPE_RELATION_FLAG_ONLY_CHECK_BOXING_UNBOXING = 65536;
    i32 TYPE_RELATION_FLAG_IN_ASSIGNMENT_CONTEXT = 131072;
    i32 TYPE_RELATION_FLAG_IN_CASTING_CONTEXT = 262144;
    i32 TYPE_RELATION_FLAG_UNCHECKED_CAST = 524288;
    i32 TYPE_RELATION_FLAG_IGNORE_TYPE_PARAMETERS = 1048576;
    i32 TYPE_RELATION_FLAG_CHECK_PROXY = 2097152;
    i32 TYPE_RELATION_FLAG_NO_CHECK_TRAILING_LAMBDA = 4194304;
    i32 TYPE_RELATION_FLAG_NO_THROW_GENERIC_TYPEALIAS = 8388608;
    i32 TYPE_RELATION_FLAG_OVERRIDING_CONTEXT = 16777216;
    i32 TYPE_RELATION_FLAG_IGNORE_REST_PARAM = 33554432;
    i32 TYPE_RELATION_FLAG_STRING_TO_CHAR = 67108864;
    i32 TYPE_RELATION_FLAG_ASSIGNMENT_CONTEXT = 14;
    i32 TYPE_RELATION_FLAG_BRIDGE_CHECK = 17826816;
    i32 TYPE_RELATION_FLAG_CASTING_CONTEXT = 524303;
};

dictionary Es2pandaRelationResult {
    i32 RELATION_RESULT_TRUE = 0;
    i32 RELATION_RESULT_FALSE = 1;
    i32 RELATION_RESULT_UNKNOWN = 2;
    i32 RELATION_RESULT_MAYBE = 3;
    i32 RELATION_RESULT_CACHE_MISS = 4;
    i32 RELATION_RESULT_ERROR = 5;
};

dictionary Es2pandaRelationType {
    i32 RELATION_TYPE_COMPARABLE = 0;
    i32 RELATION_TYPE_ASSIGNABLE = 1;
    i32 RELATION_TYPE_IDENTICAL = 2;
    i32 RELATION_TYPE_UNCHECKED_CASTABLE = 3;
    i32 RELATION_TYPE_SUPERTYPE = 4;
};

dictionary Es2pandaImportKinds {
    i32 IMPORT_KINDS_VALUE = 0;
    i32 IMPORT_KINDS_TYPE = 1;
};


typedef u64 Es2pandaTypeFlag;

dictionary Es2pandaPropertyKind {
    i32 PROPERTY_KIND_INIT = 0;
    i32 PROPERTY_KIND_GET = 1;
    i32 PROPERTY_KIND_SET = 2;
    i32 PROPERTY_KIND_PROTO = 3;
};

dictionary Es2pandaConstant {
    i32 CONSTANT_PROP_NULL = 0;
    i32 CONSTANT_PROP_UNDEFINED = 1;
    i32 CONSTANT_EMPTY_ARRAY = 2;
};

dictionary Es2pandaTSSignatureDeclarationKind {
    i32 TS_SIGNATURE_DECLARATION_KIND_CALL_SIGNATURE = 0;
    i32 TS_SIGNATURE_DECLARATION_KIND_CONSTRUCT_SIGNATURE = 1;
};

dictionary Es2pandaTSIndexSignatureKind {
    i32 TS_INDEX_SIGNATURE_KIND_NUMBER = 0;
    i32 TS_INDEX_SIGNATURE_KIND_STRING = 1;
};

dictionary Es2pandaEnumLiteralTypeKind {
    i32 ENUM_LITERAL_TYPE_KIND_NUMERIC = 0;
    i32 ENUM_LITERAL_TYPE_KIND_LITERAL = 1;
};

dictionary Es2pandaIdentifierFlags {
    i32 IDENTIFIER_FLAGS_NONE = 0;
    i32 IDENTIFIER_FLAGS_OPTIONAL = 1;
    i32 IDENTIFIER_FLAGS_TDZ = 2;
    i32 IDENTIFIER_FLAGS_PRIVATE = 4;
    i32 IDENTIFIER_FLAGS_GET = 8;
    i32 IDENTIFIER_FLAGS_SET = 16;
    i32 IDENTIFIER_FLAGS_IGNORE_BOX = 32;
    i32 IDENTIFIER_FLAGS_ANNOTATIONDECL = 64;
    i32 IDENTIFIER_FLAGS_ANNOTATIONUSAGE = 128;
    i32 IDENTIFIER_FLAGS_ERROR_PLACEHOLDER = 256;
};

dictionary Es2pandaMemberExpressionKind {
    i32 MEMBER_EXPRESSION_KIND_NONE = 0;
    i32 MEMBER_EXPRESSION_KIND_ELEMENT_ACCESS = 1;
    i32 MEMBER_EXPRESSION_KIND_PROPERTY_ACCESS = 2;
    i32 MEMBER_EXPRESSION_KIND_GETTER = 4;
    i32 MEMBER_EXPRESSION_KIND_SETTER = 8;
};

dictionary Es2pandaTSTupleKind {
    i32 TS_TUPLE_KIND_NONE = 0;
    i32 TS_TUPLE_KIND_NAMED = 1;
    i32 TS_TUPLE_KIND_DEFAULT = 2;
};

dictionary Es2pandaMetaPropertyKind {
    i32 META_PROPERTY_KIND_NEW_TARGET = 0;
    i32 META_PROPERTY_KIND_IMPORT_META = 1;
};

dictionary Es2pandaElementFlags {
    i32 ELEMENT_FLAGS_NO_OPTS = 0;
    i32 ELEMENT_FLAGS_REQUIRED = 1;
    i32 ELEMENT_FLAGS_OPTIONAL = 2;
    i32 ELEMENT_FLAGS_REST = 4;
    i32 ELEMENT_FLAGS_VARIADIC = 8;
    i32 ELEMENT_FLAGS_FIXED = 3;
    i32 ELEMENT_FLAGS_VARIABLE = 12;
    i32 ELEMENT_FLAGS_NON_REQUIRED = 14;
    i32 ELEMENT_FLAGS_NON_REST = 11;
};

dictionary Es2pandaSignatureFlags {
    i32 SIGNATURE_FLAGS_NO_OPTS = 0;
    i32 SIGNATURE_FLAGS_VIRTUAL = 1;
    i32 SIGNATURE_FLAGS_ABSTRACT = 2;
    i32 SIGNATURE_FLAGS_CALL = 4;
    i32 SIGNATURE_FLAGS_CONSTRUCT = 8;
    i32 SIGNATURE_FLAGS_PUBLIC = 16;
    i32 SIGNATURE_FLAGS_PROTECTED = 32;
    i32 SIGNATURE_FLAGS_PRIVATE = 64;
    i32 SIGNATURE_FLAGS_STATIC = 128;
    i32 SIGNATURE_FLAGS_FINAL = 256;
    i32 SIGNATURE_FLAGS_CONSTRUCTOR = 512;
    i32 SIGNATURE_FLAGS_TYPE = 1024;
    i32 SIGNATURE_FLAGS_PROXY = 2048;
    i32 SIGNATURE_FLAGS_INTERNAL = 4096;
    i32 SIGNATURE_FLAGS_NEED_RETURN_TYPE = 8192;
    i32 SIGNATURE_FLAGS_INFERRED_RETURN_TYPE = 16384;
    i32 SIGNATURE_FLAGS_THIS_RETURN_TYPE = 32768;
    i32 SIGNATURE_FLAGS_GETTER = 65536;
    i32 SIGNATURE_FLAGS_SETTER = 131072;
    i32 SIGNATURE_FLAGS_THROWS = 262144;
    i32 SIGNATURE_FLAGS_RETHROWS = 524288;
    i32 SIGNATURE_FLAGS_INTERNAL_PROTECTED = 4128;
    i32 SIGNATURE_FLAGS_GETTER_OR_SETTER = 196608;
    i32 SIGNATURE_FLAGS_FUNCTIONAL_INTERFACE_SIGNATURE = 1047;
};

dictionary Es2pandaPrimitiveType {
    i32 PRIMITIVE_TYPE_BYTE = 0;
    i32 PRIMITIVE_TYPE_INT = 1;
    i32 PRIMITIVE_TYPE_LONG = 2;
    i32 PRIMITIVE_TYPE_SHORT = 3;
    i32 PRIMITIVE_TYPE_FLOAT = 4;
    i32 PRIMITIVE_TYPE_DOUBLE = 5;
    i32 PRIMITIVE_TYPE_BOOLEAN = 6;
    i32 PRIMITIVE_TYPE_CHAR = 7;
    i32 PRIMITIVE_TYPE_VOID = 8;
};

dictionary Es2pandaObjectFlags {
    i32 OBJECT_FLAGS_NO_OPTS = 0;
    i32 OBJECT_FLAGS_CHECK_EXCESS_PROPS = 1;
    i32 OBJECT_FLAGS_RESOLVED_MEMBERS = 2;
    i32 OBJECT_FLAGS_RESOLVED_BASE_TYPES = 4;
    i32 OBJECT_FLAGS_RESOLVED_DECLARED_MEMBERS = 8;
};

dictionary Es2pandaObjectTypeKind {
    i32 OBJECT_TYPE_KIND_LITERAL = 0;
    i32 OBJECT_TYPE_KIND_CLASS = 1;
    i32 OBJECT_TYPE_KIND_INTERFACE = 2;
    i32 OBJECT_TYPE_KIND_TUPLE = 3;
    i32 OBJECT_TYPE_KIND_FUNCTION = 4;
};

dictionary Es2pandaVariableDeclaratorFlag {
    i32 VARIABLE_DECLARATOR_FLAG_LET = 0;
    i32 VARIABLE_DECLARATOR_FLAG_CONST = 1;
    i32 VARIABLE_DECLARATOR_FLAG_VAR = 2;
    i32 VARIABLE_DECLARATOR_FLAG_UNKNOWN = 3;
};

dictionary Es2pandaTypeFacts {
    i32 TYPE_FACTS_NONE = 0;
    i32 TYPE_FACTS_TYPEOF_EQ_STRING = 1;
    i32 TYPE_FACTS_TYPEOF_EQ_NUMBER = 2;
    i32 TYPE_FACTS_TYPEOF_EQ_BIGINT = 4;
    i32 TYPE_FACTS_TYPEOF_EQ_BOOLEAN = 8;
    i32 TYPE_FACTS_TYPEOF_EQ_SYMBOL = 16;
    i32 TYPE_FACTS_TYPEOF_EQ_OBJECT = 32;
    i32 TYPE_FACTS_TYPEOF_EQ_FUNCTION = 64;
    i32 TYPE_FACTS_TYPEOF_EQ_HOST_OBJECT = 128;
    i32 TYPE_FACTS_TYPEOF_NE_STRING = 256;
    i32 TYPE_FACTS_TYPEOF_NE_NUMBER = 512;
    i32 TYPE_FACTS_TYPEOF_NE_BIGINT = 1024;
    i32 TYPE_FACTS_TYPEOF_NE_BOOLEAN = 2048;
    i32 TYPE_FACTS_TYPEOF_NE_SYMBOL = 4096;
    i32 TYPE_FACTS_TYPEOF_NE_OBJECT = 8192;
    i32 TYPE_FACTS_TYPEOF_NE_FUNCTION = 16384;
    i32 TYPE_FACTS_TYPEOF_NE_HOST_OBJECT = 32768;
    i32 TYPE_FACTS_EQ_UNDEFINED = 65536;
    i32 TYPE_FACTS_EQ_NULL = 131072;
    i32 TYPE_FACTS_EQ_UNDEFINED_OR_NULL = 262144;
    i32 TYPE_FACTS_NE_UNDEFINED = 524288;
    i32 TYPE_FACTS_NE_NULL = 1048576;
    i32 TYPE_FACTS_NE_UNDEFINED_OR_NULL = 2097152;
    i32 TYPE_FACTS_TRUTHY = 4194304;
    i32 TYPE_FACTS_FALSY = 8388608;
    i32 TYPE_FACTS_ALL = 16777216;
    i32 TYPE_FACTS_LAST = 8388608;
    i32 TYPE_FACTS_BASE_NUMBER_STRICT_FACTS = 3734786;
    i32 TYPE_FACTS_BASE_NUMBER_FACTS = 12582146;
    i32 TYPE_FACTS_NUMBER_FACTS = 16776450;
    i32 TYPE_FACTS_ZERO_NUMBER_STRICT_FACTS = 12123394;
    i32 TYPE_FACTS_ZERO_NUMBER_FACTS = 12582146;
    i32 TYPE_FACTS_NON_ZERO_NUMBER_FACTS = 16776450;
    i32 TYPE_FACTS_BASE_STRING_STRICT_FACTS = 3735041;
    i32 TYPE_FACTS_BASE_STRING_FACTS = 12582401;
    i32 TYPE_FACTS_STRING_FACTS = 16776705;
    i32 TYPE_FACTS_EMPTY_STRING_STRICT_FACTS = 16317953;
    i32 TYPE_FACTS_EMPTY_STRING_FACTS = 12582401;
    i32 TYPE_FACTS_NON_EMPTY_STRING_FACTS = 16776705;
    i32 TYPE_FACTS_BASE_BIGINT_STRICT_FACTS = 3734276;
    i32 TYPE_FACTS_BASE_BIGINT_FACTS = 12581636;
    i32 TYPE_FACTS_BIGINT_FACTS = 16775940;
    i32 TYPE_FACTS_ZERO_BIGINT_STRICT_FACTS = 12122884;
    i32 TYPE_FACTS_ZERO_BIGINT_FACTS = 12581636;
    i32 TYPE_FACTS_NON_ZERO_BIGINT_FACTS = 16775940;
    i32 TYPE_FACTS_BASE_BOOLEAN_STRICT_FACTS = 3733256;
    i32 TYPE_FACTS_BASE_BOOLEAN_FACTS = 12580616;
    i32 TYPE_FACTS_BOOLEAN_FACTS = 16774920;
    i32 TYPE_FACTS_FALSE_STRICT_FACTS = 12121864;
    i32 TYPE_FACTS_FALSE_FACTS = 12580616;
    i32 TYPE_FACTS_TRUE_STRICT_FACTS = 7927560;
    i32 TYPE_FACTS_TRUE_FACTS = 16774920;
    i32 TYPE_FACTS_OBJECT_STRICT_FACTS = 7888800;
    i32 TYPE_FACTS_OBJECT_FACTS = 16736160;
    i32 TYPE_FACTS_EMPTY_OBJECT_FACTS = 16777216;
    i32 TYPE_FACTS_FUNCTION_STRICT_FACTS = 7880640;
    i32 TYPE_FACTS_FUNCTION_FACTS = 16728000;
    i32 TYPE_FACTS_UNDEFINED_FACTS = 9830144;
    i32 TYPE_FACTS_NULL_FACTS = 9363232;
};

dictionary Es2pandaGlobalTypeId {
    i32 GLOBAL_TYPE_ID_NUMBER = 0;
    i32 GLOBAL_TYPE_ID_ANY = 1;
    i32 GLOBAL_TYPE_ID_STRING = 2;
    i32 GLOBAL_TYPE_ID_BOOLEAN = 3;
    i32 GLOBAL_TYPE_ID_VOID = 4;
    i32 GLOBAL_TYPE_ID_NULL_ID = 5;
    i32 GLOBAL_TYPE_ID_UNDEFINED = 6;
    i32 GLOBAL_TYPE_ID_UNKNOWN = 7;
    i32 GLOBAL_TYPE_ID_NEVER = 8;
    i32 GLOBAL_TYPE_ID_NON_PRIMITIVE = 9;
    i32 GLOBAL_TYPE_ID_BIGINT = 10;
    i32 GLOBAL_TYPE_ID_FALSE_ID = 11;
    i32 GLOBAL_TYPE_ID_TRUE_ID = 12;
    i32 GLOBAL_TYPE_ID_NUMBER_OR_BIGINT = 13;
    i32 GLOBAL_TYPE_ID_STRING_OR_NUMBER = 14;
    i32 GLOBAL_TYPE_ID_ZERO = 15;
    i32 GLOBAL_TYPE_ID_EMPTY_STRING = 16;
    i32 GLOBAL_TYPE_ID_ZERO_BIGINT = 17;
    i32 GLOBAL_TYPE_ID_PRIMITIVE = 18;
    i32 GLOBAL_TYPE_ID_EMPTY_TUPLE = 19;
    i32 GLOBAL_TYPE_ID_EMPTY_OBJECT = 20;
    i32 GLOBAL_TYPE_ID_RESOLVING_RETURN_TYPE = 21;
    i32 GLOBAL_TYPE_ID_ERROR_TYPE = 22;
    i32 GLOBAL_TYPE_ID_BYTE = 23;
    i32 GLOBAL_TYPE_ID_SHORT = 24;
    i32 GLOBAL_TYPE_ID_INT = 25;
    i32 GLOBAL_TYPE_ID_LONG = 26;
    i32 GLOBAL_TYPE_ID_FLOAT = 27;
    i32 GLOBAL_TYPE_ID_DOUBLE = 28;
    i32 GLOBAL_TYPE_ID_CHAR = 29;
    i32 GLOBAL_TYPE_ID_ETS_BOOLEAN = 30;
    i32 GLOBAL_TYPE_ID_ETS_STRING = 31;
    i32 GLOBAL_TYPE_ID_ETS_VOID = 32;
    i32 GLOBAL_TYPE_ID_ETS_OBJECT_BUILTIN = 33;
    i32 GLOBAL_TYPE_ID_ETS_NULL = 34;
    i32 GLOBAL_TYPE_ID_ETS_UNDEFINED = 35;
    i32 GLOBAL_TYPE_ID_ETS_NULLISH_TYPE = 36;
    i32 GLOBAL_TYPE_ID_ETS_NEVER = 37;
    i32 GLOBAL_TYPE_ID_ETS_NULLISH_OBJECT = 38;
    i32 GLOBAL_TYPE_ID_ETS_WILDCARD = 39;
    i32 GLOBAL_TYPE_ID_ETS_BOOLEAN_BUILTIN = 40;
    i32 GLOBAL_TYPE_ID_ETS_BYTE_BUILTIN = 41;
    i32 GLOBAL_TYPE_ID_ETS_CHAR_BUILTIN = 42;
    i32 GLOBAL_TYPE_ID_ETS_COMPARABLE_BUILTIN = 43;
    i32 GLOBAL_TYPE_ID_ETS_CONSOLE_BUILTIN = 44;
    i32 GLOBAL_TYPE_ID_ETS_DATE_BUILTIN = 45;
    i32 GLOBAL_TYPE_ID_ETS_DOUBLE_BUILTIN = 46;
    i32 GLOBAL_TYPE_ID_ETS_EXCEPTION_BUILTIN = 47;
    i32 GLOBAL_TYPE_ID_ETS_FLOAT_BUILTIN = 48;
    i32 GLOBAL_TYPE_ID_ETS_FLOATING_BUILTIN = 49;
    i32 GLOBAL_TYPE_ID_ETS_INT_BUILTIN = 50;
    i32 GLOBAL_TYPE_ID_ETS_INTEGRAL_BUILTIN = 51;
    i32 GLOBAL_TYPE_ID_ETS_LONG_BUILTIN = 52;
    i32 GLOBAL_TYPE_ID_ETS_MAP_BUILTIN = 53;
    i32 GLOBAL_TYPE_ID_ETS_ERROR_BUILTIN = 54;
    i32 GLOBAL_TYPE_ID_ETS_RUNTIME_BUILTIN = 55;
    i32 GLOBAL_TYPE_ID_ETS_RUNTIME_LINKER_BUILTIN = 56;
    i32 GLOBAL_TYPE_ID_ETS_SET_BUILTIN = 57;
    i32 GLOBAL_TYPE_ID_ETS_SHORT_BUILTIN = 58;
    i32 GLOBAL_TYPE_ID_ETS_STACK_TRACE_ELEMENT_BUILTIN = 59;
    i32 GLOBAL_TYPE_ID_ETS_STACK_TRACE_BUILTIN = 60;
    i32 GLOBAL_TYPE_ID_ETS_NULL_POINTER_EXCEPTION_BUILTIN = 61;
    i32 GLOBAL_TYPE_ID_ETS_ARRAY_INDEX_OUT_OF_BOUNDS_ERROR_BUILTIN = 62;
    i32 GLOBAL_TYPE_ID_ETS_ARITHMETIC_ERROR_BUILTIN = 63;
    i32 GLOBAL_TYPE_ID_ETS_CLASS_NOT_FOUND_EXCEPTION_BUILTIN = 64;
    i32 GLOBAL_TYPE_ID_ETS_CLASS_CAST_ERROR_BUILTIN = 65;
    i32 GLOBAL_TYPE_ID_ETS_OUT_OF_MEMORY_ERROR_BUILTIN = 66;
    i32 GLOBAL_TYPE_ID_ETS_NO_SUCH_METHOD_ERROR_BUILTIN = 67;
    i32 GLOBAL_TYPE_ID_ETS_ASSERTION_ERROR_BUILTIN = 68;
    i32 GLOBAL_TYPE_ID_ETS_DIVIDE_BY_ZERO_ERROR_BUILTIN = 69;
    i32 GLOBAL_TYPE_ID_ETS_NULL_POINTER_ERROR_BUILTIN = 70;
    i32 GLOBAL_TYPE_ID_ETS_UNCAUGHT_EXCEPTION_ERROR_BUILTIN = 71;
    i32 GLOBAL_TYPE_ID_ETS_STRING_BUILTIN = 72;
    i32 GLOBAL_TYPE_ID_ETS_STRING_BUILDER_BUILTIN = 73;
    i32 GLOBAL_TYPE_ID_ETS_TYPE_BUILTIN = 74;
    i32 GLOBAL_TYPE_ID_ETS_TYPES_BUILTIN = 75;
    i32 GLOBAL_TYPE_ID_ETS_PROMISE_BUILTIN = 76;
    i32 GLOBAL_TYPE_ID_ETS_REGEXP_BUILTIN = 77;
    i32 GLOBAL_TYPE_ID_ETS_ARRAY_BUILTIN = 78;
    i32 GLOBAL_TYPE_ID_ETS_INTEROP_JSRUNTIME_BUILTIN = 79;
    i32 GLOBAL_TYPE_ID_ETS_INTEROP_JSVALUE_BUILTIN = 80;
    i32 GLOBAL_TYPE_ID_ETS_BOX_BUILTIN = 81;
    i32 GLOBAL_TYPE_ID_ETS_BOOLEAN_BOX_BUILTIN = 82;
    i32 GLOBAL_TYPE_ID_ETS_BYTE_BOX_BUILTIN = 83;
    i32 GLOBAL_TYPE_ID_ETS_CHAR_BOX_BUILTIN = 84;
    i32 GLOBAL_TYPE_ID_ETS_SHORT_BOX_BUILTIN = 85;
    i32 GLOBAL_TYPE_ID_ETS_INT_BOX_BUILTIN = 86;
    i32 GLOBAL_TYPE_ID_ETS_LONG_BOX_BUILTIN = 87;
    i32 GLOBAL_TYPE_ID_ETS_FLOAT_BOX_BUILTIN = 88;
    i32 GLOBAL_TYPE_ID_ETS_DOUBLE_BOX_BUILTIN = 89;
    i32 GLOBAL_TYPE_ID_ETS_BIG_INT_BUILTIN = 90;
    i32 GLOBAL_TYPE_ID_ETS_BIG_INT = 91;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION0_CLASS = 92;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION1_CLASS = 93;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION2_CLASS = 94;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION3_CLASS = 95;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION4_CLASS = 96;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION5_CLASS = 97;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION6_CLASS = 98;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION7_CLASS = 99;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION8_CLASS = 100;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION9_CLASS = 101;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION10_CLASS = 102;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION11_CLASS = 103;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION12_CLASS = 104;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION13_CLASS = 105;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION14_CLASS = 106;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION15_CLASS = 107;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTION16_CLASS = 108;
    i32 GLOBAL_TYPE_ID_ETS_FUNCTIONN_CLASS = 109;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION0_CLASS = 110;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION1_CLASS = 111;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION2_CLASS = 112;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION3_CLASS = 113;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION4_CLASS = 114;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION5_CLASS = 115;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION6_CLASS = 116;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION7_CLASS = 117;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION8_CLASS = 118;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION9_CLASS = 119;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION10_CLASS = 120;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION11_CLASS = 121;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION12_CLASS = 122;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION13_CLASS = 123;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION14_CLASS = 124;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION15_CLASS = 125;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTION16_CLASS = 126;
    i32 GLOBAL_TYPE_ID_ETS_THROWING_FUNCTIONN_CLASS = 127;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION0_CLASS = 128;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION1_CLASS = 129;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION2_CLASS = 130;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION3_CLASS = 131;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION4_CLASS = 132;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION5_CLASS = 133;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION6_CLASS = 134;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION7_CLASS = 135;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION8_CLASS = 136;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION9_CLASS = 137;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION10_CLASS = 138;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION11_CLASS = 139;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION12_CLASS = 140;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION13_CLASS = 141;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION14_CLASS = 142;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION15_CLASS = 143;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTION16_CLASS = 144;
    i32 GLOBAL_TYPE_ID_ETS_RETHROWING_FUNCTIONN_CLASS = 145;
    i32 GLOBAL_TYPE_ID_TYPE_ERROR = 146;
    i32 GLOBAL_TYPE_ID_COUNT = 147;
};

dictionary Es2pandaMethodDefinitionKind {
    i32 METHOD_DEFINITION_KIND_NONE = 0;
    i32 METHOD_DEFINITION_KIND_CONSTRUCTOR = 1;
    i32 METHOD_DEFINITION_KIND_METHOD = 2;
    i32 METHOD_DEFINITION_KIND_EXTENSION_METHOD = 3;
    i32 METHOD_DEFINITION_KIND_GET = 4;
    i32 METHOD_DEFINITION_KIND_SET = 5;
};

dictionary Es2pandaETSObjectFlags {
    i32 ETS_OBJECT_FLAGS_NO_OPTS = 0;
    i32 ETS_OBJECT_FLAGS_CLASS = 1;
    i32 ETS_OBJECT_FLAGS_INTERFACE = 2;
    i32 ETS_OBJECT_FLAGS_INSTANCE = 4;
    i32 ETS_OBJECT_FLAGS_ABSTRACT = 8;
    i32 ETS_OBJECT_FLAGS_GLOBAL = 16;
    i32 ETS_OBJECT_FLAGS_ENUM = 32;
    i32 ETS_OBJECT_FLAGS_FUNCTIONAL = 64;
    i32 ETS_OBJECT_FLAGS_RESOLVED_INTERFACES = 128;
    i32 ETS_OBJECT_FLAGS_RESOLVED_SUPER = 256;
    i32 ETS_OBJECT_FLAGS_RESOLVED_TYPE_PARAMS = 512;
    i32 ETS_OBJECT_FLAGS_CHECKED_COMPATIBLE_ABSTRACTS = 1024;
    i32 ETS_OBJECT_FLAGS_STRING = 2048;
    i32 ETS_OBJECT_FLAGS_INCOMPLETE_INSTANTIATION = 4096;
    i32 ETS_OBJECT_FLAGS_INNER = 8192;
    i32 ETS_OBJECT_FLAGS_DYNAMIC = 16384;
    i32 ETS_OBJECT_FLAGS_ASYNC_FUNC_RETURN_TYPE = 32768;
    i32 ETS_OBJECT_FLAGS_CHECKED_INVOKE_LEGITIMACY = 65536;
    i32 ETS_OBJECT_FLAGS_REQUIRED = 131072;
    i32 ETS_OBJECT_FLAGS_READONLY = 262144;
    i32 ETS_OBJECT_FLAGS_BUILTIN_BIGINT = 524288;
    i32 ETS_OBJECT_FLAGS_BUILTIN_STRING = 1048576;
    i32 ETS_OBJECT_FLAGS_BUILTIN_BOOLEAN = 2097152;
    i32 ETS_OBJECT_FLAGS_BUILTIN_BYTE = 4194304;
    i32 ETS_OBJECT_FLAGS_BUILTIN_CHAR = 8388608;
    i32 ETS_OBJECT_FLAGS_BUILTIN_SHORT = 16777216;
    i32 ETS_OBJECT_FLAGS_BUILTIN_INT = 33554432;
    i32 ETS_OBJECT_FLAGS_BUILTIN_LONG = 67108864;
    i32 ETS_OBJECT_FLAGS_BUILTIN_FLOAT = 134217728;
    i32 ETS_OBJECT_FLAGS_BUILTIN_DOUBLE = 268435456;
    i32 ETS_OBJECT_FLAGS_BOXED_ENUM = 536870912;
    i32 ETS_OBJECT_FLAGS_BUILTIN_NUMERIC = 524288000;
    i32 ETS_OBJECT_FLAGS_VALUE_TYPED = 535300096;
    i32 ETS_OBJECT_FLAGS_UNBOXABLE_TYPE = 1071644672;
    i32 ETS_OBJECT_FLAGS_BUILTIN_TYPE = 1073217536;
    i32 ETS_OBJECT_FLAGS_GLOBAL_CLASS = 17;
    i32 ETS_OBJECT_FLAGS_FUNCTIONAL_INTERFACE = 74;
    i32 ETS_OBJECT_FLAGS_RESOLVED_HEADER = 896;
};

dictionary Es2pandaPropertySearchFlags {
    i32 PROPERTY_SEARCH_FLAGS_NO_OPTS = 0;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_INSTANCE_METHOD = 1;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_INSTANCE_FIELD = 2;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_INSTANCE_DECL = 4;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_STATIC_METHOD = 8;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_STATIC_FIELD = 16;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_STATIC_DECL = 32;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_IN_BASE = 64;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_IN_INTERFACES = 128;
    i32 PROPERTY_SEARCH_FLAGS_IGNORE_ABSTRACT = 256;
    i32 PROPERTY_SEARCH_FLAGS_ALLOW_FUNCTIONAL_INTERFACE = 512;
    i32 PROPERTY_SEARCH_FLAGS_DISALLOW_SYNTHETIC_METHOD_CREATION = 1024;
    i32 PROPERTY_SEARCH_FLAGS_IS_FUNCTIONAL = 2048;
    i32 PROPERTY_SEARCH_FLAGS_IS_SETTER = 4096;
    i32 PROPERTY_SEARCH_FLAGS_IS_GETTER = 8192;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_INSTANCE = 7;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_STATIC = 56;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_METHOD = 9;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_FIELD = 18;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_DECL = 36;
    i32 PROPERTY_SEARCH_FLAGS_SEARCH_ALL = 63;
};

dictionary Es2pandaPropertyType {
    i32 PROPERTY_TYPE_INSTANCE_METHOD = 0;
    i32 PROPERTY_TYPE_INSTANCE_FIELD = 1;
    i32 PROPERTY_TYPE_INSTANCE_DECL = 2;
    i32 PROPERTY_TYPE_STATIC_METHOD = 3;
    i32 PROPERTY_TYPE_STATIC_FIELD = 4;
    i32 PROPERTY_TYPE_STATIC_DECL = 5;
    i32 PROPERTY_TYPE_COUNT = 6;
};

dictionary Es2pandaVariableDeclarationKind {
    i32 VARIABLE_DECLARATION_KIND_CONST = 0;
    i32 VARIABLE_DECLARATION_KIND_LET = 1;
    i32 VARIABLE_DECLARATION_KIND_VAR = 2;
};

dictionary Es2pandaAccessibilityOption {
    i32 ACCESSIBILITY_OPTION_NO_OPTS = 0;
    i32 ACCESSIBILITY_OPTION_PUBLIC = 1;
    i32 ACCESSIBILITY_OPTION_PRIVATE = 2;
    i32 ACCESSIBILITY_OPTION_PROTECTED = 3;
};

dictionary Es2pandaRecordTableFlags {
    i32 RECORD_TABLE_FLAGS_NONE = 0;
    i32 RECORD_TABLE_FLAGS_EXTERNAL = 1;
};

dictionary Es2pandaCheckerStatus {
    i32 CHECKER_STATUS_NO_OPTS = 0;
    i32 CHECKER_STATUS_FORCE_TUPLE = 1;
    i32 CHECKER_STATUS_IN_CONST_CONTEXT = 2;
    i32 CHECKER_STATUS_KEEP_LITERAL_TYPE = 4;
    i32 CHECKER_STATUS_IN_PARAMETER = 8;
    i32 CHECKER_STATUS_IN_CLASS = 16;
    i32 CHECKER_STATUS_IN_INTERFACE = 32;
    i32 CHECKER_STATUS_IN_ABSTRACT = 64;
    i32 CHECKER_STATUS_IN_STATIC_CONTEXT = 128;
    i32 CHECKER_STATUS_IN_CONSTRUCTOR = 256;
    i32 CHECKER_STATUS_IN_STATIC_BLOCK = 512;
    i32 CHECKER_STATUS_INNER_CLASS = 1024;
    i32 CHECKER_STATUS_IN_ENUM = 2048;
    i32 CHECKER_STATUS_BUILTINS_INITIALIZED = 4096;
    i32 CHECKER_STATUS_IN_LAMBDA = 8192;
    i32 CHECKER_STATUS_IGNORE_VISIBILITY = 16384;
    i32 CHECKER_STATUS_IN_INSTANCE_EXTENSION_METHOD = 32768;
    i32 CHECKER_STATUS_IN_LOCAL_CLASS = 65536;
    i32 CHECKER_STATUS_IN_INSTANCEOF_CONTEXT = 131072;
    i32 CHECKER_STATUS_IN_TEST_EXPRESSION = 262144;
    i32 CHECKER_STATUS_IN_LOOP = 524288;
    i32 CHECKER_STATUS_MEET_RETURN = 1048576;
    i32 CHECKER_STATUS_MEET_BREAK = 2097152;
    i32 CHECKER_STATUS_MEET_CONTINUE = 4194304;
    i32 CHECKER_STATUS_MEET_THROW = 8388608;
    i32 CHECKER_STATUS_IN_EXTERNAL = 16777216;
    i32 CHECKER_STATUS_IN_BRIDGE_TEST = 33554432;
    i32 CHECKER_STATUS_IN_GETTER = 67108864;
    i32 CHECKER_STATUS_IN_SETTER = 134217728;
};

dictionary Es2pandaOverrideErrorCode {
    i32 OVERRIDE_ERROR_CODE_NO_ERROR = 0;
    i32 OVERRIDE_ERROR_CODE_OVERRIDDEN_FINAL = 1;
    i32 OVERRIDE_ERROR_CODE_INCOMPATIBLE_RETURN = 2;
    i32 OVERRIDE_ERROR_CODE_OVERRIDDEN_WEAKER = 3;
};

dictionary Es2pandaResolvedKind {
    i32 RESOLVED_KIND_PROPERTY = 0;
    i32 RESOLVED_KIND_INSTANCE_EXTENSION_FUNCTION = 1;
};

dictionary Es2pandaLexicalScopeType {
    i32 LEXICAL_SCOPE_TYPE_BLOCK = 0;
    i32 LEXICAL_SCOPE_TYPE_STRICT_BLOCK = 1;
    i32 LEXICAL_SCOPE_TYPE_CATCH = 2;
    i32 LEXICAL_SCOPE_TYPE_FUNCTION_PARAM = 3;
    i32 LEXICAL_SCOPE_TYPE_TS_TYPE_LITERAL = 4;
};

dictionary Es2pandaVariableParsingFlags {
    i32 VARIABLE_PARSING_FLAGS_NO_OPTS = 0;
    i32 VARIABLE_PARSING_FLAGS_NO_SKIP_VAR_KIND = 1;
    i32 VARIABLE_PARSING_FLAGS_ACCEPT_CONST_NO_INIT = 2;
    i32 VARIABLE_PARSING_FLAGS_DISALLOW_INIT = 4;
    i32 VARIABLE_PARSING_FLAGS_VAR = 8;
    i32 VARIABLE_PARSING_FLAGS_LET = 16;
    i32 VARIABLE_PARSING_FLAGS_CONST = 32;
    i32 VARIABLE_PARSING_FLAGS_STOP_AT_IN = 64;
    i32 VARIABLE_PARSING_FLAGS_IN_FOR = 128;
    i32 VARIABLE_PARSING_FLAGS_FOR_OF = 256;
};

dictionary Es2pandaExpressionParseFlags {
    i32 EXPRESSION_PARSE_FLAGS_NO_OPTS = 0;
    i32 EXPRESSION_PARSE_FLAGS_ACCEPT_COMMA = 1;
    i32 EXPRESSION_PARSE_FLAGS_ACCEPT_REST = 2;
    i32 EXPRESSION_PARSE_FLAGS_EXP_DISALLOW_AS = 4;
    i32 EXPRESSION_PARSE_FLAGS_DISALLOW_ASSIGNMENT = 8;
    i32 EXPRESSION_PARSE_FLAGS_DISALLOW_YIELD = 16;
    i32 EXPRESSION_PARSE_FLAGS_STOP_AT_IN = 32;
    i32 EXPRESSION_PARSE_FLAGS_MUST_BE_PATTERN = 64;
    i32 EXPRESSION_PARSE_FLAGS_POTENTIALLY_IN_PATTERN = 128;
    i32 EXPRESSION_PARSE_FLAGS_OBJECT_PATTERN = 256;
    i32 EXPRESSION_PARSE_FLAGS_IN_REST = 512;
    i32 EXPRESSION_PARSE_FLAGS_IMPORT = 1024;
    i32 EXPRESSION_PARSE_FLAGS_POTENTIAL_CLASS_LITERAL = 2048;
    i32 EXPRESSION_PARSE_FLAGS_IN_FOR = 4096;
    i32 EXPRESSION_PARSE_FLAGS_INSTANCEOF = 8192;
    i32 EXPRESSION_PARSE_FLAGS_POTENTIAL_NEW_ARRAY = 16384;
};

dictionary Es2pandaStatementParsingFlags {
    i32 STATEMENT_PARSING_FLAGS_NONE = 0;
    i32 STATEMENT_PARSING_FLAGS_ALLOW_LEXICAL = 1;
    i32 STATEMENT_PARSING_FLAGS_GLOBAL = 2;
    i32 STATEMENT_PARSING_FLAGS_IF_ELSE = 4;
    i32 STATEMENT_PARSING_FLAGS_LABELLED = 8;
    i32 STATEMENT_PARSING_FLAGS_STMT_LEXICAL_SCOPE_NEEDED = 12;
    i32 STATEMENT_PARSING_FLAGS_STMT_GLOBAL_LEXICAL = 3;
};

dictionary Es2pandaForStatementKind {
    i32 FOR_STATEMENT_KIND_UPDATE = 0;
    i32 FOR_STATEMENT_KIND_IN = 1;
    i32 FOR_STATEMENT_KIND_OF = 2;
};

dictionary Es2pandaCompilationMode {
    i32 COMPILATION_MODE_GEN_STD_LIB = 0;
    i32 COMPILATION_MODE_PROJECT = 1;
    i32 COMPILATION_MODE_SINGLE_FILE = 2;
};

dictionary Es2pandaErrorType {
    i32 ERROR_TYPE_INVALID = 0;
    i32 ERROR_TYPE_GENERIC = 1;
    i32 ERROR_TYPE_SYNTAX = 2;
    i32 ERROR_TYPE_TYPE = 3;
    i32 ERROR_TYPE_ETS_WARNING = 4;
};

dictionary Es2pandaCheckDecision {
    i32 CHECK_DECISION_CORRECT = 0;
    i32 CHECK_DECISION_INCORRECT = 1;
};

dictionary Es2pandaCheckAction {
    i32 CHECK_ACTION_CONTINUE = 0;
    i32 CHECK_ACTION_SKIP_SUBTREE = 1;
};



interface es2panda_Impl {
    es2panda_Config CreateConfig(i32 argc, sequence<String> argv);
    void DestroyConfig(es2panda_Config config);

    es2panda_Context CreateContextFromFile(es2panda_Config config, String source_file_name);
    es2panda_Context CreateContextFromString(es2panda_Config config, String source, String file_name);
    es2panda_Context ProceedToState(es2panda_Context context, es2panda_ContextState state);  // context is consumed
    void DestroyContext(es2panda_Context context);

    es2panda_ContextState ContextState(es2panda_Context context);
    String ContextErrorMessage(es2panda_Context context);

    es2panda_Program ContextProgram(es2panda_Context context);
    es2panda_AstNode ProgramAst(es2panda_Program program);
    sequence<es2panda_ExternalSource> ProgramExternalSources(es2panda_Program program, sequence<u32> len_p);
    String ExternalSourceName(es2panda_ExternalSource e_source);
    sequence<es2panda_Program> ExternalSourcePrograms(es2panda_ExternalSource e_source, sequence<u32> len_p);

    void AstNodeForEach(es2panda_AstNode ast, AstNodeForEachFunction func, VoidPtr arg);

    bool SetNumberLiteralInt(es2panda_AstNode node, i32 new_value);
    bool SetNumberLiteralLong(es2panda_AstNode node, i64 new_value);
    bool SetNumberLiteralDouble(es2panda_AstNode node, double new_value);
    bool SetNumberLiteralFloat(es2panda_AstNode node, float new_value);

    es2panda_AstNode CreateNumberLiteral(es2panda_Context ctx, i32 value);
    es2panda_AstNode CreateNumberLiteral1(es2panda_Context ctx, i64 value);
    es2panda_AstNode CreateNumberLiteral2(es2panda_Context ctx, double value);
    es2panda_AstNode CreateNumberLiteral3(es2panda_Context ctx, float value);

    es2panda_AstNode UpdateNumberLiteral(es2panda_Context ctx, es2panda_AstNode original, i32 value);
    es2panda_AstNode UpdateNumberLiteral1(es2panda_Context ctx, es2panda_AstNode original, i64 value);
    es2panda_AstNode UpdateNumberLiteral2(es2panda_Context ctx, es2panda_AstNode original, double value);
    es2panda_AstNode UpdateNumberLiteral3(es2panda_Context ctx, es2panda_AstNode original, float value);

    VoidPtr AllocMemory(es2panda_Context context, u32 numberOfElements, u32 sizeOfElement);

    es2panda_SourcePosition CreateSourcePosition(es2panda_Context context, u32 index, u32 line);
    es2panda_SourceRange CreateSourceRange(es2panda_Context context, es2panda_SourcePosition start,
                                               es2panda_SourcePosition end);
    u32 SourcePositionIndex(es2panda_Context context, es2panda_SourcePosition position);
    u32 SourcePositionLine(es2panda_Context context, es2panda_SourcePosition position);
    es2panda_SourcePosition SourceRangeStart(es2panda_Context context, es2panda_SourceRange range);
    es2panda_SourcePosition SourceRangeEnd(es2panda_Context context, es2panda_SourceRange range);
    void LogTypeError(es2panda_Context context, String errorMsg, es2panda_SourcePosition pos);
    void LogWarning(es2panda_Context context, String warnMsg, es2panda_SourcePosition pos);
    void LogSyntaxError(es2panda_Context context, String errorMsg, es2panda_SourcePosition pos);
    void InitScopesPhaseETSRunExternalNode(es2panda_Context ctx, es2panda_AstNode node);
    es2panda_Scope AstNodeFindNearestScope(es2panda_Context ctx, es2panda_AstNode node);
    void AstNodeRecheck(es2panda_Context ctx, es2panda_AstNode node);
    Es2pandaEnum Es2pandaEnumFromString(es2panda_Context ctx, String str);
    String Es2pandaEnumToString(es2panda_Context ctx, Es2pandaEnum id);

    bool IsExpression(es2panda_AstNode ast);
    bool IsStatement(es2panda_AstNode ast);
    bool IsArrowFunctionExpression(es2panda_AstNode ast);
    bool IsAnnotationDeclaration(es2panda_AstNode ast);
    bool IsAnnotationUsage(es2panda_AstNode ast);
    bool IsAssertStatement(es2panda_AstNode ast);
    bool IsAwaitExpression(es2panda_AstNode ast);
    bool IsBigIntLiteral(es2panda_AstNode ast);
    bool IsBinaryExpression(es2panda_AstNode ast);
    bool IsBlockStatement(es2panda_AstNode ast);
    bool IsBooleanLiteral(es2panda_AstNode ast);
    bool IsBreakStatement(es2panda_AstNode ast);
    bool IsCallExpression(es2panda_AstNode ast);
    bool IsCatchClause(es2panda_AstNode ast);
    bool IsChainExpression(es2panda_AstNode ast);
    bool IsCharLiteral(es2panda_AstNode ast);
    bool IsClassDefinition(es2panda_AstNode ast);
    bool IsClassDeclaration(es2panda_AstNode ast);
    bool IsClassExpression(es2panda_AstNode ast);
    bool IsClassProperty(es2panda_AstNode ast);
    bool IsClassStaticBlock(es2panda_AstNode ast);
    bool IsConditionalExpression(es2panda_AstNode ast);
    bool IsContinueStatement(es2panda_AstNode ast);
    bool IsDebuggerStatement(es2panda_AstNode ast);
    bool IsDecorator(es2panda_AstNode ast);
    bool IsDirectEvalExpression(es2panda_AstNode ast);
    bool IsDoWhileStatement(es2panda_AstNode ast);
    bool IsEmptyStatement(es2panda_AstNode ast);
    bool IsExportAllDeclaration(es2panda_AstNode ast);
    bool IsExportDefaultDeclaration(es2panda_AstNode ast);
    bool IsExportNamedDeclaration(es2panda_AstNode ast);
    bool IsExportSpecifier(es2panda_AstNode ast);
    bool IsExpressionStatement(es2panda_AstNode ast);
    bool IsForInStatement(es2panda_AstNode ast);
    bool IsForOfStatement(es2panda_AstNode ast);
    bool IsForUpdateStatement(es2panda_AstNode ast);
    bool IsFunctionDeclaration(es2panda_AstNode ast);
    bool IsFunctionExpression(es2panda_AstNode ast);
    bool IsIdentifier(es2panda_AstNode ast);
    bool IsDummyNode(es2panda_AstNode ast);
    bool IsIfStatement(es2panda_AstNode ast);
    bool IsImportDeclaration(es2panda_AstNode ast);
    bool IsImportExpression(es2panda_AstNode ast);
    bool IsImportDefaultSpecifier(es2panda_AstNode ast);
    bool IsImportNamespaceSpecifier(es2panda_AstNode ast);
    bool IsImportSpecifier(es2panda_AstNode ast);
    bool IsLabelledStatement(es2panda_AstNode ast);
    bool IsMemberExpression(es2panda_AstNode ast);
    bool IsMetaProperty(es2panda_AstNode ast);
    bool IsMethodDefinition(es2panda_AstNode ast);
    bool IsNamedType(es2panda_AstNode ast);
    bool IsNamespaceDeclaration(es2panda_AstNode ast);
    bool IsNamespaceDefinition(es2panda_AstNode ast);
    bool IsNewExpression(es2panda_AstNode ast);
    bool IsNullLiteral(es2panda_AstNode ast);
    bool IsUndefinedLiteral(es2panda_AstNode ast);
    bool IsNumberLiteral(es2panda_AstNode ast);
    bool IsOmittedExpression(es2panda_AstNode ast);
    bool IsPrefixAssertionExpression(es2panda_AstNode ast);
    bool IsProperty(es2panda_AstNode ast);
    bool IsRegExpLiteral(es2panda_AstNode ast);
    bool IsETSReExportDeclaration(es2panda_AstNode ast);
    bool IsReturnStatement(es2panda_AstNode ast);
    bool IsScriptFunction(es2panda_AstNode ast);
    bool IsSequenceExpression(es2panda_AstNode ast);
    bool IsStringLiteral(es2panda_AstNode ast);
    bool IsETSNullType(es2panda_AstNode ast);
    bool IsETSUndefinedType(es2panda_AstNode ast);
    bool IsETSNeverType(es2panda_AstNode ast);
    bool IsETSStringLiteralType(es2panda_AstNode ast);
    bool IsETSFunctionType(es2panda_AstNode ast);
    bool IsETSWildcardType(es2panda_AstNode ast);
    bool IsETSPrimitiveType(es2panda_AstNode ast);
    bool IsETSPackageDeclaration(es2panda_AstNode ast);
    bool IsETSClassLiteral(es2panda_AstNode ast);
    bool IsETSTypeReference(es2panda_AstNode ast);
    bool IsETSTypeReferencePart(es2panda_AstNode ast);
    bool IsETSUnionType(es2panda_AstNode ast);
    bool IsETSLaunchExpression(es2panda_AstNode ast);
    bool IsETSNewArrayInstanceExpression(es2panda_AstNode ast);
    bool IsETSNewMultiDimArrayInstanceExpression(es2panda_AstNode ast);
    bool IsETSNewClassInstanceExpression(es2panda_AstNode ast);
    bool IsETSImportDeclaration(es2panda_AstNode ast);
    bool IsETSParameterExpression(es2panda_AstNode ast);
    bool IsETSTuple(es2panda_AstNode ast);
    bool IsETSScript(es2panda_AstNode ast);
    bool IsSuperExpression(es2panda_AstNode ast);
    bool IsETSStructDeclaration(es2panda_AstNode ast);
    bool IsSwitchCaseStatement(es2panda_AstNode ast);
    bool IsSwitchStatement(es2panda_AstNode ast);
    bool IsTSEnumDeclaration(es2panda_AstNode ast);
    bool IsTSEnumMember(es2panda_AstNode ast);
    bool IsTSExternalModuleReference(es2panda_AstNode ast);
    bool IsTSNumberKeyword(es2panda_AstNode ast);
    bool IsTSAnyKeyword(es2panda_AstNode ast);
    bool IsTSStringKeyword(es2panda_AstNode ast);
    bool IsTSBooleanKeyword(es2panda_AstNode ast);
    bool IsTSVoidKeyword(es2panda_AstNode ast);
    bool IsTSUndefinedKeyword(es2panda_AstNode ast);
    bool IsTSUnknownKeyword(es2panda_AstNode ast);
    bool IsTSObjectKeyword(es2panda_AstNode ast);
    bool IsTSBigintKeyword(es2panda_AstNode ast);
    bool IsTSNeverKeyword(es2panda_AstNode ast);
    bool IsTSNonNullExpression(es2panda_AstNode ast);
    bool IsTSNullKeyword(es2panda_AstNode ast);
    bool IsTSArrayType(es2panda_AstNode ast);
    bool IsTSUnionType(es2panda_AstNode ast);
    bool IsTSTypeLiteral(es2panda_AstNode ast);
    bool IsTSPropertySignature(es2panda_AstNode ast);
    bool IsTSMethodSignature(es2panda_AstNode ast);
    bool IsTSSignatureDeclaration(es2panda_AstNode ast);
    bool IsTSParenthesizedType(es2panda_AstNode ast);
    bool IsTSLiteralType(es2panda_AstNode ast);
    bool IsTSInferType(es2panda_AstNode ast);
    bool IsTSConditionalType(es2panda_AstNode ast);
    bool IsTSImportType(es2panda_AstNode ast);
    bool IsTSIntersectionType(es2panda_AstNode ast);
    bool IsTSMappedType(es2panda_AstNode ast);
    bool IsTSModuleBlock(es2panda_AstNode ast);
    bool IsTSThisType(es2panda_AstNode ast);
    bool IsTSTypeOperator(es2panda_AstNode ast);
    bool IsTSTypeParameter(es2panda_AstNode ast);
    bool IsTSTypeParameterDeclaration(es2panda_AstNode ast);
    bool IsTSTypeParameterInstantiation(es2panda_AstNode ast);
    bool IsTSTypePredicate(es2panda_AstNode ast);
    bool IsTSParameterProperty(es2panda_AstNode ast);
    bool IsTSModuleDeclaration(es2panda_AstNode ast);
    bool IsTSImportEqualsDeclaration(es2panda_AstNode ast);
    bool IsTSFunctionType(es2panda_AstNode ast);
    bool IsTSConstructorType(es2panda_AstNode ast);
    bool IsTSTypeAliasDeclaration(es2panda_AstNode ast);
    bool IsTSTypeReference(es2panda_AstNode ast);
    bool IsTSQualifiedName(es2panda_AstNode ast);
    bool IsTSIndexedAccessType(es2panda_AstNode ast);
    bool IsTSInterfaceDeclaration(es2panda_AstNode ast);
    bool IsTSInterfaceBody(es2panda_AstNode ast);
    bool IsTSInterfaceHeritage(es2panda_AstNode ast);
    bool IsTSTupleType(es2panda_AstNode ast);
    bool IsTSNamedTupleMember(es2panda_AstNode ast);
    bool IsTSIndexSignature(es2panda_AstNode ast);
    bool IsTSTypeQuery(es2panda_AstNode ast);
    bool IsTSAsExpression(es2panda_AstNode ast);
    bool IsTSClassImplements(es2panda_AstNode ast);
    bool IsTSTypeAssertion(es2panda_AstNode ast);
    bool IsTaggedTemplateExpression(es2panda_AstNode ast);
    bool IsTemplateElement(es2panda_AstNode ast);
    bool IsTemplateLiteral(es2panda_AstNode ast);
    bool IsThisExpression(es2panda_AstNode ast);
    bool IsTypeofExpression(es2panda_AstNode ast);
    bool IsThrowStatement(es2panda_AstNode ast);
    bool IsTryStatement(es2panda_AstNode ast);
    bool IsUnaryExpression(es2panda_AstNode ast);
    bool IsUpdateExpression(es2panda_AstNode ast);
    bool IsVariableDeclaration(es2panda_AstNode ast);
    bool IsVariableDeclarator(es2panda_AstNode ast);
    bool IsWhileStatement(es2panda_AstNode ast);
    bool IsYieldExpression(es2panda_AstNode ast);
    bool IsOpaqueTypeNode(es2panda_AstNode ast);
    bool IsBlockExpression(es2panda_AstNode ast);
    bool IsErrorTypeNode(es2panda_AstNode ast);
    bool IsArrayExpression(es2panda_AstNode ast);
    bool IsArrayPattern(es2panda_AstNode ast);
    bool IsAssignmentExpression(es2panda_AstNode ast);
    bool IsAssignmentPattern(es2panda_AstNode ast);
    bool IsObjectExpression(es2panda_AstNode ast);
    bool IsObjectPattern(es2panda_AstNode ast);
    bool IsSpreadElement(es2panda_AstNode ast);
    bool IsRestElement(es2panda_AstNode ast);

    bool ScopeIsVariableScope(es2panda_Scope scope);
    bool ScopeIsParamScope(es2panda_Scope scope);
    bool ScopeIsCatchParamScope(es2panda_Scope scope);
    bool ScopeIsFunctionParamScope(es2panda_Scope scope);
    bool ScopeIsCatchScope(es2panda_Scope scope);
    bool ScopeIsClassScope(es2panda_Scope scope);
    bool ScopeIsAnnotationScope(es2panda_Scope scope);
    bool ScopeIsAnnotationParamScope(es2panda_Scope scope);
    bool ScopeIsLocalScope(es2panda_Scope scope);
    bool ScopeIsLocalScopeWithTypeAlias(es2panda_Scope scope);
    bool ScopeIsLoopScope(es2panda_Scope scope);
    bool ScopeIsLoopDeclarationScope(es2panda_Scope scope);
    bool ScopeIsFunctionScope(es2panda_Scope scope);
    bool ScopeIsGlobalScope(es2panda_Scope scope);
    bool ScopeIsModuleScope(es2panda_Scope scope);

    bool TypeIsArrayType(es2panda_Type type);
    bool TypeIsAnyType(es2panda_Type type);
    bool TypeIsBigintLiteralType(es2panda_Type type);
    bool TypeIsNumberType(es2panda_Type type);
    bool TypeIsStringType(es2panda_Type type);
    bool TypeIsBooleanType(es2panda_Type type);
    bool TypeIsVoidType(es2panda_Type type);
    bool TypeIsNullType(es2panda_Type type);
    bool TypeIsUndefinedType(es2panda_Type type);
    bool TypeIsUnknownType(es2panda_Type type);
    bool TypeIsNeverType(es2panda_Type type);
    bool TypeIsUnionType(es2panda_Type type);
    bool TypeIsObjectType(es2panda_Type type);
    bool TypeIsBigintType(es2panda_Type type);
    bool TypeIsBooleanLiteralType(es2panda_Type type);
    bool TypeIsNumberLiteralType(es2panda_Type type);
    bool TypeIsStringLiteralType(es2panda_Type type);
    bool TypeIsEnumType(es2panda_Type type);
    bool TypeIsEnumLiteralType(es2panda_Type type);
    bool TypeIsTypeParameter(es2panda_Type type);
    bool TypeIsTypeReference(es2panda_Type type);
    bool TypeIsByteType(es2panda_Type type);
    bool TypeIsShortType(es2panda_Type type);
    bool TypeIsIntType(es2panda_Type type);
    bool TypeIsLongType(es2panda_Type type);
    bool TypeIsFloatType(es2panda_Type type);
    bool TypeIsDoubleType(es2panda_Type type);
    bool TypeIsCharType(es2panda_Type type);
    bool TypeIsETSBooleanType(es2panda_Type type);
    bool TypeIsETSVoidType(es2panda_Type type);
    bool TypeIsETSNullType(es2panda_Type type);
    bool TypeIsETSUndefinedType(es2panda_Type type);
    bool TypeIsETSNeverType(es2panda_Type type);
    bool TypeIsETSFunctionType(es2panda_Type type);
    bool TypeIsETSObjectType(es2panda_Type type);
    bool TypeIsETSArrayType(es2panda_Type type);
    bool TypeIsETSUnionType(es2panda_Type type);
    bool TypeIsNonPrimitiveType(es2panda_Type type);
    bool TypeIsWildcardType(es2panda_Type type);
    bool TypeIsETSTypeParameter(es2panda_Type type);
    bool TypeIsETSNonNullishType(es2panda_Type type);
    bool TypeIsETSReadonlyType(es2panda_Type type);
    bool TypeIsETSIntEnumType(es2panda_Type type);
    bool TypeIsETSStringEnumType(es2panda_Type type);
    bool TypeIsETSEnumType(es2panda_Type type);
    bool TypeIsETSExtensionFuncHelperType(es2panda_Type type);
    bool TypeIsETSTupleType(es2panda_Type type);
    bool TypeIsETSPartialTypeParameter(es2panda_Type type);
    bool TypeIsTypeError(es2panda_Type type);
    bool TypeIsETSTypeAliasType(es2panda_Type type);

    bool VariableIsLocalVariable(es2panda_Variable variable);
    bool VariableIsGlobalVariable(es2panda_Variable variable);
    bool VariableIsModuleVariable(es2panda_Variable variable);
    bool VariableIsEnumVariable(es2panda_Variable variable);

    String AstNodeName(es2panda_AstNode ast);

};



[Entity=Class] interface LabelledStatement: Statement {
    static es2panda_AstNode CreateLabelledStatement(es2panda_Context context, es2panda_AstNode ident, es2panda_AstNode body);

    static es2panda_AstNode UpdateLabelledStatement(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode ident, es2panda_AstNode body);


    es2panda_AstNode BodyConst(es2panda_Context context);
    es2panda_AstNode IdentConst(es2panda_Context context);
    es2panda_AstNode Ident(es2panda_Context context);
    es2panda_AstNode GetReferencedStatementConst(es2panda_Context context);
};

[Entity=Class] interface ThrowStatement: Statement {
    static es2panda_AstNode CreateThrowStatement(es2panda_Context context, es2panda_AstNode argument);

    static es2panda_AstNode UpdateThrowStatement(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode argument);


    es2panda_AstNode ArgumentConst(es2panda_Context context);
};

[Entity=Class] interface ClassProperty: ClassElement {
    static es2panda_AstNode CreateClassProperty(es2panda_Context context, es2panda_AstNode key, es2panda_AstNode value, es2panda_AstNode typeAnnotation, Es2pandaModifierFlags modifiers, bool isComputed);

    static es2panda_AstNode UpdateClassProperty(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode key, es2panda_AstNode value, es2panda_AstNode typeAnnotation, Es2pandaModifierFlags modifiers, bool isComputed);


    es2panda_AstNode TypeAnnotationConst(es2panda_Context context);
    void SetTypeAnnotation(es2panda_Context context, es2panda_AstNode typeAnnotation);
};

[Entity=Class] interface TSVoidKeyword: TypeNode {
    static es2panda_AstNode CreateTSVoidKeyword(es2panda_Context context);

    static es2panda_AstNode UpdateTSVoidKeyword(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface ETSFunctionType: TypeNode {
    static es2panda_AstNode CreateETSFunctionTypeIr(es2panda_Context context, es2panda_FunctionSignature signature, Es2pandaScriptFunctionFlags funcFlags);

    static es2panda_AstNode UpdateETSFunctionTypeIr(es2panda_Context context, es2panda_AstNode original, es2panda_FunctionSignature signature, Es2pandaScriptFunctionFlags funcFlags);


    void IrSetScope(es2panda_Context context, es2panda_Scope scope);
    es2panda_FunctionSignature IrIrSignature(es2panda_Context context);
    es2panda_AstNode IrTypeParamsConst(es2panda_Context context);
    es2panda_AstNode IrTypeParams(es2panda_Context context);
    sequence<es2panda_AstNode> IrParamsConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_AstNode IrReturnTypeConst(es2panda_Context context);
    es2panda_AstNode IrReturnType(es2panda_Context context);
    es2panda_AstNode IrFunctionalInterface(es2panda_Context context);
    es2panda_AstNode IrFunctionalInterfaceConst(es2panda_Context context);
    void IrSetFunctionalInterface(es2panda_Context context, es2panda_AstNode functionalInterface);
    Es2pandaScriptFunctionFlags IrFlags(es2panda_Context context);
    bool IrIsThrowingConst(es2panda_Context context);
    bool IrIsRethrowingConst(es2panda_Context context);
    u32 IrDefaultParamIndexConst(es2panda_Context context);
};

[Entity=Class] interface TSTypeOperator: TypeNode {
    static es2panda_AstNode CreateTSTypeOperator(es2panda_Context context, es2panda_AstNode type, Es2pandaTSOperatorType operatorType);

    static es2panda_AstNode UpdateTSTypeOperator(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode type, Es2pandaTSOperatorType operatorType);


    es2panda_AstNode TypeConst(es2panda_Context context);
    bool IsReadonlyConst(es2panda_Context context);
    bool IsKeyofConst(es2panda_Context context);
    bool IsUniqueConst(es2panda_Context context);
};

[Entity=Class] interface IfStatement: Statement {
    static es2panda_AstNode CreateIfStatement(es2panda_Context context, es2panda_AstNode test, es2panda_AstNode consequent, es2panda_AstNode alternate);

    static es2panda_AstNode UpdateIfStatement(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode test, es2panda_AstNode consequent, es2panda_AstNode alternate);


    es2panda_AstNode TestConst(es2panda_Context context);
    es2panda_AstNode Test(es2panda_Context context);
    es2panda_AstNode ConsequentConst(es2panda_Context context);
    es2panda_AstNode Consequent(es2panda_Context context);
    es2panda_AstNode Alternate(es2panda_Context context);
    es2panda_AstNode AlternateConst(es2panda_Context context);
};

[Entity=Class] interface TSConstructorType: TypeNode {
    static es2panda_AstNode CreateTSConstructorType(es2panda_Context context, es2panda_FunctionSignature signature, bool abstract);

    static es2panda_AstNode UpdateTSConstructorType(es2panda_Context context, es2panda_AstNode original, es2panda_FunctionSignature signature, bool abstract);


    void SetScope(es2panda_Context context, es2panda_Scope scope);
    es2panda_AstNode TypeParamsConst(es2panda_Context context);
    es2panda_AstNode TypeParams(es2panda_Context context);
    sequence<es2panda_AstNode> ParamsConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_AstNode ReturnTypeConst(es2panda_Context context);
    es2panda_AstNode ReturnType(es2panda_Context context);
    bool AbstractConst(es2panda_Context context);
};

[Entity=Class] interface Decorator: Statement {
    static es2panda_AstNode CreateDecorator(es2panda_Context context, es2panda_AstNode expr);

    static es2panda_AstNode UpdateDecorator(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expr);


    es2panda_AstNode ExprConst(es2panda_Context context);
};

[Entity=Class] interface TSEnumDeclaration: TypedStatement {
    static es2panda_AstNode CreateTSEnumDeclaration(es2panda_Context context, es2panda_AstNode key, sequence<es2panda_AstNode> members, u32 membersLen, bool isConst, bool isStatic, bool isDeclare);

    static es2panda_AstNode UpdateTSEnumDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode key, sequence<es2panda_AstNode> members, u32 membersLen, bool isConst, bool isStatic, bool isDeclare);


    void SetScope(es2panda_Context context, es2panda_Scope scope);
    es2panda_AstNode KeyConst(es2panda_Context context);
    es2panda_AstNode Key(es2panda_Context context);
    sequence<es2panda_AstNode> MembersConst(es2panda_Context context, u32 returnTypeLen);
    char InternalNameConst(es2panda_Context context);
    void SetInternalName(es2panda_Context context, char internalName);
    es2panda_AstNode BoxedClassConst(es2panda_Context context);
    void SetBoxedClass(es2panda_Context context, es2panda_AstNode wrapperClass);
    bool IsConstConst(es2panda_Context context);
    sequence<es2panda_AstNode> DecoratorsConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface TSNeverKeyword: TypeNode {
    static es2panda_AstNode CreateTSNeverKeyword(es2panda_Context context);

    static es2panda_AstNode UpdateTSNeverKeyword(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface ImportDefaultSpecifier: Statement {
    static es2panda_AstNode CreateImportDefaultSpecifier(es2panda_Context context, es2panda_AstNode local);

    static es2panda_AstNode UpdateImportDefaultSpecifier(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode local);


    es2panda_AstNode LocalConst(es2panda_Context context);
    es2panda_AstNode Local(es2panda_Context context);
};

[Entity=Class] interface ObjectExpression: AnnotatedExpression {
    static es2panda_AstNode CreateObjectExpression(es2panda_Context context, Es2pandaAstNodeType nodeType, sequence<es2panda_AstNode> properties, u32 propertiesLen, bool trailingComma);

    static es2panda_AstNode UpdateObjectExpression(es2panda_Context context, es2panda_AstNode original, Es2pandaAstNodeType nodeType, sequence<es2panda_AstNode> properties, u32 propertiesLen, bool trailingComma);


    sequence<es2panda_AstNode> PropertiesConst(es2panda_Context context, u32 returnTypeLen);
    bool IsDeclarationConst(es2panda_Context context);
    bool IsOptionalConst(es2panda_Context context);
    void SetPreferredType(es2panda_Context context, es2panda_Type preferredType);
    es2panda_Type PreferredTypeConst(es2panda_Context context);
    sequence<es2panda_AstNode> DecoratorsConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_ValidationInfo ValidateExpression(es2panda_Context context);
    bool ConvertibleToObjectPattern(es2panda_Context context);
    void SetDeclaration(es2panda_Context context);
    void SetOptional(es2panda_Context context, bool optional_arg);
};

[Entity=Class] interface ImportSpecifier: Statement {
    static es2panda_AstNode CreateImportSpecifier(es2panda_Context context, es2panda_AstNode imported, es2panda_AstNode local);

    static es2panda_AstNode UpdateImportSpecifier(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode imported, es2panda_AstNode local);


    es2panda_AstNode Imported(es2panda_Context context);
    es2panda_AstNode ImportedConst(es2panda_Context context);
    es2panda_AstNode Local(es2panda_Context context);
    es2panda_AstNode LocalConst(es2panda_Context context);
};

[Entity=Class] interface ConditionalExpression: Expression {
    static es2panda_AstNode CreateConditionalExpression(es2panda_Context context, es2panda_AstNode test, es2panda_AstNode consequent, es2panda_AstNode alternate);

    static es2panda_AstNode UpdateConditionalExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode test, es2panda_AstNode consequent, es2panda_AstNode alternate);


    es2panda_AstNode TestConst(es2panda_Context context);
    es2panda_AstNode Test(es2panda_Context context);
    void SetTest(es2panda_Context context, es2panda_AstNode expr);
    es2panda_AstNode ConsequentConst(es2panda_Context context);
    es2panda_AstNode Consequent(es2panda_Context context);
    void SetConsequent(es2panda_Context context, es2panda_AstNode expr);
    es2panda_AstNode AlternateConst(es2panda_Context context);
    es2panda_AstNode Alternate(es2panda_Context context);
    void SetAlternate(es2panda_Context context, es2panda_AstNode expr);
};

[Entity=Class] interface CallExpression: MaybeOptionalExpression {
    static es2panda_AstNode CreateCallExpression(es2panda_Context context, es2panda_AstNode callee, sequence<es2panda_AstNode> arguments, u32 argumentsLen, es2panda_AstNode typeParams, bool optional_arg, bool trailingComma);

    static es2panda_AstNode UpdateCallExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode callee, sequence<es2panda_AstNode> arguments, u32 argumentsLen, es2panda_AstNode typeParams, bool optional_arg, bool trailingComma);
    static es2panda_AstNode CreateCallExpression1(es2panda_Context context, es2panda_AstNode other);

    static es2panda_AstNode UpdateCallExpression1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode other);


    es2panda_AstNode CalleeConst(es2panda_Context context);
    es2panda_AstNode Callee(es2panda_Context context);
    void SetCallee(es2panda_Context context, es2panda_AstNode callee);
    es2panda_AstNode TypeParamsConst(es2panda_Context context);
    es2panda_AstNode TypeParams(es2panda_Context context);
    sequence<es2panda_AstNode> ArgumentsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> Arguments(es2panda_Context context, u32 returnTypeLen);
    bool HasTrailingCommaConst(es2panda_Context context);
    es2panda_Signature Signature(es2panda_Context context);
    es2panda_Signature SignatureConst(es2panda_Context context);
    void SetSignature(es2panda_Context context, es2panda_Signature signature);
    void SetTypeParams(es2panda_Context context, es2panda_AstNode typeParams);
    es2panda_Type UncheckedTypeConst(es2panda_Context context);
    void SetUncheckedType(es2panda_Context context, es2panda_Type type);
    void SetTrailingBlock(es2panda_Context context, es2panda_AstNode block);
    es2panda_AstNode TrailingBlockConst(es2panda_Context context);
    void SetIsTrailingBlockInNewLine(es2panda_Context context, bool isNewLine);
    bool IsTrailingBlockInNewLineConst(es2panda_Context context);
};

[Entity=Class] interface BigIntLiteral: Literal {
    static es2panda_AstNode CreateBigIntLiteral(es2panda_Context context, char src);

    static es2panda_AstNode UpdateBigIntLiteral(es2panda_Context context, es2panda_AstNode original, char src);


    char StrConst(es2panda_Context context);
};

[Entity=Class] interface ClassElement: TypedStatement {


    es2panda_AstNode Id(es2panda_Context context);
    es2panda_AstNode IdConst(es2panda_Context context);
    es2panda_AstNode Key(es2panda_Context context);
    es2panda_AstNode KeyConst(es2panda_Context context);
    es2panda_AstNode Value(es2panda_Context context);
    void SetValue(es2panda_Context context, es2panda_AstNode value);
    es2panda_AstNode ValueConst(es2panda_Context context);
    bool IsPrivateElementConst(es2panda_Context context);
    sequence<es2panda_AstNode> DecoratorsConst(es2panda_Context context, u32 returnTypeLen);
    bool IsComputedConst(es2panda_Context context);
    void AddDecorator(es2panda_Context context, es2panda_AstNode decorator);
    Es2pandaPrivateFieldKind ToPrivateFieldKindConst(es2panda_Context context, bool isStatic);
};

[Entity=Class] interface TSImportType: TypeNode {
    static es2panda_AstNode CreateTSImportType(es2panda_Context context, es2panda_AstNode param, es2panda_AstNode typeParams, es2panda_AstNode qualifier, bool isTypeof);

    static es2panda_AstNode UpdateTSImportType(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode param, es2panda_AstNode typeParams, es2panda_AstNode qualifier, bool isTypeof);


    es2panda_AstNode ParamConst(es2panda_Context context);
    es2panda_AstNode TypeParamsConst(es2panda_Context context);
    es2panda_AstNode QualifierConst(es2panda_Context context);
    bool IsTypeofConst(es2panda_Context context);
};

[Entity=Class] interface TaggedTemplateExpression: Expression {
    static es2panda_AstNode CreateTaggedTemplateExpression(es2panda_Context context, es2panda_AstNode tag, es2panda_AstNode quasi, es2panda_AstNode typeParams);

    static es2panda_AstNode UpdateTaggedTemplateExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode tag, es2panda_AstNode quasi, es2panda_AstNode typeParams);


    es2panda_AstNode TagConst(es2panda_Context context);
    es2panda_AstNode QuasiConst(es2panda_Context context);
    es2panda_AstNode TypeParamsConst(es2panda_Context context);
};

[Entity=Class] interface FunctionDeclaration: Statement {
    static es2panda_AstNode CreateFunctionDeclaration(es2panda_Context context, es2panda_AstNode func, sequence<es2panda_AstNode> annotations, u32 annotationsLen, bool isAnonymous);

    static es2panda_AstNode UpdateFunctionDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode func, sequence<es2panda_AstNode> annotations, u32 annotationsLen, bool isAnonymous);
    static es2panda_AstNode CreateFunctionDeclaration1(es2panda_Context context, es2panda_AstNode func, bool isAnonymous);

    static es2panda_AstNode UpdateFunctionDeclaration1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode func, bool isAnonymous);


    es2panda_AstNode Function(es2panda_Context context);
    bool IsAnonymousConst(es2panda_Context context);
    es2panda_AstNode FunctionConst(es2panda_Context context);
};

[Entity=Class] interface ETSTypeReference: TypeNode {
    static es2panda_AstNode CreateETSTypeReference(es2panda_Context context, es2panda_AstNode part);

    static es2panda_AstNode UpdateETSTypeReference(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode part);


    es2panda_AstNode Part(es2panda_Context context);
    es2panda_AstNode PartConst(es2panda_Context context);
    es2panda_AstNode BaseNameConst(es2panda_Context context);
};

[Entity=Class] interface TSTypeReference: TypeNode {
    static es2panda_AstNode CreateTSTypeReference(es2panda_Context context, es2panda_AstNode typeName, es2panda_AstNode typeParams);

    static es2panda_AstNode UpdateTSTypeReference(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode typeName, es2panda_AstNode typeParams);


    es2panda_AstNode TypeParamsConst(es2panda_Context context);
    es2panda_AstNode TypeNameConst(es2panda_Context context);
    es2panda_AstNode BaseNameConst(es2panda_Context context);
};

[Entity=Class] interface ImportSource {
    static es2panda_ImportSource CreateImportSource(es2panda_Context context, es2panda_AstNode source, es2panda_AstNode resolvedSource, bool hasDecl);



    es2panda_AstNode SourceConst(es2panda_Context context);
    es2panda_AstNode Source(es2panda_Context context);
    es2panda_AstNode ResolvedSourceConst(es2panda_Context context);
    es2panda_AstNode ResolvedSource(es2panda_Context context);
    bool HasDeclConst(es2panda_Context context);
};

[Entity=Class] interface NamedType: TypeNode {
    static es2panda_AstNode CreateNamedType(es2panda_Context context, es2panda_AstNode name);

    static es2panda_AstNode UpdateNamedType(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode name);


    es2panda_AstNode NameConst(es2panda_Context context);
    es2panda_AstNode TypeParamsConst(es2panda_Context context);
    bool IsNullableConst(es2panda_Context context);
    void SetNullable(es2panda_Context context, bool nullable);
    void SetNext(es2panda_Context context, es2panda_AstNode next);
    void SetTypeParams(es2panda_Context context, es2panda_AstNode typeParams);
};

[Entity=Class] interface NumberLiteral: Literal {


    char StrConst(es2panda_Context context);
};

[Entity=Class] interface TSFunctionType: TypeNode {
    static es2panda_AstNode CreateTSFunctionType(es2panda_Context context, es2panda_FunctionSignature signature);

    static es2panda_AstNode UpdateTSFunctionType(es2panda_Context context, es2panda_AstNode original, es2panda_FunctionSignature signature);


    void SetScope(es2panda_Context context, es2panda_Scope scope);
    es2panda_AstNode TypeParamsConst(es2panda_Context context);
    es2panda_AstNode TypeParams(es2panda_Context context);
    sequence<es2panda_AstNode> ParamsConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_AstNode ReturnTypeConst(es2panda_Context context);
    es2panda_AstNode ReturnType(es2panda_Context context);
    void SetNullable(es2panda_Context context, bool nullable);
};

[Entity=Class] interface TemplateElement: Expression {
    static es2panda_AstNode CreateTemplateElement(es2panda_Context context);

    static es2panda_AstNode UpdateTemplateElement(es2panda_Context context, es2panda_AstNode original);
    static es2panda_AstNode CreateTemplateElement1(es2panda_Context context, char raw, char cooked);

    static es2panda_AstNode UpdateTemplateElement1(es2panda_Context context, es2panda_AstNode original, char raw, char cooked);


    char RawConst(es2panda_Context context);
    char CookedConst(es2panda_Context context);
};

[Entity=Class] interface TSInterfaceDeclaration: TypedStatement {
    static es2panda_AstNode CreateTSInterfaceDeclaration(es2panda_Context context, sequence<es2panda_AstNode> extends, u32 extendsLen, es2panda_AstNode id, es2panda_AstNode typeParams, es2panda_AstNode body, bool isStatic, bool isExternal);

    static es2panda_AstNode UpdateTSInterfaceDeclaration(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> extends, u32 extendsLen, es2panda_AstNode id, es2panda_AstNode typeParams, es2panda_AstNode body, bool isStatic, bool isExternal);


    void SetScope(es2panda_Context context, es2panda_Scope scope);
    es2panda_AstNode Body(es2panda_Context context);
    es2panda_AstNode BodyConst(es2panda_Context context);
    es2panda_AstNode Id(es2panda_Context context);
    es2panda_AstNode IdConst(es2panda_Context context);
    char InternalNameConst(es2panda_Context context);
    void SetInternalName(es2panda_Context context, char internalName);
    bool IsStaticConst(es2panda_Context context);
    bool IsFromExternalConst(es2panda_Context context);
    es2panda_AstNode TypeParamsConst(es2panda_Context context);
    es2panda_AstNode TypeParams(es2panda_Context context);
    sequence<es2panda_AstNode> Extends(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> ExtendsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> DecoratorsConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_AstNode GetAnonClass(es2panda_Context context);
    es2panda_AstNode GetAnonClassConst(es2panda_Context context);
    void SetAnonClass(es2panda_Context context, es2panda_AstNode anonClass);
};

[Entity=Class] interface VariableDeclaration: Statement {
    static es2panda_AstNode CreateVariableDeclaration(es2panda_Context context, Es2pandaVariableDeclarationKind kind, sequence<es2panda_AstNode> declarators, u32 declaratorsLen);

    static es2panda_AstNode UpdateVariableDeclaration(es2panda_Context context, es2panda_AstNode original, Es2pandaVariableDeclarationKind kind, sequence<es2panda_AstNode> declarators, u32 declaratorsLen);


    sequence<es2panda_AstNode> DeclaratorsConst(es2panda_Context context, u32 returnTypeLen);
    Es2pandaVariableDeclarationKind KindConst(es2panda_Context context);
    sequence<es2panda_AstNode> DecoratorsConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface UndefinedLiteral: Literal {
    static es2panda_AstNode CreateUndefinedLiteral(es2panda_Context context);

    static es2panda_AstNode UpdateUndefinedLiteral(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface MemberExpression: MaybeOptionalExpression {
    static es2panda_AstNode CreateMemberExpression(es2panda_Context context, es2panda_AstNode object_arg, es2panda_AstNode property, Es2pandaMemberExpressionKind kind, bool computed, bool optional_arg);

    static es2panda_AstNode UpdateMemberExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode object_arg, es2panda_AstNode property, Es2pandaMemberExpressionKind kind, bool computed, bool optional_arg);


    es2panda_AstNode Object(es2panda_Context context);
    es2panda_AstNode ObjectConst(es2panda_Context context);
    void SetObject(es2panda_Context context, es2panda_AstNode object_arg);
    es2panda_AstNode Property(es2panda_Context context);
    es2panda_AstNode PropertyConst(es2panda_Context context);
    es2panda_Variable PropVar(es2panda_Context context);
    es2panda_Variable PropVarConst(es2panda_Context context);
    bool IsComputedConst(es2panda_Context context);
    Es2pandaMemberExpressionKind KindConst(es2panda_Context context);
    void AddMemberKind(es2panda_Context context, Es2pandaMemberExpressionKind kind);
    bool HasMemberKindConst(es2panda_Context context, Es2pandaMemberExpressionKind kind);
    void RemoveMemberKind(es2panda_Context context, Es2pandaMemberExpressionKind kind);
    es2panda_Type ObjTypeConst(es2panda_Context context);
    void SetPropVar(es2panda_Context context, es2panda_Variable propVar);
    void SetObjectType(es2panda_Context context, es2panda_Type objType);
    bool IsIgnoreBoxConst(es2panda_Context context);
    void SetIgnoreBox(es2panda_Context context);
    es2panda_Type UncheckedTypeConst(es2panda_Context context);
    bool IsPrivateReferenceConst(es2panda_Context context);
    void CompileToRegConst(es2panda_Context context, es2panda_CodeGen pg, es2panda_VReg objReg);
    void CompileToRegsConst(es2panda_Context context, es2panda_CodeGen pg, es2panda_VReg object_arg, es2panda_VReg property);
};

[Entity=Class] interface TSClassImplements: Expression {
    static es2panda_AstNode CreateTSClassImplements(es2panda_Context context, es2panda_AstNode expression, es2panda_AstNode typeParameters);

    static es2panda_AstNode UpdateTSClassImplements(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expression, es2panda_AstNode typeParameters);
    static es2panda_AstNode CreateTSClassImplements1(es2panda_Context context, es2panda_AstNode expression);

    static es2panda_AstNode UpdateTSClassImplements1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expression);


    es2panda_AstNode Expr(es2panda_Context context);
    es2panda_AstNode ExprConst(es2panda_Context context);
    es2panda_AstNode TypeParametersConst(es2panda_Context context);
};

[Entity=Class] interface TSObjectKeyword: TypeNode {
    static es2panda_AstNode CreateTSObjectKeyword(es2panda_Context context);

    static es2panda_AstNode UpdateTSObjectKeyword(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface ETSUnionType: TypeNode {
    static es2panda_AstNode CreateETSUnionTypeIr(es2panda_Context context, sequence<es2panda_AstNode> types, u32 typesLen);

    static es2panda_AstNode UpdateETSUnionTypeIr(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> types, u32 typesLen);


    sequence<es2panda_AstNode> IrTypesConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface TSPropertySignature: AnnotatedAstNode {
    static es2panda_AstNode CreateTSPropertySignature(es2panda_Context context, es2panda_AstNode key, es2panda_AstNode typeAnnotation, bool computed, bool optional_arg, bool readonly_arg);

    static es2panda_AstNode UpdateTSPropertySignature(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode key, es2panda_AstNode typeAnnotation, bool computed, bool optional_arg, bool readonly_arg);


    es2panda_AstNode KeyConst(es2panda_Context context);
    es2panda_AstNode Key(es2panda_Context context);
    bool ComputedConst(es2panda_Context context);
    bool OptionalConst(es2panda_Context context);
    bool ReadonlyConst(es2panda_Context context);
};

[Entity=Class] interface TSConditionalType: TypeNode {
    static es2panda_AstNode CreateTSConditionalType(es2panda_Context context, es2panda_AstNode checkType, es2panda_AstNode extendsType, es2panda_AstNode trueType, es2panda_AstNode falseType);

    static es2panda_AstNode UpdateTSConditionalType(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode checkType, es2panda_AstNode extendsType, es2panda_AstNode trueType, es2panda_AstNode falseType);


    es2panda_AstNode CheckTypeConst(es2panda_Context context);
    es2panda_AstNode ExtendsTypeConst(es2panda_Context context);
    es2panda_AstNode TrueTypeConst(es2panda_Context context);
    es2panda_AstNode FalseTypeConst(es2panda_Context context);
};

[Entity=Class] interface TSLiteralType: TypeNode {
    static es2panda_AstNode CreateTSLiteralType(es2panda_Context context, es2panda_AstNode literal);

    static es2panda_AstNode UpdateTSLiteralType(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode literal);


    es2panda_AstNode LiteralConst(es2panda_Context context);
};

[Entity=Class] interface TSTypeAliasDeclaration: AnnotatedStatement {
    static es2panda_AstNode CreateTSTypeAliasDeclaration(es2panda_Context context, es2panda_AstNode id, es2panda_AstNode typeParams, es2panda_AstNode typeAnnotation);

    static es2panda_AstNode UpdateTSTypeAliasDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode id, es2panda_AstNode typeParams, es2panda_AstNode typeAnnotation);
    static es2panda_AstNode CreateTSTypeAliasDeclaration1(es2panda_Context context, es2panda_AstNode id);

    static es2panda_AstNode UpdateTSTypeAliasDeclaration1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode id);


    es2panda_AstNode Id(es2panda_Context context);
    es2panda_AstNode IdConst(es2panda_Context context);
    es2panda_AstNode TypeParamsConst(es2panda_Context context);
    sequence<es2panda_AstNode> DecoratorsConst(es2panda_Context context, u32 returnTypeLen);
    void SetTypeParameters(es2panda_Context context, es2panda_AstNode typeParams);
    void SetTypeParameterTypes(es2panda_Context context, sequence<es2panda_Type> typeParamTypes, u32 typeParamTypesLen);
    sequence<es2panda_Type> TypeParameterTypesConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> Annotations(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> AnnotationsConst(es2panda_Context context, u32 returnTypeLen);
    void SetAnnotations(es2panda_Context context, sequence<es2panda_AstNode> annotations, u32 annotationsLen);
};

[Entity=Class] interface DebuggerStatement: Statement {
    static es2panda_AstNode CreateDebuggerStatement(es2panda_Context context);

    static es2panda_AstNode UpdateDebuggerStatement(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface ReturnStatement: Statement {
    static es2panda_AstNode CreateReturnStatement(es2panda_Context context);

    static es2panda_AstNode UpdateReturnStatement(es2panda_Context context, es2panda_AstNode original);
    static es2panda_AstNode CreateReturnStatement1(es2panda_Context context, es2panda_AstNode argument);

    static es2panda_AstNode UpdateReturnStatement1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode argument);


    es2panda_AstNode Argument(es2panda_Context context);
    es2panda_AstNode ArgumentConst(es2panda_Context context);
    es2panda_Type ReturnType(es2panda_Context context);
    es2panda_Type ReturnTypeConst(es2panda_Context context);
    void SetArgument(es2panda_Context context, es2panda_AstNode arg);
};

[Entity=Class] interface ExportDefaultDeclaration: Statement {
    static es2panda_AstNode CreateExportDefaultDeclaration(es2panda_Context context, es2panda_AstNode decl, bool exportEquals);

    static es2panda_AstNode UpdateExportDefaultDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode decl, bool exportEquals);


    es2panda_AstNode Decl(es2panda_Context context);
    es2panda_AstNode DeclConst(es2panda_Context context);
    bool IsExportEqualsConst(es2panda_Context context);
};

[Entity=Class] interface ScriptFunction: AstNode {
    static es2panda_AstNode CreateScriptFunction(es2panda_Context context, es2panda_AstNode databody, es2panda_FunctionSignature datasignature, int datafuncFlags, int dataflags);

    static es2panda_AstNode UpdateScriptFunction(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode databody, es2panda_FunctionSignature datasignature, int datafuncFlags, int dataflags);


    es2panda_AstNode IdConst(es2panda_Context context);
    es2panda_AstNode Id(es2panda_Context context);
    es2panda_Signature SignatureConst(es2panda_Context context);
    es2panda_Signature Signature(es2panda_Context context);
    es2panda_FunctionSignature IrSignature(es2panda_Context context);
    sequence<es2panda_AstNode> ParamsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> Params(es2panda_Context context, u32 returnTypeLen);
    u32 DefaultParamIndexConst(es2panda_Context context);
    sequence<es2panda_AstNode> ReturnStatementsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> ReturnStatements(es2panda_Context context, u32 returnTypeLen);
    es2panda_AstNode TypeParamsConst(es2panda_Context context);
    es2panda_AstNode TypeParams(es2panda_Context context);
    es2panda_AstNode BodyConst(es2panda_Context context);
    es2panda_AstNode Body(es2panda_Context context);
    void AddReturnStatement(es2panda_Context context, es2panda_AstNode returnStatement);
    void SetBody(es2panda_Context context, es2panda_AstNode body);
    es2panda_AstNode ReturnTypeAnnotationConst(es2panda_Context context);
    es2panda_AstNode ReturnTypeAnnotation(es2panda_Context context);
    void SetReturnTypeAnnotation(es2panda_Context context, es2panda_AstNode node);
    bool IsEntryPointConst(es2panda_Context context);
    bool IsGeneratorConst(es2panda_Context context);
    bool IsAsyncFuncConst(es2panda_Context context);
    bool IsAsyncImplFuncConst(es2panda_Context context);
    bool IsArrowConst(es2panda_Context context);
    bool IsOverloadConst(es2panda_Context context);
    bool IsExternalOverloadConst(es2panda_Context context);
    bool IsConstructorConst(es2panda_Context context);
    bool IsGetterConst(es2panda_Context context);
    bool IsSetterConst(es2panda_Context context);
    bool IsMethodConst(es2panda_Context context);
    bool IsProxyConst(es2panda_Context context);
    bool IsStaticBlockConst(es2panda_Context context);
    bool IsEnumConst(es2panda_Context context);
    bool IsHiddenConst(es2panda_Context context);
    bool IsExternalConst(es2panda_Context context);
    bool IsImplicitSuperCallNeededConst(es2panda_Context context);
    bool HasBodyConst(es2panda_Context context);
    bool HasRestParameterConst(es2panda_Context context);
    bool HasReturnStatementConst(es2panda_Context context);
    bool HasThrowStatementConst(es2panda_Context context);
    bool IsThrowingConst(es2panda_Context context);
    bool IsRethrowingConst(es2panda_Context context);
    bool IsDynamicConst(es2panda_Context context);
    bool IsExtensionMethodConst(es2panda_Context context);
    Es2pandaScriptFunctionFlags FlagsConst(es2panda_Context context);
    void SetIdent(es2panda_Context context, es2panda_AstNode id);
    void SetSignature(es2panda_Context context, es2panda_Signature signature);
    void AddFlag(es2panda_Context context, Es2pandaScriptFunctionFlags flags);
    void AddModifier(es2panda_Context context, Es2pandaModifierFlags flags);
    u32 FormalParamsLengthConst(es2panda_Context context);
    void SetScope(es2panda_Context context, es2panda_Scope scope);
};

[Entity=Class] interface ClassDefinition: TypedAstNode {
    static es2panda_AstNode CreateClassDefinition(es2panda_Context context, es2panda_AstNode ident, es2panda_AstNode typeParams, es2panda_AstNode superTypeParams, sequence<es2panda_AstNode> implements, u32 implementsLen, es2panda_AstNode ctor, es2panda_AstNode superClass, sequence<es2panda_AstNode> body, u32 bodyLen, Es2pandaClassDefinitionModifiers modifiers, Es2pandaModifierFlags flags);

    static es2panda_AstNode UpdateClassDefinition(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode ident, es2panda_AstNode typeParams, es2panda_AstNode superTypeParams, sequence<es2panda_AstNode> implements, u32 implementsLen, es2panda_AstNode ctor, es2panda_AstNode superClass, sequence<es2panda_AstNode> body, u32 bodyLen, Es2pandaClassDefinitionModifiers modifiers, Es2pandaModifierFlags flags);
    static es2panda_AstNode CreateClassDefinition1(es2panda_Context context, es2panda_AstNode ident, sequence<es2panda_AstNode> body, u32 bodyLen, Es2pandaClassDefinitionModifiers modifiers, Es2pandaModifierFlags flags);

    static es2panda_AstNode UpdateClassDefinition1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode ident, sequence<es2panda_AstNode> body, u32 bodyLen, Es2pandaClassDefinitionModifiers modifiers, Es2pandaModifierFlags flags);
    static es2panda_AstNode CreateClassDefinition2(es2panda_Context context, es2panda_AstNode ident, Es2pandaClassDefinitionModifiers modifiers, Es2pandaModifierFlags flags);

    static es2panda_AstNode UpdateClassDefinition2(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode ident, Es2pandaClassDefinitionModifiers modifiers, Es2pandaModifierFlags flags);


    void SetScope(es2panda_Context context, es2panda_Scope scope);
    es2panda_AstNode IdentConst(es2panda_Context context);
    es2panda_AstNode Ident(es2panda_Context context);
    void SetIdent(es2panda_Context context, es2panda_AstNode ident);
    char InternalNameConst(es2panda_Context context);
    void SetInternalName(es2panda_Context context, char internalName);
    es2panda_AstNode Super(es2panda_Context context);
    es2panda_AstNode SuperConst(es2panda_Context context);
    void SetSuper(es2panda_Context context, es2panda_AstNode superClass);
    bool IsGlobalConst(es2panda_Context context);
    bool IsLocalConst(es2panda_Context context);
    bool IsExternConst(es2panda_Context context);
    bool IsFromExternalConst(es2panda_Context context);
    bool IsInnerConst(es2panda_Context context);
    bool IsGlobalInitializedConst(es2panda_Context context);
    bool IsClassDefinitionCheckedConst(es2panda_Context context);
    bool IsAnonymousConst(es2panda_Context context);
    void SetGlobalInitialized(es2panda_Context context);
    void SetInnerModifier(es2panda_Context context);
    void SetClassDefinitionChecked(es2panda_Context context);
    void SetAnonymousModifier(es2panda_Context context);
    Es2pandaClassDefinitionModifiers ModifiersConst(es2panda_Context context);
    void SetModifiers(es2panda_Context context, Es2pandaClassDefinitionModifiers modifiers);
    void AddProperties(es2panda_Context context, sequence<es2panda_AstNode> body, u32 bodyLen);
    sequence<es2panda_AstNode> Body(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> BodyConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_AstNode Ctor(es2panda_Context context);
    void SetCtor(es2panda_Context context, es2panda_AstNode ctor);
    sequence<es2panda_AstNode> Implements(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> ImplementsConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_AstNode TypeParamsConst(es2panda_Context context);
    es2panda_AstNode TypeParams(es2panda_Context context);
    void SetTypeParams(es2panda_Context context, es2panda_AstNode typeParams);
    es2panda_AstNode SuperTypeParamsConst(es2panda_Context context);
    es2panda_AstNode SuperTypeParams(es2panda_Context context);
    int LocalTypeCounter(es2panda_Context context);
    int LocalIndexConst(es2panda_Context context);
    char LocalPrefixConst(es2panda_Context context);
    bool CaptureVariable(es2panda_Context context, es2panda_Variable var);
    bool AddToLocalVariableIsNeeded(es2panda_Context context, es2panda_Variable var);
    bool IsLocalVariableNeededConst(es2panda_Context context, es2panda_Variable var);
    sequence<es2panda_Variable> CapturedVariablesConst(es2panda_Context context, u32 returnTypeLen);
    bool EraseCapturedVariable(es2panda_Context context, es2panda_Variable var);
    void SetOrigEnumDecl(es2panda_Context context, es2panda_AstNode enumDecl);
    es2panda_AstNode OrigEnumDeclConst(es2panda_Context context);
    es2panda_AstNode CtorConst(es2panda_Context context);
    bool HasPrivateMethodConst(es2panda_Context context);
    bool HasComputedInstanceFieldConst(es2panda_Context context);
    bool HasMatchingPrivateKeyConst(es2panda_Context context, char name);
};

[Entity=Class] interface ArrayExpression: AnnotatedExpression {
    static es2panda_AstNode CreateArrayExpression(es2panda_Context context, sequence<es2panda_AstNode> elements, u32 elementsLen);

    static es2panda_AstNode UpdateArrayExpression(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> elements, u32 elementsLen);
    static es2panda_AstNode CreateArrayExpression1(es2panda_Context context, Es2pandaAstNodeType nodeType, sequence<es2panda_AstNode> elements, u32 elementsLen, bool trailingComma);

    static es2panda_AstNode UpdateArrayExpression1(es2panda_Context context, es2panda_AstNode original, Es2pandaAstNodeType nodeType, sequence<es2panda_AstNode> elements, u32 elementsLen, bool trailingComma);


    sequence<es2panda_AstNode> ElementsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> Elements(es2panda_Context context, u32 returnTypeLen);
    void SetElements(es2panda_Context context, sequence<es2panda_AstNode> elements, u32 elementsLen);
    bool IsDeclarationConst(es2panda_Context context);
    bool IsOptionalConst(es2panda_Context context);
    void SetDeclaration(es2panda_Context context);
    void SetOptional(es2panda_Context context, bool optional_arg);
    void SetPreferredType(es2panda_Context context, es2panda_Type preferredType);
    es2panda_Type GetPreferredType(es2panda_Context context);
    es2panda_Type GetPreferredTypeConst(es2panda_Context context);
    sequence<es2panda_AstNode> DecoratorsConst(es2panda_Context context, u32 returnTypeLen);
    bool ConvertibleToArrayPattern(es2panda_Context context);
    es2panda_ValidationInfo ValidateExpression(es2panda_Context context);
    bool HandleNestedArrayExpression(es2panda_Context context, es2panda_AstNode currentElement, bool isPreferredTuple, u32 idx);
    void GetPrefferedTypeFromFuncParam(es2panda_Context context, es2panda_Type param, Es2pandaTypeRelationFlag flags);
};

[Entity=Class] interface TSInterfaceBody: Expression {
    static es2panda_AstNode CreateTSInterfaceBody(es2panda_Context context, sequence<es2panda_AstNode> body, u32 bodyLen);

    static es2panda_AstNode UpdateTSInterfaceBody(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> body, u32 bodyLen);


    sequence<es2panda_AstNode> BodyPtr(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> Body(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> BodyConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface TSTypeQuery: TypeNode {
    static es2panda_AstNode CreateTSTypeQuery(es2panda_Context context, es2panda_AstNode exprName);

    static es2panda_AstNode UpdateTSTypeQuery(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode exprName);


    es2panda_AstNode ExprNameConst(es2panda_Context context);
};

[Entity=Class] interface TSBigintKeyword: TypeNode {
    static es2panda_AstNode CreateTSBigintKeyword(es2panda_Context context);

    static es2panda_AstNode UpdateTSBigintKeyword(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface Property: Expression {
    static es2panda_AstNode CreateProperty(es2panda_Context context, es2panda_AstNode key, es2panda_AstNode value);

    static es2panda_AstNode UpdateProperty(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode key, es2panda_AstNode value);
    static es2panda_AstNode CreateProperty1(es2panda_Context context, Es2pandaPropertyKind kind, es2panda_AstNode key, es2panda_AstNode value, bool isMethod, bool isComputed);

    static es2panda_AstNode UpdateProperty1(es2panda_Context context, es2panda_AstNode original, Es2pandaPropertyKind kind, es2panda_AstNode key, es2panda_AstNode value, bool isMethod, bool isComputed);


    es2panda_AstNode Key(es2panda_Context context);
    es2panda_AstNode KeyConst(es2panda_Context context);
    es2panda_AstNode ValueConst(es2panda_Context context);
    es2panda_AstNode Value(es2panda_Context context);
    Es2pandaPropertyKind KindConst(es2panda_Context context);
    bool IsMethodConst(es2panda_Context context);
    bool IsShorthandConst(es2panda_Context context);
    bool IsComputedConst(es2panda_Context context);
    bool IsAccessorConst(es2panda_Context context);
    bool IsAccessorKind(es2panda_Context context, Es2pandaPropertyKind kind);
    bool ConvertibleToPatternProperty(es2panda_Context context);
    es2panda_ValidationInfo ValidateExpression(es2panda_Context context);
};

[Entity=Class] interface VariableDeclarator: TypedStatement {
    static es2panda_AstNode CreateVariableDeclarator(es2panda_Context context, Es2pandaVariableDeclaratorFlag flag, es2panda_AstNode ident);

    static es2panda_AstNode UpdateVariableDeclarator(es2panda_Context context, es2panda_AstNode original, Es2pandaVariableDeclaratorFlag flag, es2panda_AstNode ident);
    static es2panda_AstNode CreateVariableDeclarator1(es2panda_Context context, Es2pandaVariableDeclaratorFlag flag, es2panda_AstNode ident, es2panda_AstNode init);

    static es2panda_AstNode UpdateVariableDeclarator1(es2panda_Context context, es2panda_AstNode original, Es2pandaVariableDeclaratorFlag flag, es2panda_AstNode ident, es2panda_AstNode init);


    es2panda_AstNode Init(es2panda_Context context);
    es2panda_AstNode InitConst(es2panda_Context context);
    void SetInit(es2panda_Context context, es2panda_AstNode init);
    es2panda_AstNode Id(es2panda_Context context);
    es2panda_AstNode IdConst(es2panda_Context context);
    Es2pandaVariableDeclaratorFlag Flag(es2panda_Context context);
};

[Entity=Class] interface StringLiteral: Literal {
    static es2panda_AstNode CreateStringLiteral(es2panda_Context context);

    static es2panda_AstNode UpdateStringLiteral(es2panda_Context context, es2panda_AstNode original);
    static es2panda_AstNode CreateStringLiteral1(es2panda_Context context, char str);

    static es2panda_AstNode UpdateStringLiteral1(es2panda_Context context, es2panda_AstNode original, char str);


    char StrConst(es2panda_Context context);
};

[Entity=Class] interface TSTypeAssertion: AnnotatedExpression {
    static es2panda_AstNode CreateTSTypeAssertion(es2panda_Context context, es2panda_AstNode typeAnnotation, es2panda_AstNode expression);

    static es2panda_AstNode UpdateTSTypeAssertion(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode typeAnnotation, es2panda_AstNode expression);


    es2panda_AstNode GetExpressionConst(es2panda_Context context);
};

[Entity=Class] interface TSExternalModuleReference: Expression {
    static es2panda_AstNode CreateTSExternalModuleReference(es2panda_Context context, es2panda_AstNode expr);

    static es2panda_AstNode UpdateTSExternalModuleReference(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expr);


    es2panda_AstNode ExprConst(es2panda_Context context);
};

[Entity=Class] interface TSUndefinedKeyword: TypeNode {
    static es2panda_AstNode CreateTSUndefinedKeyword(es2panda_Context context);

    static es2panda_AstNode UpdateTSUndefinedKeyword(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface ETSTuple: TypeNode {
    static es2panda_AstNode CreateETSTuple(es2panda_Context context);

    static es2panda_AstNode UpdateETSTuple(es2panda_Context context, es2panda_AstNode original);
    static es2panda_AstNode CreateETSTuple1(es2panda_Context context, u32 size);

    static es2panda_AstNode UpdateETSTuple1(es2panda_Context context, es2panda_AstNode original, u32 size);
    static es2panda_AstNode CreateETSTuple2(es2panda_Context context, sequence<es2panda_AstNode> typeList, u32 typeListLen);

    static es2panda_AstNode UpdateETSTuple2(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> typeList, u32 typeListLen);


    u32 GetTupleSizeConst(es2panda_Context context);
    sequence<es2panda_AstNode> GetTupleTypeAnnotationsListConst(es2panda_Context context, u32 returnTypeLen);
    bool HasSpreadTypeConst(es2panda_Context context);
    void SetSpreadType(es2panda_Context context, es2panda_AstNode newSpreadType);
    void SetTypeAnnotationsList(es2panda_Context context, sequence<es2panda_AstNode> typeNodeList, u32 typeNodeListLen);
    es2panda_Type CalculateLUBForTuple(es2panda_Context context, sequence<es2panda_Type> typeList, u32 typeListLen, sequence<es2panda_Type> spreadTypePtr);
};

[Entity=Class] interface TryStatement: Statement {
    static es2panda_AstNode CreateTryStatement(es2panda_Context context, es2panda_AstNode block, sequence<es2panda_AstNode> catchClauses, u32 catchClausesLen, es2panda_AstNode finalizer, sequence<es2panda_LabelPair> finalizerInsertionsLabelPair, u32 finalizerInsertionsLabelPairLen, sequence<es2panda_AstNode> finalizerInsertionsStatement, u32 finalizerInsertionsStatementLen);

    static es2panda_AstNode UpdateTryStatement(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode block, sequence<es2panda_AstNode> catchClauses, u32 catchClausesLen, es2panda_AstNode finalizer, sequence<es2panda_LabelPair> finalizerInsertionsLabelPair, u32 finalizerInsertionsLabelPairLen, sequence<es2panda_AstNode> finalizerInsertionsStatement, u32 finalizerInsertionsStatementLen);


    es2panda_AstNode FinallyBlockConst(es2panda_Context context);
    es2panda_AstNode BlockConst(es2panda_Context context);
    es2panda_LabelPair AddFinalizerInsertion(es2panda_Context context, es2panda_LabelPair insertion, es2panda_AstNode insertionStmt, sequence<es2panda_AstNode> returnTypeSecond);
    bool HasFinalizerConst(es2panda_Context context);
    bool HasDefaultCatchClauseConst(es2panda_Context context);
    sequence<es2panda_AstNode> CatchClausesConst(es2panda_Context context, u32 returnTypeLen);
    bool FinallyCanCompleteNormallyConst(es2panda_Context context);
    void SetFinallyCanCompleteNormally(es2panda_Context context, bool finallyCanCompleteNormally);
};

[Entity=Class] interface AstNode {


    bool IsProgramConst(es2panda_Context context);
    bool IsStatementConst(es2panda_Context context);
    bool IsExpressionConst(es2panda_Context context);
    bool IsTypedConst(es2panda_Context context);
    es2panda_AstNode AsTyped(es2panda_Context context);
    es2panda_AstNode AsTypedConst(es2panda_Context context);
    es2panda_AstNode AsExpression(es2panda_Context context);
    es2panda_AstNode AsExpressionConst(es2panda_Context context);
    es2panda_AstNode AsStatement(es2panda_Context context);
    es2panda_AstNode AsStatementConst(es2panda_Context context);
    void SetRange(es2panda_Context context, es2panda_SourceRange loc);
    void SetStart(es2panda_Context context, es2panda_SourcePosition start);
    void SetEnd(es2panda_Context context, es2panda_SourcePosition end);
    es2panda_SourcePosition StartConst(es2panda_Context context);
    es2panda_SourcePosition EndConst(es2panda_Context context);
    es2panda_SourceRange RangeConst(es2panda_Context context);
    Es2pandaAstNodeType TypeConst(es2panda_Context context);
    es2panda_AstNode Parent(es2panda_Context context);
    es2panda_AstNode ParentConst(es2panda_Context context);
    void SetParent(es2panda_Context context, es2panda_AstNode parent);
    es2panda_Variable VariableConst(es2panda_Context context);
    void SetVariable(es2panda_Context context, es2panda_Variable variable);
    sequence<es2panda_AstNode> DecoratorsPtrConst(es2panda_Context context, u32 returnTypeLen);
    void AddDecorators(es2panda_Context context, sequence<es2panda_AstNode> decorators, u32 decoratorsLen);
    bool CanHaveDecoratorConst(es2panda_Context context, bool inTs);
    bool IsReadonlyConst(es2panda_Context context);
    bool IsReadonlyTypeConst(es2panda_Context context);
    bool IsOptionalDeclarationConst(es2panda_Context context);
    bool IsDefiniteConst(es2panda_Context context);
    bool IsConstructorConst(es2panda_Context context);
    bool IsOverrideConst(es2panda_Context context);
    void SetOverride(es2panda_Context context);
    bool IsAsyncConst(es2panda_Context context);
    bool IsSynchronizedConst(es2panda_Context context);
    bool IsNativeConst(es2panda_Context context);
    bool IsConstConst(es2panda_Context context);
    bool IsStaticConst(es2panda_Context context);
    bool IsFinalConst(es2panda_Context context);
    bool IsAbstractConst(es2panda_Context context);
    bool IsPublicConst(es2panda_Context context);
    bool IsProtectedConst(es2panda_Context context);
    bool IsPrivateConst(es2panda_Context context);
    bool IsInternalConst(es2panda_Context context);
    bool IsExportedConst(es2panda_Context context);
    bool IsDefaultExportedConst(es2panda_Context context);
    bool IsExportedTypeConst(es2panda_Context context);
    bool IsDeclareConst(es2panda_Context context);
    bool IsInConst(es2panda_Context context);
    bool IsOutConst(es2panda_Context context);
    bool IsSetterConst(es2panda_Context context);
    void AddModifier(es2panda_Context context, Es2pandaModifierFlags flags);
    void ClearModifier(es2panda_Context context, Es2pandaModifierFlags flags);
    Es2pandaModifierFlags Modifiers(es2panda_Context context);
    Es2pandaModifierFlags ModifiersConst(es2panda_Context context);
    bool HasExportAliasConst(es2panda_Context context);
    es2panda_AstNode AsClassElement(es2panda_Context context);
    es2panda_AstNode AsClassElementConst(es2panda_Context context);
    es2panda_Scope EnclosingScope(es2panda_Context context, es2panda_AstNode expr);
    bool IsScopeBearerConst(es2panda_Context context);
    es2panda_Scope ScopeConst(es2panda_Context context);
    void ClearScope(es2panda_Context context);
    es2panda_AstNode GetTopStatement(es2panda_Context context);
    es2panda_AstNode GetTopStatementConst(es2panda_Context context);
    es2panda_AstNode Clone(es2panda_Context context, es2panda_AstNode parent);
    void TransformChildren(es2panda_Context context, NodeTransformer cb, char transformationName);
    void IterateConst(es2panda_Context context, NodeTraverser cb);
    void TransformChildrenRecursively(es2panda_Context context, NodeTransformer cb, char transformationName);
    void TransformChildrenRecursivelyPreorder(es2panda_Context context, NodeTransformer cb, char transformationName);
    void TransformChildrenRecursivelyPostorder(es2panda_Context context, NodeTransformer cb, char transformationName);
    void IterateRecursivelyConst(es2panda_Context context, NodeTraverser cb);
    void IterateRecursivelyPreorderConst(es2panda_Context context, NodeTraverser cb);
    void IterateRecursivelyPostorderConst(es2panda_Context context, NodeTraverser cb);
    bool IsAnyChildConst(es2panda_Context context, NodePredicate cb);
    es2panda_AstNode FindChildConst(es2panda_Context context, NodePredicate cb);
    char DumpJSONConst(es2panda_Context context);
    char DumpEtsSrcConst(es2panda_Context context);
    void DumpConst(es2panda_Context context, es2panda_AstDumper dumper);
    void DumpConst1(es2panda_Context context, es2panda_SrcDumper dumper);
    void CompileConst(es2panda_Context context, es2panda_CodeGen pg);
    void CompileConst1(es2panda_Context context, es2panda_CodeGen etsg);
    void SetTransformedNode(es2panda_Context context, char transformationName, es2panda_AstNode transformedNode);
    void Accept(es2panda_Context context, es2panda_AstVisitor v);
    void SetOriginalNode(es2panda_Context context, es2panda_AstNode originalNode);
    es2panda_AstNode OriginalNodeConst(es2panda_Context context);
};


[Entity=Class] interface VectorIterationGuard {


};


[Entity=Class] interface TypedAstNode: AstNode {


};

[Entity=Class] interface AnnotatedAstNode: AstNode {


};

[Entity=Class] interface TypedStatement: Statement {


};

[Entity=Class] interface AnnotatedStatement: Statement {


};

[Entity=Class] interface UnaryExpression: Expression {
    static es2panda_AstNode CreateUnaryExpression(es2panda_Context context, es2panda_AstNode argument, Es2pandaTokenType unaryOperator);

    static es2panda_AstNode UpdateUnaryExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode argument, Es2pandaTokenType unaryOperator);


    Es2pandaTokenType OperatorTypeConst(es2panda_Context context);
    es2panda_AstNode Argument(es2panda_Context context);
    es2panda_AstNode ArgumentConst(es2panda_Context context);
};

[Entity=Class] interface ForInStatement: LoopStatement {
    static es2panda_AstNode CreateForInStatement(es2panda_Context context, es2panda_AstNode left, es2panda_AstNode right, es2panda_AstNode body);

    static es2panda_AstNode UpdateForInStatement(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode left, es2panda_AstNode right, es2panda_AstNode body);


    es2panda_AstNode Left(es2panda_Context context);
    es2panda_AstNode LeftConst(es2panda_Context context);
    es2panda_AstNode Right(es2panda_Context context);
    es2panda_AstNode RightConst(es2panda_Context context);
    es2panda_AstNode Body(es2panda_Context context);
    es2panda_AstNode BodyConst(es2panda_Context context);
};

[Entity=Class] interface ThisExpression: Expression {
    static es2panda_AstNode CreateThisExpression(es2panda_Context context);

    static es2panda_AstNode UpdateThisExpression(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface TSMethodSignature: AstNode {
    static es2panda_AstNode CreateTSMethodSignature(es2panda_Context context, es2panda_AstNode key, es2panda_FunctionSignature signature, bool computed, bool optional_arg);

    static es2panda_AstNode UpdateTSMethodSignature(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode key, es2panda_FunctionSignature signature, bool computed, bool optional_arg);


    void SetScope(es2panda_Context context, es2panda_Scope scope);
    es2panda_AstNode KeyConst(es2panda_Context context);
    es2panda_AstNode Key(es2panda_Context context);
    es2panda_AstNode TypeParamsConst(es2panda_Context context);
    es2panda_AstNode TypeParams(es2panda_Context context);
    sequence<es2panda_AstNode> ParamsConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_AstNode ReturnTypeAnnotationConst(es2panda_Context context);
    es2panda_AstNode ReturnTypeAnnotation(es2panda_Context context);
    bool ComputedConst(es2panda_Context context);
    bool OptionalConst(es2panda_Context context);
};

[Entity=Class] interface BinaryExpression: Expression {
    static es2panda_AstNode CreateBinaryExpression(es2panda_Context context, es2panda_AstNode left, es2panda_AstNode right, Es2pandaTokenType operatorType);

    static es2panda_AstNode UpdateBinaryExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode left, es2panda_AstNode right, Es2pandaTokenType operatorType);


    es2panda_AstNode LeftConst(es2panda_Context context);
    es2panda_AstNode Left(es2panda_Context context);
    es2panda_AstNode RightConst(es2panda_Context context);
    es2panda_AstNode Right(es2panda_Context context);
    Es2pandaTokenType OperatorTypeConst(es2panda_Context context);
    bool IsLogicalConst(es2panda_Context context);
    bool IsLogicalExtendedConst(es2panda_Context context);
    bool IsBitwiseConst(es2panda_Context context);
    bool IsArithmeticConst(es2panda_Context context);
    void SetLeft(es2panda_Context context, es2panda_AstNode expr);
    void SetRight(es2panda_Context context, es2panda_AstNode expr);
    void SetResult(es2panda_Context context, es2panda_AstNode expr);
    void SetOperator(es2panda_Context context, Es2pandaTokenType operatorType);
    es2panda_Type OperationType(es2panda_Context context);
    void SetOperationType(es2panda_Context context, es2panda_Type operationType);
    es2panda_Type OperationTypeConst(es2panda_Context context);
    void CompileOperandsConst(es2panda_Context context, es2panda_CodeGen etsg, es2panda_VReg lhs);
};

[Entity=Class] interface SuperExpression: Expression {
    static es2panda_AstNode CreateSuperExpression(es2panda_Context context);

    static es2panda_AstNode UpdateSuperExpression(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface AssertStatement: Statement {
    static es2panda_AstNode CreateAssertStatement(es2panda_Context context, es2panda_AstNode test, es2panda_AstNode second);

    static es2panda_AstNode UpdateAssertStatement(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode test, es2panda_AstNode second);


    es2panda_AstNode TestConst(es2panda_Context context);
    es2panda_AstNode Test(es2panda_Context context);
    es2panda_AstNode SecondConst(es2panda_Context context);
};

[Entity=Class] interface TSStringKeyword: TypeNode {
    static es2panda_AstNode CreateTSStringKeyword(es2panda_Context context);

    static es2panda_AstNode UpdateTSStringKeyword(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface AssignmentExpression: Expression {
    static es2panda_AstNode CreateAssignmentExpression(es2panda_Context context, es2panda_AstNode left, es2panda_AstNode right, Es2pandaTokenType assignmentOperator);

    static es2panda_AstNode UpdateAssignmentExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode left, es2panda_AstNode right, Es2pandaTokenType assignmentOperator);
    static es2panda_AstNode CreateAssignmentExpression1(es2panda_Context context, Es2pandaAstNodeType type, es2panda_AstNode left, es2panda_AstNode right, Es2pandaTokenType assignmentOperator);

    static es2panda_AstNode UpdateAssignmentExpression1(es2panda_Context context, es2panda_AstNode original, Es2pandaAstNodeType type, es2panda_AstNode left, es2panda_AstNode right, Es2pandaTokenType assignmentOperator);


    es2panda_AstNode LeftConst(es2panda_Context context);
    es2panda_AstNode Left(es2panda_Context context);
    es2panda_AstNode Right(es2panda_Context context);
    es2panda_AstNode RightConst(es2panda_Context context);
    void SetRight(es2panda_Context context, es2panda_AstNode expr);
    Es2pandaTokenType OperatorTypeConst(es2panda_Context context);
    Es2pandaTokenType SetOperatorType(es2panda_Context context, Es2pandaTokenType tokenType);
    void SetResult(es2panda_Context context, es2panda_AstNode expr);
    bool IsLogicalExtendedConst(es2panda_Context context);
    es2panda_Variable Target(es2panda_Context context);
    es2panda_Variable TargetConst(es2panda_Context context);
    void SetIgnoreConstAssign(es2panda_Context context);
    bool IsIgnoreConstAssignConst(es2panda_Context context);
    bool ConvertibleToAssignmentPatternLeft(es2panda_Context context, bool mustBePattern);
    bool ConvertibleToAssignmentPatternRight(es2panda_Context context);
    bool ConvertibleToAssignmentPattern(es2panda_Context context, bool mustBePattern);
    void CompilePatternConst(es2panda_Context context, es2panda_CodeGen pg);
};

[Entity=Class] interface ExpressionStatement: Statement {
    static es2panda_AstNode CreateExpressionStatement(es2panda_Context context, es2panda_AstNode expr);

    static es2panda_AstNode UpdateExpressionStatement(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expr);


    es2panda_AstNode GetExpressionConst(es2panda_Context context);
    es2panda_AstNode GetExpression(es2panda_Context context);
};

[Entity=Class] interface ETSScript: BlockStatement {
    static es2panda_AstNode CreateETSScript(es2panda_Context context, sequence<es2panda_AstNode> statementList, u32 statementListLen);

    static es2panda_AstNode UpdateETSScript(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> statementList, u32 statementListLen);


};

[Entity=Class] interface MetaProperty: Expression {
    static es2panda_AstNode CreateMetaProperty(es2panda_Context context, Es2pandaMetaPropertyKind kind);

    static es2panda_AstNode UpdateMetaProperty(es2panda_Context context, es2panda_AstNode original, Es2pandaMetaPropertyKind kind);


    Es2pandaMetaPropertyKind KindConst(es2panda_Context context);
};

[Entity=Class] interface TSArrayType: TypeNode {
    static es2panda_AstNode CreateTSArrayType(es2panda_Context context, es2panda_AstNode elementType);

    static es2panda_AstNode UpdateTSArrayType(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode elementType);


    es2panda_AstNode ElementTypeConst(es2panda_Context context);
};

[Entity=Class] interface TSSignatureDeclaration: TypedAstNode {
    static es2panda_AstNode CreateTSSignatureDeclaration(es2panda_Context context, Es2pandaTSSignatureDeclarationKind kind, es2panda_FunctionSignature signature);

    static es2panda_AstNode UpdateTSSignatureDeclaration(es2panda_Context context, es2panda_AstNode original, Es2pandaTSSignatureDeclarationKind kind, es2panda_FunctionSignature signature);


    void SetScope(es2panda_Context context, es2panda_Scope scope);
    es2panda_AstNode TypeParamsConst(es2panda_Context context);
    es2panda_AstNode TypeParams(es2panda_Context context);
    sequence<es2panda_AstNode> ParamsConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_AstNode ReturnTypeAnnotationConst(es2panda_Context context);
    es2panda_AstNode ReturnTypeAnnotation(es2panda_Context context);
    Es2pandaTSSignatureDeclarationKind KindConst(es2panda_Context context);
};

[Entity=Class] interface ExportAllDeclaration: Statement {
    static es2panda_AstNode CreateExportAllDeclaration(es2panda_Context context, es2panda_AstNode source, es2panda_AstNode exported);

    static es2panda_AstNode UpdateExportAllDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode source, es2panda_AstNode exported);


    es2panda_AstNode SourceConst(es2panda_Context context);
    es2panda_AstNode ExportedConst(es2panda_Context context);
};

[Entity=Class] interface ExportSpecifier: Statement {
    static es2panda_AstNode CreateExportSpecifier(es2panda_Context context, es2panda_AstNode local, es2panda_AstNode exported);

    static es2panda_AstNode UpdateExportSpecifier(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode local, es2panda_AstNode exported);


    es2panda_AstNode LocalConst(es2panda_Context context);
    es2panda_AstNode ExportedConst(es2panda_Context context);
};

[Entity=Class] interface TSTupleType: TypeNode {
    static es2panda_AstNode CreateTSTupleType(es2panda_Context context, sequence<es2panda_AstNode> elementTypes, u32 elementTypesLen);

    static es2panda_AstNode UpdateTSTupleType(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> elementTypes, u32 elementTypesLen);


    sequence<es2panda_AstNode> ElementTypeConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface FunctionExpression: Expression {
    static es2panda_AstNode CreateFunctionExpression(es2panda_Context context, es2panda_AstNode func);

    static es2panda_AstNode UpdateFunctionExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode func);
    static es2panda_AstNode CreateFunctionExpression1(es2panda_Context context, es2panda_AstNode namedExpr, es2panda_AstNode func);

    static es2panda_AstNode UpdateFunctionExpression1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode namedExpr, es2panda_AstNode func);


    es2panda_AstNode FunctionConst(es2panda_Context context);
    es2panda_AstNode Function(es2panda_Context context);
    bool IsAnonymousConst(es2panda_Context context);
    es2panda_AstNode Id(es2panda_Context context);
};

[Entity=Class] interface TSIndexSignature: TypedAstNode {
    static es2panda_AstNode CreateTSIndexSignature(es2panda_Context context, es2panda_AstNode param, es2panda_AstNode typeAnnotation, bool readonly_arg);

    static es2panda_AstNode UpdateTSIndexSignature(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode param, es2panda_AstNode typeAnnotation, bool readonly_arg);


    es2panda_AstNode ParamConst(es2panda_Context context);
    es2panda_AstNode TypeAnnotationConst(es2panda_Context context);
    bool ReadonlyConst(es2panda_Context context);
    Es2pandaTSIndexSignatureKind KindConst(es2panda_Context context);
};

[Entity=Class] interface TSModuleDeclaration: Statement {
    static es2panda_AstNode CreateTSModuleDeclaration(es2panda_Context context, es2panda_AstNode name, es2panda_AstNode body, bool declare, bool global);

    static es2panda_AstNode UpdateTSModuleDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode name, es2panda_AstNode body, bool declare, bool global);


    void SetScope(es2panda_Context context, es2panda_Scope scope);
    es2panda_AstNode NameConst(es2panda_Context context);
    es2panda_AstNode BodyConst(es2panda_Context context);
    bool GlobalConst(es2panda_Context context);
    bool IsExternalOrAmbientConst(es2panda_Context context);
};

[Entity=Class] interface ImportDeclaration: Statement {
    static es2panda_AstNode CreateImportDeclaration(es2panda_Context context, es2panda_AstNode source, sequence<es2panda_AstNode> specifiers, u32 specifiersLen, Es2pandaImportKinds importKind);

    static es2panda_AstNode UpdateImportDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode source, sequence<es2panda_AstNode> specifiers, u32 specifiersLen, Es2pandaImportKinds importKind);


    es2panda_AstNode SourceConst(es2panda_Context context);
    es2panda_AstNode Source(es2panda_Context context);
    sequence<es2panda_AstNode> SpecifiersConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> Specifiers(es2panda_Context context, u32 returnTypeLen);
    bool IsTypeKindConst(es2panda_Context context);
};

[Entity=Class] interface TSParenthesizedType: TypeNode {
    static es2panda_AstNode CreateTSParenthesizedType(es2panda_Context context, es2panda_AstNode type);

    static es2panda_AstNode UpdateTSParenthesizedType(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode type);


    es2panda_AstNode TypeConst(es2panda_Context context);
};

[Entity=Class] interface Literal: Expression {


    char ToStringConst(es2panda_Context context);
};

[Entity=Class] interface CharLiteral: Literal {
    static es2panda_AstNode CreateCharLiteral(es2panda_Context context);

    static es2panda_AstNode UpdateCharLiteral(es2panda_Context context, es2panda_AstNode original);
    static es2panda_AstNode CreateCharLiteral1(es2panda_Context context, i16 character);

    static es2panda_AstNode UpdateCharLiteral1(es2panda_Context context, es2panda_AstNode original, i16 character);


    i16 CharConst(es2panda_Context context);
};

[Entity=Class] interface ETSPackageDeclaration: Statement {
    static es2panda_AstNode CreateETSPackageDeclaration(es2panda_Context context, es2panda_AstNode name);

    static es2panda_AstNode UpdateETSPackageDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode name);


};

[Entity=Class] interface ETSImportDeclaration: ImportDeclaration {
    static es2panda_AstNode CreateETSImportDeclaration(es2panda_Context context, es2panda_ImportSource source, sequence<es2panda_AstNode> specifiers, u32 specifiersLen, Es2pandaImportKinds importKind);

    static es2panda_AstNode UpdateETSImportDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_ImportSource source, sequence<es2panda_AstNode> specifiers, u32 specifiersLen, Es2pandaImportKinds importKind);


    bool HasDeclConst(es2panda_Context context);
    bool IsPureDynamicConst(es2panda_Context context);
    char AssemblerName(es2panda_Context context);
    char AssemblerNameConst(es2panda_Context context);
    es2panda_AstNode SourceConst(es2panda_Context context);
    es2panda_AstNode ResolvedSource(es2panda_Context context);
    es2panda_AstNode ResolvedSourceConst(es2panda_Context context);
};

[Entity=Class] interface ETSStructDeclaration: Statement {
    static es2panda_AstNode CreateETSStructDeclaration(es2panda_Context context, es2panda_AstNode def);

    static es2panda_AstNode UpdateETSStructDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode def);


    es2panda_AstNode Definition(es2panda_Context context);
    es2panda_AstNode DefinitionConst(es2panda_Context context);
    sequence<es2panda_AstNode> DecoratorsConst(es2panda_Context context, u32 returnTypeLen);
    void AddDecorator(es2panda_Context context, es2panda_AstNode decorator);
};

[Entity=Class] interface TSModuleBlock: Statement {
    static es2panda_AstNode CreateTSModuleBlock(es2panda_Context context, sequence<es2panda_AstNode> statements, u32 statementsLen);

    static es2panda_AstNode UpdateTSModuleBlock(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> statements, u32 statementsLen);


    void SetScope(es2panda_Context context, es2panda_Scope scope);
    sequence<es2panda_AstNode> StatementsConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface ETSNewArrayInstanceExpression: Expression {
    static es2panda_AstNode CreateETSNewArrayInstanceExpression(es2panda_Context context, es2panda_AstNode typeReference, es2panda_AstNode dimension);

    static es2panda_AstNode UpdateETSNewArrayInstanceExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode typeReference, es2panda_AstNode dimension);


    es2panda_AstNode TypeReference(es2panda_Context context);
    es2panda_AstNode TypeReferenceConst(es2panda_Context context);
    es2panda_AstNode Dimension(es2panda_Context context);
    es2panda_AstNode DimensionConst(es2panda_Context context);
    es2panda_Signature SignatureConst(es2panda_Context context);
    es2panda_Signature Signature(es2panda_Context context);
    void SetDimension(es2panda_Context context, es2panda_AstNode dimension);
    void SetSignature(es2panda_Context context, es2panda_Signature signature);
};

[Entity=Class] interface LoopStatement: Statement {


    es2panda_Scope ScopeConst(es2panda_Context context);
    void SetScope(es2panda_Context context, es2panda_Scope scope);
};

[Entity=Class] interface AnnotationDeclaration: Statement {
    static es2panda_AstNode CreateAnnotationDeclaration(es2panda_Context context, es2panda_AstNode expr);

    static es2panda_AstNode UpdateAnnotationDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expr);
    static es2panda_AstNode CreateAnnotationDeclaration1(es2panda_Context context, es2panda_AstNode expr, sequence<es2panda_AstNode> properties, u32 propertiesLen);

    static es2panda_AstNode UpdateAnnotationDeclaration1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expr, sequence<es2panda_AstNode> properties, u32 propertiesLen);


    char InternalNameConst(es2panda_Context context);
    void SetInternalName(es2panda_Context context, char internalName);
    es2panda_AstNode ExprConst(es2panda_Context context);
    es2panda_AstNode Expr(es2panda_Context context);
    sequence<es2panda_AstNode> Properties(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> PropertiesConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> PropertiesPtrConst(es2panda_Context context, u32 returnTypeLen);
    void AddProperties(es2panda_Context context, sequence<es2panda_AstNode> properties, u32 propertiesLen);
    void SetScope(es2panda_Context context, es2panda_Scope scope);
    es2panda_AstNode GetBaseNameConst(es2panda_Context context);
};

[Entity=Class] interface AnnotationUsage: Statement {
    static es2panda_AstNode CreateAnnotationUsageIr(es2panda_Context context, es2panda_AstNode expr);

    static es2panda_AstNode UpdateAnnotationUsageIr(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expr);
    static es2panda_AstNode CreateAnnotationUsageIr1(es2panda_Context context, es2panda_AstNode expr, sequence<es2panda_AstNode> properties, u32 propertiesLen);

    static es2panda_AstNode UpdateAnnotationUsageIr1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expr, sequence<es2panda_AstNode> properties, u32 propertiesLen);


    es2panda_AstNode IrExpr(es2panda_Context context);
    sequence<es2panda_AstNode> IrProperties(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> IrPropertiesConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> IrPropertiesPtrConst(es2panda_Context context, u32 returnTypeLen);
    void IrSetProperties(es2panda_Context context, sequence<es2panda_AstNode> properties, u32 propertiesLen);
    void IrSetScope(es2panda_Context context, es2panda_Scope scope);
    es2panda_AstNode IrGetBaseNameConst(es2panda_Context context);
};

[Entity=Class] interface EmptyStatement: Statement {
    static es2panda_AstNode CreateEmptyStatement(es2panda_Context context);

    static es2panda_AstNode UpdateEmptyStatement(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface ETSLaunchExpression: Expression {
    static es2panda_AstNode CreateETSLaunchExpression(es2panda_Context context, es2panda_AstNode expr);

    static es2panda_AstNode UpdateETSLaunchExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expr);


    bool IsStaticCallConst(es2panda_Context context);
    es2panda_AstNode CallConst(es2panda_Context context);
};

[Entity=Class] interface WhileStatement: LoopStatement {
    static es2panda_AstNode CreateWhileStatement(es2panda_Context context, es2panda_AstNode test, es2panda_AstNode body);

    static es2panda_AstNode UpdateWhileStatement(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode test, es2panda_AstNode body);


    es2panda_AstNode TestConst(es2panda_Context context);
    es2panda_AstNode Test(es2panda_Context context);
    es2panda_AstNode BodyConst(es2panda_Context context);
    es2panda_AstNode Body(es2panda_Context context);
};

[Entity=Class] interface FunctionSignature {
    static es2panda_FunctionSignature CreateFunctionSignature(es2panda_Context context, es2panda_AstNode typeParams, sequence<es2panda_AstNode> params, u32 paramsLen, es2panda_AstNode returnTypeAnnotation, bool hasReceiver);



    sequence<es2panda_AstNode> ParamsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> Params(es2panda_Context context, u32 returnTypeLen);
    es2panda_AstNode TypeParams(es2panda_Context context);
    es2panda_AstNode TypeParamsConst(es2panda_Context context);
    es2panda_AstNode ReturnType(es2panda_Context context);
    void SetReturnType(es2panda_Context context, es2panda_AstNode type);
    es2panda_AstNode ReturnTypeConst(es2panda_Context context);
    u32 DefaultParamIndexConst(es2panda_Context context);
    void IterateConst(es2panda_Context context, NodeTraverser cb);
    void TransformChildren(es2panda_Context context, NodeTransformer cb, char transformationName);
    es2panda_FunctionSignature Clone(es2panda_Context context);
    bool HasReceiver(es2panda_Context context);
};

[Entity=Class] interface ChainExpression: Expression {
    static es2panda_AstNode CreateChainExpression(es2panda_Context context, es2panda_AstNode expression);

    static es2panda_AstNode UpdateChainExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expression);


    es2panda_AstNode GetExpressionConst(es2panda_Context context);
    es2panda_AstNode GetExpression(es2panda_Context context);
    void CompileToRegConst(es2panda_Context context, es2panda_CodeGen pg, es2panda_VReg objReg);
};

[Entity=Class] interface TSIntersectionType: TypeNode {
    static es2panda_AstNode CreateTSIntersectionType(es2panda_Context context, sequence<es2panda_AstNode> types, u32 typesLen);

    static es2panda_AstNode UpdateTSIntersectionType(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> types, u32 typesLen);


    sequence<es2panda_AstNode> TypesConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface UpdateExpression: Expression {
    static es2panda_AstNode CreateUpdateExpression(es2panda_Context context, es2panda_AstNode argument, Es2pandaTokenType updateOperator, bool isPrefix);

    static es2panda_AstNode UpdateUpdateExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode argument, Es2pandaTokenType updateOperator, bool isPrefix);


    Es2pandaTokenType OperatorTypeConst(es2panda_Context context);
    es2panda_AstNode Argument(es2panda_Context context);
    es2panda_AstNode ArgumentConst(es2panda_Context context);
    bool IsPrefixConst(es2panda_Context context);
};

[Entity=Class] interface BlockExpression: Expression {
    static es2panda_AstNode CreateBlockExpression(es2panda_Context context, sequence<es2panda_AstNode> statements, u32 statementsLen);

    static es2panda_AstNode UpdateBlockExpression(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> statements, u32 statementsLen);


    sequence<es2panda_AstNode> StatementsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> Statements(es2panda_Context context, u32 returnTypeLen);
    void AddStatements(es2panda_Context context, sequence<es2panda_AstNode> statements, u32 statementsLen);
    void AddStatement(es2panda_Context context, es2panda_AstNode statement);
    void SetScope(es2panda_Context context, es2panda_Scope scope);
};

[Entity=Class] interface TSTypeLiteral: TypeNode {
    static es2panda_AstNode CreateTSTypeLiteral(es2panda_Context context, sequence<es2panda_AstNode> members, u32 membersLen);

    static es2panda_AstNode UpdateTSTypeLiteral(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> members, u32 membersLen);


    sequence<es2panda_AstNode> MembersConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface TSTypeParameter: Expression {
    static es2panda_AstNode CreateTSTypeParameter(es2panda_Context context, es2panda_AstNode name, es2panda_AstNode constraint, es2panda_AstNode defaultType);

    static es2panda_AstNode UpdateTSTypeParameter(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode name, es2panda_AstNode constraint, es2panda_AstNode defaultType);
    static es2panda_AstNode CreateTSTypeParameter1(es2panda_Context context, es2panda_AstNode name, es2panda_AstNode constraint, es2panda_AstNode defaultType, Es2pandaModifierFlags flags);

    static es2panda_AstNode UpdateTSTypeParameter1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode name, es2panda_AstNode constraint, es2panda_AstNode defaultType, Es2pandaModifierFlags flags);


    es2panda_AstNode NameConst(es2panda_Context context);
    es2panda_AstNode Name(es2panda_Context context);
    es2panda_AstNode Constraint(es2panda_Context context);
    es2panda_AstNode ConstraintConst(es2panda_Context context);
    void SetConstraint(es2panda_Context context, es2panda_AstNode constraint);
    es2panda_AstNode DefaultTypeConst(es2panda_Context context);
    void SetDefaultType(es2panda_Context context, es2panda_AstNode defaultType);
};

[Entity=Class] interface TSBooleanKeyword: TypeNode {
    static es2panda_AstNode CreateTSBooleanKeyword(es2panda_Context context);

    static es2panda_AstNode UpdateTSBooleanKeyword(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface SpreadElement: AnnotatedExpression {
    static es2panda_AstNode CreateSpreadElement(es2panda_Context context, Es2pandaAstNodeType nodeType, es2panda_AstNode argument);

    static es2panda_AstNode UpdateSpreadElement(es2panda_Context context, es2panda_AstNode original, Es2pandaAstNodeType nodeType, es2panda_AstNode argument);


    es2panda_AstNode ArgumentConst(es2panda_Context context);
    es2panda_AstNode Argument(es2panda_Context context);
    bool IsOptionalConst(es2panda_Context context);
    sequence<es2panda_AstNode> DecoratorsConst(es2panda_Context context, u32 returnTypeLen);
    void SetOptional(es2panda_Context context, bool optional_arg);
    es2panda_ValidationInfo ValidateExpression(es2panda_Context context);
    bool ConvertibleToRest(es2panda_Context context, bool isDeclaration, bool allowPattern);
};

[Entity=Class] interface TSTypePredicate: TypeNode {
    static es2panda_AstNode CreateTSTypePredicate(es2panda_Context context, es2panda_AstNode parameterName, es2panda_AstNode typeAnnotation, bool asserts);

    static es2panda_AstNode UpdateTSTypePredicate(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode parameterName, es2panda_AstNode typeAnnotation, bool asserts);


    es2panda_AstNode ParameterNameConst(es2panda_Context context);
    es2panda_AstNode TypeAnnotationConst(es2panda_Context context);
    bool AssertsConst(es2panda_Context context);
};

[Entity=Class] interface ImportNamespaceSpecifier: Statement {
    static es2panda_AstNode CreateImportNamespaceSpecifier(es2panda_Context context, es2panda_AstNode local);

    static es2panda_AstNode UpdateImportNamespaceSpecifier(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode local);


    es2panda_AstNode Local(es2panda_Context context);
    es2panda_AstNode LocalConst(es2panda_Context context);
};

[Entity=Class] interface ExportNamedDeclaration: Statement {
    static es2panda_AstNode CreateExportNamedDeclaration(es2panda_Context context, es2panda_AstNode source, sequence<es2panda_AstNode> specifiers, u32 specifiersLen);

    static es2panda_AstNode UpdateExportNamedDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode source, sequence<es2panda_AstNode> specifiers, u32 specifiersLen);
    static es2panda_AstNode CreateExportNamedDeclaration1(es2panda_Context context, es2panda_AstNode decl, sequence<es2panda_AstNode> specifiers, u32 specifiersLen);

    static es2panda_AstNode UpdateExportNamedDeclaration1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode decl, sequence<es2panda_AstNode> specifiers, u32 specifiersLen);
    static es2panda_AstNode CreateExportNamedDeclaration2(es2panda_Context context, es2panda_AstNode decl);

    static es2panda_AstNode UpdateExportNamedDeclaration2(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode decl);


    es2panda_AstNode DeclConst(es2panda_Context context);
    es2panda_AstNode SourceConst(es2panda_Context context);
    sequence<es2panda_AstNode> SpecifiersConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface ETSParameterExpression: Expression {
    static es2panda_AstNode CreateETSParameterExpression(es2panda_Context context, es2panda_AstNode identOrSpread, es2panda_AstNode initializer);

    static es2panda_AstNode UpdateETSParameterExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode identOrSpread, es2panda_AstNode initializer);


    es2panda_AstNode IdentConst(es2panda_Context context);
    es2panda_AstNode Ident(es2panda_Context context);
    es2panda_AstNode RestParameterConst(es2panda_Context context);
    es2panda_AstNode RestParameter(es2panda_Context context);
    es2panda_AstNode InitializerConst(es2panda_Context context);
    es2panda_AstNode Initializer(es2panda_Context context);
    void SetLexerSaved(es2panda_Context context, char s);
    char LexerSavedConst(es2panda_Context context);
    es2panda_Variable VariableConst(es2panda_Context context);
    void SetVariable(es2panda_Context context, es2panda_Variable variable);
    es2panda_AstNode TypeAnnotationConst(es2panda_Context context);
    es2panda_AstNode TypeAnnotation(es2panda_Context context);
    bool IsDefaultConst(es2panda_Context context);
    bool IsRestParameterConst(es2panda_Context context);
    u32 GetRequiredParamsConst(es2panda_Context context);
    void SetRequiredParams(es2panda_Context context, u32 value);
    void SetInitializer(es2panda_Context context, es2panda_AstNode initExpr);
};

[Entity=Class] interface TSTypeParameterInstantiation: Expression {
    static es2panda_AstNode CreateTSTypeParameterInstantiation(es2panda_Context context, sequence<es2panda_AstNode> params, u32 paramsLen);

    static es2panda_AstNode UpdateTSTypeParameterInstantiation(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> params, u32 paramsLen);


    sequence<es2panda_AstNode> ParamsConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface NullLiteral: Literal {
    static es2panda_AstNode CreateNullLiteral(es2panda_Context context);

    static es2panda_AstNode UpdateNullLiteral(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface TSInferType: TypeNode {
    static es2panda_AstNode CreateTSInferType(es2panda_Context context, es2panda_AstNode typeParam);

    static es2panda_AstNode UpdateTSInferType(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode typeParam);


    es2panda_AstNode TypeParamConst(es2panda_Context context);
};

[Entity=Class] interface SwitchCaseStatement: Statement {
    static es2panda_AstNode CreateSwitchCaseStatement(es2panda_Context context, es2panda_AstNode test, sequence<es2panda_AstNode> consequent, u32 consequentLen);

    static es2panda_AstNode UpdateSwitchCaseStatement(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode test, sequence<es2panda_AstNode> consequent, u32 consequentLen);


    es2panda_AstNode Test(es2panda_Context context);
    es2panda_AstNode TestConst(es2panda_Context context);
    sequence<es2panda_AstNode> ConsequentConst(es2panda_Context context, u32 returnTypeLen);
    void CheckAndTestCase(es2panda_Context context, es2panda_Type comparedExprType, es2panda_Type unboxedDiscType, es2panda_AstNode node, bool isDefaultCase);
};

[Entity=Class] interface YieldExpression: Expression {
    static es2panda_AstNode CreateYieldExpression(es2panda_Context context, es2panda_AstNode argument, bool isDelegate);

    static es2panda_AstNode UpdateYieldExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode argument, bool isDelegate);


    bool HasDelegateConst(es2panda_Context context);
    es2panda_AstNode ArgumentConst(es2panda_Context context);
};

[Entity=Class] interface TSImportEqualsDeclaration: Statement {
    static es2panda_AstNode CreateTSImportEqualsDeclaration(es2panda_Context context, es2panda_AstNode id, es2panda_AstNode moduleReference, bool isExport);

    static es2panda_AstNode UpdateTSImportEqualsDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode id, es2panda_AstNode moduleReference, bool isExport);


    es2panda_AstNode IdConst(es2panda_Context context);
    es2panda_AstNode ModuleReferenceConst(es2panda_Context context);
    bool IsExportConst(es2panda_Context context);
};

[Entity=Class] interface BooleanLiteral: Literal {
    static es2panda_AstNode CreateBooleanLiteral(es2panda_Context context, bool value);

    static es2panda_AstNode UpdateBooleanLiteral(es2panda_Context context, es2panda_AstNode original, bool value);


    bool ValueConst(es2panda_Context context);
};

[Entity=Class] interface TSNumberKeyword: TypeNode {
    static es2panda_AstNode CreateTSNumberKeyword(es2panda_Context context);

    static es2panda_AstNode UpdateTSNumberKeyword(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface ClassStaticBlock: ClassElement {
    static es2panda_AstNode CreateClassStaticBlock(es2panda_Context context, es2panda_AstNode value);

    static es2panda_AstNode UpdateClassStaticBlock(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode value);


    es2panda_AstNode Function(es2panda_Context context);
    es2panda_AstNode FunctionConst(es2panda_Context context);
    char NameConst(es2panda_Context context);
};

[Entity=Class] interface TSNonNullExpression: Expression {
    static es2panda_AstNode CreateTSNonNullExpression(es2panda_Context context, es2panda_AstNode expr);

    static es2panda_AstNode UpdateTSNonNullExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expr);


    es2panda_AstNode ExprConst(es2panda_Context context);
    es2panda_AstNode Expr(es2panda_Context context);
    void SetExpr(es2panda_Context context, es2panda_AstNode expr);
    es2panda_Type OriginalTypeConst(es2panda_Context context);
    void SetOriginalType(es2panda_Context context, es2panda_Type type);
};

[Entity=Class] interface PrefixAssertionExpression: Expression {
    static es2panda_AstNode CreatePrefixAssertionExpression(es2panda_Context context, es2panda_AstNode expr, es2panda_AstNode type);

    static es2panda_AstNode UpdatePrefixAssertionExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expr, es2panda_AstNode type);


    es2panda_AstNode ExprConst(es2panda_Context context);
    es2panda_AstNode TypeConst(es2panda_Context context);
};

[Entity=Class] interface ClassExpression: Expression {
    static es2panda_AstNode CreateClassExpression(es2panda_Context context, es2panda_AstNode def);

    static es2panda_AstNode UpdateClassExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode def);


    es2panda_AstNode DefinitionConst(es2panda_Context context);
};

[Entity=Class] interface ForOfStatement: LoopStatement {
    static es2panda_AstNode CreateForOfStatement(es2panda_Context context, es2panda_AstNode left, es2panda_AstNode right, es2panda_AstNode body, bool isAwait);

    static es2panda_AstNode UpdateForOfStatement(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode left, es2panda_AstNode right, es2panda_AstNode body, bool isAwait);


    es2panda_AstNode Left(es2panda_Context context);
    es2panda_AstNode LeftConst(es2panda_Context context);
    es2panda_AstNode Right(es2panda_Context context);
    es2panda_AstNode RightConst(es2panda_Context context);
    es2panda_AstNode Body(es2panda_Context context);
    es2panda_AstNode BodyConst(es2panda_Context context);
    bool IsAwaitConst(es2panda_Context context);
};

[Entity=Class] interface TemplateLiteral: Expression {
    static es2panda_AstNode CreateTemplateLiteral(es2panda_Context context, sequence<es2panda_AstNode> quasis, u32 quasisLen, sequence<es2panda_AstNode> expressions, u32 expressionsLen);

    static es2panda_AstNode UpdateTemplateLiteral(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> quasis, u32 quasisLen, sequence<es2panda_AstNode> expressions, u32 expressionsLen);


    sequence<es2panda_AstNode> QuasisConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> ExpressionsConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface TSUnionType: TypeNode {
    static es2panda_AstNode CreateTSUnionType(es2panda_Context context, sequence<es2panda_AstNode> types, u32 typesLen);

    static es2panda_AstNode UpdateTSUnionType(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> types, u32 typesLen);


    sequence<es2panda_AstNode> TypesConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface TSUnknownKeyword: TypeNode {
    static es2panda_AstNode CreateTSUnknownKeyword(es2panda_Context context);

    static es2panda_AstNode UpdateTSUnknownKeyword(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface Identifier: AnnotatedExpression {
    static es2panda_AstNode CreateIdentifier(es2panda_Context context);

    static es2panda_AstNode UpdateIdentifier(es2panda_Context context, es2panda_AstNode original);
    static es2panda_AstNode CreateIdentifier1(es2panda_Context context, char name);

    static es2panda_AstNode UpdateIdentifier1(es2panda_Context context, es2panda_AstNode original, char name);
    static es2panda_AstNode CreateIdentifier2(es2panda_Context context, char name, es2panda_AstNode typeAnnotation);

    static es2panda_AstNode UpdateIdentifier2(es2panda_Context context, es2panda_AstNode original, char name, es2panda_AstNode typeAnnotation);


    char NameConst(es2panda_Context context);
    char Name(es2panda_Context context);
    void SetName(es2panda_Context context, char newName);
    sequence<es2panda_AstNode> DecoratorsConst(es2panda_Context context, u32 returnTypeLen);
    bool IsErrorPlaceHolderConst(es2panda_Context context);
    bool IsOptionalConst(es2panda_Context context);
    void SetOptional(es2panda_Context context, bool optional_arg);
    bool IsReferenceConst(es2panda_Context context);
    bool IsTdzConst(es2panda_Context context);
    void SetTdz(es2panda_Context context);
    void SetAccessor(es2panda_Context context);
    bool IsAccessorConst(es2panda_Context context);
    void SetMutator(es2panda_Context context);
    bool IsMutatorConst(es2panda_Context context);
    bool IsReceiverConst(es2panda_Context context);
    bool IsPrivateIdentConst(es2panda_Context context);
    void SetPrivate(es2panda_Context context, bool isPrivate);
    bool IsIgnoreBoxConst(es2panda_Context context);
    void SetIgnoreBox(es2panda_Context context);
    bool IsAnnotationDeclConst(es2panda_Context context);
    void SetAnnotationDecl(es2panda_Context context);
    bool IsAnnotationUsageConst(es2panda_Context context);
    void SetAnnotationUsage(es2panda_Context context);
    es2panda_AstNode CloneReference(es2panda_Context context, es2panda_AstNode parent);
    es2panda_ValidationInfo ValidateExpression(es2panda_Context context);
};

[Entity=Class] interface OpaqueTypeNode: TypeNode {
    static es2panda_AstNode CreateOpaqueTypeNode(es2panda_Context context, es2panda_Type type);

    static es2panda_AstNode UpdateOpaqueTypeNode(es2panda_Context context, es2panda_AstNode original, es2panda_Type type);
    static es2panda_AstNode CreateOpaqueTypeNode1(es2panda_Context context);

    static es2panda_AstNode UpdateOpaqueTypeNode1(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface BlockStatement: Statement {
    static es2panda_AstNode CreateBlockStatement(es2panda_Context context, sequence<es2panda_AstNode> statementList, u32 statementListLen);

    static es2panda_AstNode UpdateBlockStatement(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> statementList, u32 statementListLen);


    void SetScope(es2panda_Context context, es2panda_Scope scope);
    sequence<es2panda_AstNode> StatementsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> Statements(es2panda_Context context, u32 returnTypeLen);
    void SetStatements(es2panda_Context context, sequence<es2panda_AstNode> statementList, u32 statementListLen);
    void AddTrailingBlock(es2panda_Context context, es2panda_AstNode stmt, es2panda_AstNode trailingBlock);
};

[Entity=Class] interface Statement: AstNode {


    void SetReturnType(es2panda_Context context, es2panda_Type type);
};

[Entity=Class] interface DirectEvalExpression: CallExpression {
    static es2panda_AstNode CreateDirectEvalExpression(es2panda_Context context, es2panda_AstNode callee, sequence<es2panda_AstNode> arguments, u32 argumentsLen, es2panda_AstNode typeParams, bool optional_arg, u32 parserStatus);

    static es2panda_AstNode UpdateDirectEvalExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode callee, sequence<es2panda_AstNode> arguments, u32 argumentsLen, es2panda_AstNode typeParams, bool optional_arg, u32 parserStatus);


};

[Entity=Class] interface TSTypeParameterDeclaration: Expression {
    static es2panda_AstNode CreateTSTypeParameterDeclaration(es2panda_Context context, sequence<es2panda_AstNode> params, u32 paramsLen, u32 requiredParams);

    static es2panda_AstNode UpdateTSTypeParameterDeclaration(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> params, u32 paramsLen, u32 requiredParams);


    void SetScope(es2panda_Context context, es2panda_Scope scope);
    sequence<es2panda_AstNode> ParamsConst(es2panda_Context context, u32 returnTypeLen);
    void AddParam(es2panda_Context context, es2panda_AstNode param);
    u32 RequiredParamsConst(es2panda_Context context);
};

[Entity=Class] interface MethodDefinition: ClassElement {
    static es2panda_AstNode CreateMethodDefinition(es2panda_Context context, Es2pandaMethodDefinitionKind kind, es2panda_AstNode key, es2panda_AstNode value, Es2pandaModifierFlags modifiers, bool isComputed);

    static es2panda_AstNode UpdateMethodDefinition(es2panda_Context context, es2panda_AstNode original, Es2pandaMethodDefinitionKind kind, es2panda_AstNode key, es2panda_AstNode value, Es2pandaModifierFlags modifiers, bool isComputed);


    Es2pandaMethodDefinitionKind KindConst(es2panda_Context context);
    bool IsConstructorConst(es2panda_Context context);
    bool IsExtensionMethodConst(es2panda_Context context);
    sequence<es2panda_AstNode> OverloadsConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_AstNode BaseOverloadMethodConst(es2panda_Context context);
    es2panda_AstNode BaseOverloadMethod(es2panda_Context context);
    es2panda_AstNode AsyncPairMethodConst(es2panda_Context context);
    es2panda_AstNode AsyncPairMethod(es2panda_Context context);
    void SetOverloads(es2panda_Context context, sequence<es2panda_AstNode> overloads, u32 overloadsLen);
    void ClearOverloads(es2panda_Context context);
    void AddOverload(es2panda_Context context, es2panda_AstNode overload);
    void SetBaseOverloadMethod(es2panda_Context context, es2panda_AstNode baseOverloadMethod);
    void SetAsyncPairMethod(es2panda_Context context, es2panda_AstNode method);
    bool HasOverload(es2panda_Context context, es2panda_AstNode overload);
    es2panda_AstNode Function(es2panda_Context context);
    es2panda_AstNode FunctionConst(es2panda_Context context);
    void ResolveReferencesConst(es2panda_Context context, NodeTraverser cb);
};

[Entity=Class] interface TSNullKeyword: TypeNode {
    static es2panda_AstNode CreateTSNullKeyword(es2panda_Context context);

    static es2panda_AstNode UpdateTSNullKeyword(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface TSInterfaceHeritage: Expression {
    static es2panda_AstNode CreateTSInterfaceHeritage(es2panda_Context context, es2panda_AstNode expr);

    static es2panda_AstNode UpdateTSInterfaceHeritage(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expr);


    es2panda_AstNode Expr(es2panda_Context context);
    es2panda_AstNode ExprConst(es2panda_Context context);
};

[Entity=Class] interface Expression: TypedAstNode {


    bool IsGroupedConst(es2panda_Context context);
    void SetGrouped(es2panda_Context context);
    es2panda_AstNode AsLiteralConst(es2panda_Context context);
    es2panda_AstNode AsLiteral(es2panda_Context context);
    bool IsLiteralConst(es2panda_Context context);
    bool IsTypeNodeConst(es2panda_Context context);
    bool IsAnnotatedExpressionConst(es2panda_Context context);
    es2panda_AstNode AsTypeNode(es2panda_Context context);
    es2panda_AstNode AsTypeNodeConst(es2panda_Context context);
    es2panda_AstNode AsAnnotatedExpression(es2panda_Context context);
    es2panda_AstNode AsAnnotatedExpressionConst(es2panda_Context context);
    bool IsErrorExpressionConst(es2panda_Context context);
};

[Entity=Class] interface AnnotatedExpression: Expression {


};

[Entity=Class] interface MaybeOptionalExpression: Expression {


    bool IsOptionalConst(es2panda_Context context);
    void ClearOptional(es2panda_Context context);
};

[Entity=Class] interface SrcDumper {
    static es2panda_SrcDumper CreateSrcDumper(es2panda_Context context, es2panda_AstNode node);



    void Add(es2panda_Context context, char str);
    void Add1(es2panda_Context context, i32 i);
    void Add2(es2panda_Context context, i64 l);
    void Add3(es2panda_Context context, float f);
    void Add4(es2panda_Context context, double d);
    char StrConst(es2panda_Context context);
    void IncrIndent(es2panda_Context context);
    void DecrIndent(es2panda_Context context);
    void Endl(es2panda_Context context, u32 num);
};

[Entity=Class] interface ETSClassLiteral: Expression {
    static es2panda_AstNode CreateETSClassLiteral(es2panda_Context context, es2panda_AstNode expr);

    static es2panda_AstNode UpdateETSClassLiteral(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expr);


    es2panda_AstNode ExprConst(es2panda_Context context);
};

[Entity=Class] interface BreakStatement: Statement {
    static es2panda_AstNode CreateBreakStatement(es2panda_Context context);

    static es2panda_AstNode UpdateBreakStatement(es2panda_Context context, es2panda_AstNode original);
    static es2panda_AstNode CreateBreakStatement1(es2panda_Context context, es2panda_AstNode ident);

    static es2panda_AstNode UpdateBreakStatement1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode ident);


    es2panda_AstNode IdentConst(es2panda_Context context);
    es2panda_AstNode Ident(es2panda_Context context);
    es2panda_AstNode TargetConst(es2panda_Context context);
    void SetTarget(es2panda_Context context, es2panda_AstNode target);
};

[Entity=Class] interface RegExpLiteral: Literal {
    static es2panda_AstNode CreateRegExpLiteral(es2panda_Context context, char pattern, Es2pandaRegExpFlags flags, char flagsStr);

    static es2panda_AstNode UpdateRegExpLiteral(es2panda_Context context, es2panda_AstNode original, char pattern, Es2pandaRegExpFlags flags, char flagsStr);


    char PatternConst(es2panda_Context context);
    Es2pandaRegExpFlags FlagsConst(es2panda_Context context);
};

[Entity=Class] interface TSMappedType: TypeNode {
    static es2panda_AstNode CreateTSMappedType(es2panda_Context context, es2panda_AstNode typeParameter, es2panda_AstNode typeAnnotation, Es2pandaMappedOption readonly_arg, Es2pandaMappedOption optional_arg);

    static es2panda_AstNode UpdateTSMappedType(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode typeParameter, es2panda_AstNode typeAnnotation, Es2pandaMappedOption readonly_arg, Es2pandaMappedOption optional_arg);


    es2panda_AstNode TypeParameter(es2panda_Context context);
    es2panda_AstNode TypeAnnotation(es2panda_Context context);
    Es2pandaMappedOption Readonly(es2panda_Context context);
    Es2pandaMappedOption Optional(es2panda_Context context);
};

[Entity=Class] interface TSAnyKeyword: TypeNode {
    static es2panda_AstNode CreateTSAnyKeyword(es2panda_Context context);

    static es2panda_AstNode UpdateTSAnyKeyword(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface ClassDeclaration: Statement {
    static es2panda_AstNode CreateClassDeclaration(es2panda_Context context, es2panda_AstNode def);

    static es2panda_AstNode UpdateClassDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode def);


    es2panda_AstNode Definition(es2panda_Context context);
    es2panda_AstNode DefinitionConst(es2panda_Context context);
    sequence<es2panda_AstNode> DecoratorsConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface TSIndexedAccessType: TypeNode {
    static es2panda_AstNode CreateTSIndexedAccessType(es2panda_Context context, es2panda_AstNode objectType, es2panda_AstNode indexType);

    static es2panda_AstNode UpdateTSIndexedAccessType(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode objectType, es2panda_AstNode indexType);


    es2panda_AstNode ObjectTypeConst(es2panda_Context context);
    es2panda_AstNode IndexTypeConst(es2panda_Context context);
};

[Entity=Class] interface TSQualifiedName: Expression {
    static es2panda_AstNode CreateTSQualifiedName(es2panda_Context context, es2panda_AstNode left, es2panda_AstNode right);

    static es2panda_AstNode UpdateTSQualifiedName(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode left, es2panda_AstNode right);


    es2panda_AstNode LeftConst(es2panda_Context context);
    es2panda_AstNode Left(es2panda_Context context);
    es2panda_AstNode RightConst(es2panda_Context context);
    es2panda_AstNode Right(es2panda_Context context);
    char ToStringConst(es2panda_Context context);
    char BaseToStringConst(es2panda_Context context);
    es2panda_AstNode ResolveLeftMostQualifiedName(es2panda_Context context);
    es2panda_AstNode ResolveLeftMostQualifiedNameConst(es2panda_Context context);
};

[Entity=Class] interface AwaitExpression: Expression {
    static es2panda_AstNode CreateAwaitExpression(es2panda_Context context, es2panda_AstNode argument);

    static es2panda_AstNode UpdateAwaitExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode argument);


    es2panda_AstNode ArgumentConst(es2panda_Context context);
};

[Entity=Class] interface ValidationInfo {
    static es2panda_ValidationInfo CreateValidationInfo(es2panda_Context context);

    static es2panda_ValidationInfo CreateValidationInfo1(es2panda_Context context, char m, es2panda_SourcePosition p);



    bool FailConst(es2panda_Context context);
};

[Entity=Class] interface ContinueStatement: Statement {
    static es2panda_AstNode CreateContinueStatement(es2panda_Context context);

    static es2panda_AstNode UpdateContinueStatement(es2panda_Context context, es2panda_AstNode original);
    static es2panda_AstNode CreateContinueStatement1(es2panda_Context context, es2panda_AstNode ident);

    static es2panda_AstNode UpdateContinueStatement1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode ident);


    es2panda_AstNode IdentConst(es2panda_Context context);
    es2panda_AstNode Ident(es2panda_Context context);
    es2panda_AstNode TargetConst(es2panda_Context context);
    void SetTarget(es2panda_Context context, es2panda_AstNode target);
};

[Entity=Class] interface ETSNewMultiDimArrayInstanceExpression: Expression {
    static es2panda_AstNode CreateETSNewMultiDimArrayInstanceExpression(es2panda_Context context, es2panda_AstNode typeReference, sequence<es2panda_AstNode> dimensions, u32 dimensionsLen);

    static es2panda_AstNode UpdateETSNewMultiDimArrayInstanceExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode typeReference, sequence<es2panda_AstNode> dimensions, u32 dimensionsLen);
    static es2panda_AstNode CreateETSNewMultiDimArrayInstanceExpression1(es2panda_Context context, es2panda_AstNode other);

    static es2panda_AstNode UpdateETSNewMultiDimArrayInstanceExpression1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode other);


    es2panda_AstNode TypeReference(es2panda_Context context);
    es2panda_AstNode TypeReferenceConst(es2panda_Context context);
    sequence<es2panda_AstNode> Dimensions(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> DimensionsConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_Signature Signature(es2panda_Context context);
    es2panda_Signature SignatureConst(es2panda_Context context);
    void SetSignature(es2panda_Context context, es2panda_Signature signature);
};

[Entity=Class] interface TSNamedTupleMember: TypeNode {
    static es2panda_AstNode CreateTSNamedTupleMember(es2panda_Context context, es2panda_AstNode label, es2panda_AstNode elementType, bool optional_arg);

    static es2panda_AstNode UpdateTSNamedTupleMember(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode label, es2panda_AstNode elementType, bool optional_arg);


    es2panda_AstNode LabelConst(es2panda_Context context);
    es2panda_AstNode ElementType(es2panda_Context context);
    es2panda_AstNode ElementTypeConst(es2panda_Context context);
    bool IsOptionalConst(es2panda_Context context);
};

[Entity=Class] interface ImportExpression: Expression {
    static es2panda_AstNode CreateImportExpression(es2panda_Context context, es2panda_AstNode source);

    static es2panda_AstNode UpdateImportExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode source);


    es2panda_AstNode Source(es2panda_Context context);
    es2panda_AstNode SourceConst(es2panda_Context context);
};

[Entity=Class] interface AstDumper {
    static es2panda_AstDumper CreateAstDumper(es2panda_Context context, es2panda_AstNode node, char sourceCode);



    char ModifierToString(es2panda_Context context, Es2pandaModifierFlags flags);
    char TypeOperatorToString(es2panda_Context context, Es2pandaTSOperatorType operatorType);
    char StrConst(es2panda_Context context);
};

[Entity=Class] interface ETSNullType: TypeNode {
    static es2panda_AstNode CreateETSNullTypeIr(es2panda_Context context);

    static es2panda_AstNode UpdateETSNullTypeIr(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface ETSUndefinedType: TypeNode {
    static es2panda_AstNode CreateETSUndefinedTypeIr(es2panda_Context context);

    static es2panda_AstNode UpdateETSUndefinedTypeIr(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface TypeofExpression: Expression {
    static es2panda_AstNode CreateTypeofExpression(es2panda_Context context, es2panda_AstNode argument);

    static es2panda_AstNode UpdateTypeofExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode argument);


    es2panda_AstNode ArgumentConst(es2panda_Context context);
};

[Entity=Class] interface TSEnumMember: Statement {
    static es2panda_AstNode CreateTSEnumMember(es2panda_Context context, es2panda_AstNode key, es2panda_AstNode init);

    static es2panda_AstNode UpdateTSEnumMember(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode key, es2panda_AstNode init);
    static es2panda_AstNode CreateTSEnumMember1(es2panda_Context context, es2panda_AstNode key, es2panda_AstNode init, bool isGenerated);

    static es2panda_AstNode UpdateTSEnumMember1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode key, es2panda_AstNode init, bool isGenerated);


    es2panda_AstNode KeyConst(es2panda_Context context);
    es2panda_AstNode Key(es2panda_Context context);
    es2panda_AstNode InitConst(es2panda_Context context);
    es2panda_AstNode Init(es2panda_Context context);
    bool IsGeneratedConst(es2panda_Context context);
    char NameConst(es2panda_Context context);
};

[Entity=Class] interface SwitchStatement: Statement {
    static es2panda_AstNode CreateSwitchStatement(es2panda_Context context, es2panda_AstNode discriminant, sequence<es2panda_AstNode> cases, u32 casesLen);

    static es2panda_AstNode UpdateSwitchStatement(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode discriminant, sequence<es2panda_AstNode> cases, u32 casesLen);


    es2panda_AstNode DiscriminantConst(es2panda_Context context);
    es2panda_AstNode Discriminant(es2panda_Context context);
    sequence<es2panda_AstNode> CasesConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> Cases(es2panda_Context context, u32 returnTypeLen);
    void SetScope(es2panda_Context context, es2panda_Scope scope);
};

[Entity=Class] interface DoWhileStatement: LoopStatement {
    static es2panda_AstNode CreateDoWhileStatement(es2panda_Context context, es2panda_AstNode body, es2panda_AstNode test);

    static es2panda_AstNode UpdateDoWhileStatement(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode body, es2panda_AstNode test);


    es2panda_AstNode BodyConst(es2panda_Context context);
    es2panda_AstNode Body(es2panda_Context context);
    es2panda_AstNode TestConst(es2panda_Context context);
    es2panda_AstNode Test(es2panda_Context context);
};

[Entity=Class] interface CatchClause: TypedStatement {
    static es2panda_AstNode CreateCatchClause(es2panda_Context context, es2panda_AstNode param, es2panda_AstNode body);

    static es2panda_AstNode UpdateCatchClause(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode param, es2panda_AstNode body);


    es2panda_AstNode Param(es2panda_Context context);
    es2panda_AstNode ParamConst(es2panda_Context context);
    es2panda_AstNode Body(es2panda_Context context);
    es2panda_AstNode BodyConst(es2panda_Context context);
    void SetScope(es2panda_Context context, es2panda_Scope scope);
    bool IsDefaultCatchClauseConst(es2panda_Context context);
};

[Entity=Class] interface SequenceExpression: Expression {
    static es2panda_AstNode CreateSequenceExpression(es2panda_Context context, sequence<es2panda_AstNode> sequence_arg, u32 sequenceLen);

    static es2panda_AstNode UpdateSequenceExpression(es2panda_Context context, es2panda_AstNode original, sequence<es2panda_AstNode> sequence_arg, u32 sequenceLen);


    sequence<es2panda_AstNode> SequenceConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> Sequence(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface ArrowFunctionExpression: Expression {
    static es2panda_AstNode CreateArrowFunctionExpression(es2panda_Context context, es2panda_AstNode func);

    static es2panda_AstNode UpdateArrowFunctionExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode func);
    static es2panda_AstNode CreateArrowFunctionExpression1(es2panda_Context context, es2panda_AstNode other);

    static es2panda_AstNode UpdateArrowFunctionExpression1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode other);


    es2panda_AstNode FunctionConst(es2panda_Context context);
    es2panda_AstNode Function(es2panda_Context context);
    es2panda_AstNode CreateTypeAnnotation(es2panda_Context context);
    es2panda_AstNode CreateReturnNodeFromType(es2panda_Context context, es2panda_Type returnType);
    bool IsVarFromSubscopeConst(es2panda_Context context, es2panda_Variable var);
};

[Entity=Class] interface OmittedExpression: Expression {
    static es2panda_AstNode CreateOmittedExpression(es2panda_Context context);

    static es2panda_AstNode UpdateOmittedExpression(es2panda_Context context, es2panda_AstNode original);


};

[Entity=Class] interface ETSNewClassInstanceExpression: Expression {
    static es2panda_AstNode CreateETSNewClassInstanceExpression(es2panda_Context context, es2panda_AstNode typeReference, sequence<es2panda_AstNode> arguments, u32 argumentsLen, es2panda_AstNode classDefinition);

    static es2panda_AstNode UpdateETSNewClassInstanceExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode typeReference, sequence<es2panda_AstNode> arguments, u32 argumentsLen, es2panda_AstNode classDefinition);
    static es2panda_AstNode CreateETSNewClassInstanceExpression1(es2panda_Context context, es2panda_AstNode other);

    static es2panda_AstNode UpdateETSNewClassInstanceExpression1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode other);


    es2panda_AstNode ClassDefinition(es2panda_Context context);
    es2panda_AstNode ClassDefinitionConst(es2panda_Context context);
    es2panda_AstNode GetTypeRefConst(es2panda_Context context);
    sequence<es2panda_AstNode> GetArgumentsConst(es2panda_Context context, u32 returnTypeLen);
    void SetArguments(es2panda_Context context, sequence<es2panda_AstNode> arguments, u32 argumentsLen);
    es2panda_Signature GetSignatureConst(es2panda_Context context);
    void SetSignature(es2panda_Context context, es2panda_Signature signature);
    void AddToArgumentsFront(es2panda_Context context, es2panda_AstNode expr);
    bool TypeIsAllowedForInstantiation(es2panda_Context context, es2panda_Type type);
};

[Entity=Class] interface TSAsExpression: AnnotatedExpression {
    static es2panda_AstNode CreateTSAsExpression(es2panda_Context context, es2panda_AstNode expression, es2panda_AstNode typeAnnotation, bool isConst);

    static es2panda_AstNode UpdateTSAsExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode expression, es2panda_AstNode typeAnnotation, bool isConst);


    es2panda_AstNode ExprConst(es2panda_Context context);
    es2panda_AstNode Expr(es2panda_Context context);
    void SetExpr(es2panda_Context context, es2panda_AstNode expr);
    bool IsConstConst(es2panda_Context context);
    void SetUncheckedCast(es2panda_Context context, bool isUncheckedCast);
};

[Entity=Class] interface ForUpdateStatement: LoopStatement {
    static es2panda_AstNode CreateForUpdateStatement(es2panda_Context context, es2panda_AstNode init, es2panda_AstNode test, es2panda_AstNode update, es2panda_AstNode body);

    static es2panda_AstNode UpdateForUpdateStatement(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode init, es2panda_AstNode test, es2panda_AstNode update, es2panda_AstNode body);


    es2panda_AstNode Init(es2panda_Context context);
    es2panda_AstNode InitConst(es2panda_Context context);
    es2panda_AstNode Test(es2panda_Context context);
    es2panda_AstNode TestConst(es2panda_Context context);
    es2panda_AstNode Update(es2panda_Context context);
    es2panda_AstNode UpdateConst(es2panda_Context context);
    es2panda_AstNode Body(es2panda_Context context);
    es2panda_AstNode BodyConst(es2panda_Context context);
};

[Entity=Class] interface ETSTypeReferencePart: TypeNode {
    static es2panda_AstNode CreateETSTypeReferencePart(es2panda_Context context, es2panda_AstNode name, es2panda_AstNode typeParams, es2panda_AstNode prev);

    static es2panda_AstNode UpdateETSTypeReferencePart(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode name, es2panda_AstNode typeParams, es2panda_AstNode prev);
    static es2panda_AstNode CreateETSTypeReferencePart1(es2panda_Context context, es2panda_AstNode name);

    static es2panda_AstNode UpdateETSTypeReferencePart1(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode name);


    es2panda_AstNode Previous(es2panda_Context context);
    es2panda_AstNode PreviousConst(es2panda_Context context);
    es2panda_AstNode Name(es2panda_Context context);
    es2panda_AstNode TypeParams(es2panda_Context context);
    es2panda_AstNode NameConst(es2panda_Context context);
};

[Entity=Class] interface ETSReExportDeclaration: Statement {
    static es2panda_AstNode CreateETSReExportDeclaration(es2panda_Context context, es2panda_AstNode etsImportDeclarations, sequence<char> userPaths, u32 userPathsLen, char programPath);

    static es2panda_AstNode UpdateETSReExportDeclaration(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode etsImportDeclarations, sequence<char> userPaths, u32 userPathsLen, char programPath);


    es2panda_AstNode GetETSImportDeclarationsConst(es2panda_Context context);
    es2panda_AstNode GetETSImportDeclarations(es2panda_Context context);
    sequence<char> GetUserPathsConst(es2panda_Context context, u32 returnTypeLen);
    char GetProgramPathConst(es2panda_Context context);
};

[Entity=Class] interface ETSPrimitiveType: TypeNode {
    static es2panda_AstNode CreateETSPrimitiveType(es2panda_Context context, Es2pandaPrimitiveType type);

    static es2panda_AstNode UpdateETSPrimitiveType(es2panda_Context context, es2panda_AstNode original, Es2pandaPrimitiveType type);


    Es2pandaPrimitiveType GetPrimitiveTypeConst(es2panda_Context context);
};

[Entity=Class] interface TypeNode: Expression {


    es2panda_Type GetType(es2panda_Context context);
};

[Entity=Class] interface NewExpression: Expression {
    static es2panda_AstNode CreateNewExpression(es2panda_Context context, es2panda_AstNode callee, sequence<es2panda_AstNode> arguments, u32 argumentsLen);

    static es2panda_AstNode UpdateNewExpression(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode callee, sequence<es2panda_AstNode> arguments, u32 argumentsLen);


    es2panda_AstNode CalleeConst(es2panda_Context context);
    sequence<es2panda_AstNode> ArgumentsConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface TSParameterProperty: Expression {
    static es2panda_AstNode CreateTSParameterProperty(es2panda_Context context, Es2pandaAccessibilityOption accessibility, es2panda_AstNode parameter, bool readonly_arg, bool isStatic, bool isExport);

    static es2panda_AstNode UpdateTSParameterProperty(es2panda_Context context, es2panda_AstNode original, Es2pandaAccessibilityOption accessibility, es2panda_AstNode parameter, bool readonly_arg, bool isStatic, bool isExport);


    Es2pandaAccessibilityOption AccessibilityConst(es2panda_Context context);
    bool ReadonlyConst(es2panda_Context context);
    bool IsStaticConst(es2panda_Context context);
    bool IsExportConst(es2panda_Context context);
    es2panda_AstNode ParameterConst(es2panda_Context context);
};

[Entity=Class] interface ETSWildcardType: TypeNode {
    static es2panda_AstNode CreateETSWildcardType(es2panda_Context context, es2panda_AstNode typeReference, Es2pandaModifierFlags flags);

    static es2panda_AstNode UpdateETSWildcardType(es2panda_Context context, es2panda_AstNode original, es2panda_AstNode typeReference, Es2pandaModifierFlags flags);


    es2panda_AstNode TypeReference(es2panda_Context context);
    es2panda_AstNode TypeReferenceConst(es2panda_Context context);
};

[Entity=Class] interface TSThisType: TypeNode {
    static es2panda_AstNode CreateTSThisType(es2panda_Context context);

    static es2panda_AstNode UpdateTSThisType(es2panda_Context context, es2panda_AstNode original);


};


[Entity=Class] interface UnknownType {
    static es2panda_Type CreateUnknownType(es2panda_Context context);



};

[Entity=Class] interface StringLiteralType {
    static es2panda_Type CreateStringLiteralType(es2panda_Context context, char value);



    char ValueConst(es2panda_Context context);
};

[Entity=Class] interface ObjectType {


    Es2pandaObjectTypeKind KindConst(es2panda_Context context);
    sequence<es2panda_Signature> CallSignatures(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Signature> ConstructSignatures(es2panda_Context context, u32 returnTypeLen);
    es2panda_IndexInfo StringIndexInfoConst(es2panda_Context context);
    es2panda_IndexInfo NumberIndexInfoConst(es2panda_Context context);
    es2panda_IndexInfo StringIndexInfo(es2panda_Context context);
    es2panda_IndexInfo NumberIndexInfo(es2panda_Context context);
    sequence<es2panda_Variable> Properties(es2panda_Context context, u32 returnTypeLen);
    es2panda_ObjectDescriptor Desc(es2panda_Context context);
    es2panda_ObjectDescriptor DescConst(es2panda_Context context);
    es2panda_Variable GetPropertyConst(es2panda_Context context, char name, bool searchInBase);
    void AddCallSignature(es2panda_Context context, es2panda_Signature signature);
    void AddConstructSignature(es2panda_Context context, es2panda_Signature signature);
    void AddObjectFlag(es2panda_Context context, Es2pandaObjectFlags flag);
    void RemoveObjectFlag(es2panda_Context context, Es2pandaObjectFlags flag);
    bool HasObjectFlagConst(es2panda_Context context, Es2pandaObjectFlags flag);
    bool SignatureRelatedToSomeSignature(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Signature sourceSignature, sequence<es2panda_Signature> targetSignatures, u32 targetSignaturesLen);
    bool EachSignatureRelatedToSomeSignature(es2panda_Context context, es2panda_TypeRelation relation, sequence<es2panda_Signature> sourceSignatures, u32 sourceSignaturesLen, sequence<es2panda_Signature> targetSignatures, u32 targetSignaturesLen);
    bool FindPropertyAndCheckIdentical(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type otherObj);
    bool IdenticalPropertiesHelper(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type otherObj);
    void CheckExcessProperties(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type source);
    void AssignProperties(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type source);
    void AssignSignatures(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type source, bool assignCallSignatures);
    void AssignIndexInfo(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type source, bool assignNumberInfo);
};

[Entity=Class] interface ETSDynamicFunctionType {
    static es2panda_Type CreateETSDynamicFunctionType(es2panda_Context context, char name, sequence<es2panda_Signature> signatures, u32 signaturesLen);

    static es2panda_Type CreateETSDynamicFunctionType1(es2panda_Context context, char name, es2panda_Signature signature);

    static es2panda_Type CreateETSDynamicFunctionType2(es2panda_Context context, char name);



};

[Entity=Class] interface TypeReference {
    static es2panda_Type CreateTypeReference(es2panda_Context context, sequence<es2panda_Type> ref);



    es2panda_Type Ref(es2panda_Context context);
    es2panda_Type RefConst(es2panda_Context context);
};

[Entity=Class] interface BooleanType {
    static es2panda_Type CreateBooleanType(es2panda_Context context);



};

[Entity=Class] interface NeverType {
    static es2panda_Type CreateNeverType(es2panda_Context context);



};

[Entity=Class] interface NumberType {
    static es2panda_Type CreateNumberType(es2panda_Context context);



};

[Entity=Class] interface ETSFunctionType {
    static es2panda_Type CreateETSFunctionTypeChecker(es2panda_Context context, char name, sequence<es2panda_Signature> signatures, u32 signaturesLen);

    static es2panda_Type CreateETSFunctionTypeChecker1(es2panda_Context context, char name, es2panda_Signature signature);

    static es2panda_Type CreateETSFunctionTypeChecker2(es2panda_Context context, char name);



    sequence<es2panda_Signature> CheckerCallSignatures(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Signature> CheckerCallSignaturesConst(es2panda_Context context, u32 returnTypeLen);
    char CheckerNameConst(es2panda_Context context);
    es2panda_Type CheckerFunctionalInterfaceConst(es2panda_Context context);
    void CheckerAddCallSignature(es2panda_Context context, es2panda_Signature signature);
    void CheckerSetReferencedSignature(es2panda_Context context, es2panda_Signature refSignature);
    es2panda_Signature CheckerGetReferencedSignatureConst(es2panda_Context context);
    es2panda_Signature CheckerFindSignatureConst(es2panda_Context context, es2panda_AstNode func);
    es2panda_Signature CheckerFindGetterConst(es2panda_Context context);
    es2panda_Signature CheckerFindSetterConst(es2panda_Context context);
    es2panda_Signature CheckerFirstAbstractSignature(es2panda_Context context);
    Es2pandaRelationResult CheckerCastFunctionParams(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Signature targetInvokeSig);
    es2panda_Type CheckerBoxPrimitives(es2panda_Context context);
};

[Entity=Class] interface UnionType {
    static es2panda_Type CreateUnionType(es2panda_Context context, sequence<es2panda_Type> constituentTypes, u32 constituentTypesLen);

    static es2panda_Type CreateUnionType1(es2panda_Context context, sequence<es2panda_Type> constituentTypes, u32 constituentTypesLen);



    sequence<es2panda_Type> ConstituentTypesConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Type> ConstituentTypes(es2panda_Context context, u32 returnTypeLen);
    void AddConstituentType(es2panda_Context context, es2panda_Type type, es2panda_TypeRelation relation);
    void AddConstituentFlag(es2panda_Context context, Es2pandaTypeFlag flag);
    void RemoveConstituentFlag(es2panda_Context context, Es2pandaTypeFlag flag);
    bool HasConstituentFlagConst(es2panda_Context context, Es2pandaTypeFlag flag);
    sequence<char> CachedSyntheticProperties(es2panda_Context context, sequence<sequence<es2panda_Variable>> arenaMapValueArray, u32 returnTypeLen);
    es2panda_Type MergedObjectType(es2panda_Context context);
    void SetMergedObjectType(es2panda_Context context, es2panda_Type type);
    void RemoveDuplicatedTypes(es2panda_Context context, es2panda_TypeRelation relation, sequence<es2panda_Type> constituentTypes, u32 constituentTypesLen);
    es2panda_Type HandleUnionType(es2panda_Context context, es2panda_Type unionType, es2panda_GlobalTypesHolder globalTypesHolder);
    void RemoveRedundantLiteralTypesFromUnion(es2panda_Context context, es2panda_Type type);
};

[Entity=Class] interface ETSArrayType {
    static es2panda_Type CreateETSArrayType(es2panda_Context context, es2panda_Type elementType);



    es2panda_Type ElementType(es2panda_Context context);
    es2panda_Type ElementTypeConst(es2panda_Context context);
};

[Entity=Class] interface Signature {
    static es2panda_Signature CreateSignature(es2panda_Context context, es2panda_SignatureInfo signatureInfo, es2panda_Type returnType);

    static es2panda_Signature CreateSignature1(es2panda_Context context, es2panda_SignatureInfo signatureInfo, es2panda_Type returnType, char internalName);

    static es2panda_Signature CreateSignature2(es2panda_Context context, es2panda_SignatureInfo signatureInfo, es2panda_Type returnType, es2panda_AstNode func);



    es2panda_SignatureInfo GetSignatureInfoConst(es2panda_Context context);
    es2panda_SignatureInfo GetSignatureInfo(es2panda_Context context);
    sequence<es2panda_Type> TypeParamsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Type> TypeParams(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Variable> ParamsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Variable> Params(es2panda_Context context, u32 returnTypeLen);
    es2panda_Type ReturnTypeConst(es2panda_Context context);
    es2panda_Type ReturnType(es2panda_Context context);
    u32 MinArgCountConst(es2panda_Context context);
    u32 OptionalArgCountConst(es2panda_Context context);
    void SetReturnType(es2panda_Context context, es2panda_Type type);
    void SetOwner(es2panda_Context context, es2panda_Type owner);
    void SetOwnerVar(es2panda_Context context, es2panda_Variable owner);
    void SetFunction(es2panda_Context context, es2panda_AstNode function);
    es2panda_AstNode Function(es2panda_Context context);
    es2panda_Type Owner(es2panda_Context context);
    es2panda_Type OwnerConst(es2panda_Context context);
    es2panda_Variable OwnerVar(es2panda_Context context);
    es2panda_AstNode FunctionConst(es2panda_Context context);
    es2panda_Variable RestVarConst(es2panda_Context context);
    u8 ProtectionFlagConst(es2panda_Context context);
    void AddSignatureFlag(es2panda_Context context, Es2pandaSignatureFlags flag);
    void RemoveSignatureFlag(es2panda_Context context, Es2pandaSignatureFlags flag);
    bool HasSignatureFlagConst(es2panda_Context context, Es2pandaSignatureFlags flag);
    Es2pandaSignatureFlags GetFlagsConst(es2panda_Context context);
    bool IsFinalConst(es2panda_Context context);
    char InternalNameConst(es2panda_Context context);
    es2panda_Signature Copy(es2panda_Context context, es2panda_TypeRelation relation, es2panda_GlobalTypesHolder globalTypes);
    es2panda_Signature Substitute(es2panda_Context context, es2panda_TypeRelation relation, sequence<es2panda_Type> substitutionKeyArray, sequence<es2panda_Type> substitutionValueArray, u32 substitutionLen);
    char ToStringConst(es2panda_Context context);
    void Compatible(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Signature other);
    bool CheckFunctionalInterfaces(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type source, es2panda_Type target);
    void AssignmentTarget(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Signature source);
    es2panda_Signature BoxPrimitives(es2panda_Context context);
};

[Entity=Class] interface ETSBigIntType {
    static es2panda_Type CreateETSBigIntType(es2panda_Context context, es2panda_Type super);

    static es2panda_Type CreateETSBigIntType1(es2panda_Context context, es2panda_Type super, es2panda_TypeRelation relation, char value);



    char GetValueConst(es2panda_Context context);
};

[Entity=Class] interface AnyType {
    static es2panda_Type CreateAnyType(es2panda_Context context);



};

[Entity=Class] interface GlobalTypesHolder {
    static es2panda_GlobalTypesHolder CreateGlobalTypesHolder(es2panda_Context context);



    void AddETSEscompatLayer(es2panda_Context context);
    void AddEtsSpecificTypes(es2panda_Context context);
    void AddEtsSpecificBuiltinTypes(es2panda_Context context);
    void AddTSSpecificTypes(es2panda_Context context);
    void AddFunctionTypes(es2panda_Context context);
    es2panda_Type GlobalNumberType(es2panda_Context context);
    es2panda_Type GlobalAnyType(es2panda_Context context);
    es2panda_Type GlobalStringType(es2panda_Context context);
    es2panda_Type GlobalBooleanType(es2panda_Context context);
    es2panda_Type GlobalVoidType(es2panda_Context context);
    es2panda_Type GlobalNullType(es2panda_Context context);
    es2panda_Type GlobalUndefinedType(es2panda_Context context);
    es2panda_Type GlobalUnknownType(es2panda_Context context);
    es2panda_Type GlobalNeverType(es2panda_Context context);
    es2panda_Type GlobalNonPrimitiveType(es2panda_Context context);
    es2panda_Type GlobalBigintType(es2panda_Context context);
    es2panda_Type GlobalFalseType(es2panda_Context context);
    es2panda_Type GlobalTrueType(es2panda_Context context);
    es2panda_Type GlobalNumberOrBigintType(es2panda_Context context);
    es2panda_Type GlobalStringOrNumberType(es2panda_Context context);
    es2panda_Type GlobalZeroType(es2panda_Context context);
    es2panda_Type GlobalEmptyStringType(es2panda_Context context);
    es2panda_Type GlobalZeroBigintType(es2panda_Context context);
    es2panda_Type GlobalPrimitiveType(es2panda_Context context);
    es2panda_Type GlobalEmptyTupleType(es2panda_Context context);
    es2panda_Type GlobalEmptyObjectType(es2panda_Context context);
    es2panda_Type GlobalResolvingReturnType(es2panda_Context context);
    es2panda_Type GlobalErrorType(es2panda_Context context);
    es2panda_Type GlobalByteType(es2panda_Context context);
    es2panda_Type GlobalShortType(es2panda_Context context);
    es2panda_Type GlobalIntType(es2panda_Context context);
    es2panda_Type GlobalLongType(es2panda_Context context);
    es2panda_Type GlobalFloatType(es2panda_Context context);
    es2panda_Type GlobalDoubleType(es2panda_Context context);
    es2panda_Type GlobalCharType(es2panda_Context context);
    es2panda_Type GlobalETSBooleanType(es2panda_Context context);
    es2panda_Type GlobalETSStringLiteralType(es2panda_Context context);
    es2panda_Type GlobalETSVoidType(es2panda_Context context);
    es2panda_Type GlobalETSObjectType(es2panda_Context context);
    es2panda_Type GlobalETSNullType(es2panda_Context context);
    es2panda_Type GlobalETSUndefinedType(es2panda_Context context);
    es2panda_Type GlobalETSNeverType(es2panda_Context context);
    es2panda_Type GlobalETSNullishType(es2panda_Context context);
    es2panda_Type GlobalETSNullishObjectType(es2panda_Context context);
    es2panda_Type GlobalWildcardType(es2panda_Context context);
    es2panda_Type GlobalETSBooleanBuiltinType(es2panda_Context context);
    es2panda_Type GlobalByteBuiltinType(es2panda_Context context);
    es2panda_Type GlobalCharBuiltinType(es2panda_Context context);
    es2panda_Type GlobalComparableBuiltinType(es2panda_Context context);
    es2panda_Type GlobalConsoleBuiltinType(es2panda_Context context);
    es2panda_Type GlobalDoubleBuiltinType(es2panda_Context context);
    es2panda_Type GlobalExceptionBuiltinType(es2panda_Context context);
    es2panda_Type GlobalFloatBuiltinType(es2panda_Context context);
    es2panda_Type GlobalFloatingBuiltinType(es2panda_Context context);
    es2panda_Type GlobalIntegerBuiltinType(es2panda_Context context);
    es2panda_Type GlobalIntegralBuiltinType(es2panda_Context context);
    es2panda_Type GlobalLongBuiltinType(es2panda_Context context);
    es2panda_Type GlobalErrorBuiltinType(es2panda_Context context);
    es2panda_Type GlobalRuntimeBuiltinType(es2panda_Context context);
    es2panda_Type GlobalShortBuiltinType(es2panda_Context context);
    es2panda_Type GlobalStackTraceElementBuiltinType(es2panda_Context context);
    es2panda_Type GlobalStackTraceBuiltinType(es2panda_Context context);
    es2panda_Type GlobalNullPointerExceptionBuiltinType(es2panda_Context context);
    es2panda_Type GlobalArrayIndexOutOfBoundsErrorBuiltinType(es2panda_Context context);
    es2panda_Type GlobalArithmeticErrorBuiltinType(es2panda_Context context);
    es2panda_Type GlobalClassNotFoundExceptionBuiltinType(es2panda_Context context);
    es2panda_Type GlobalClassCastErrorBuiltinTypeConst(es2panda_Context context);
    es2panda_Type GlobalETSStringBuiltinType(es2panda_Context context);
    es2panda_Type GlobalETSBigIntBuiltinType(es2panda_Context context);
    es2panda_Type GlobalETSBigIntLiteralType(es2panda_Context context);
    es2panda_Type GlobalStringBuilderBuiltinType(es2panda_Context context);
    es2panda_Type GlobalTypeBuiltinType(es2panda_Context context);
    es2panda_Type GlobalTypesBuiltinType(es2panda_Context context);
    es2panda_Type GlobalPromiseBuiltinType(es2panda_Context context);
    es2panda_Type GlobalBoxBuiltinType(es2panda_Context context);
    es2panda_Type GlobalBooleanBoxBuiltinType(es2panda_Context context);
    es2panda_Type GlobalByteBoxBuiltinType(es2panda_Context context);
    es2panda_Type GlobalCharBoxBuiltinType(es2panda_Context context);
    es2panda_Type GlobalShortBoxBuiltinType(es2panda_Context context);
    es2panda_Type GlobalIntBoxBuiltinType(es2panda_Context context);
    es2panda_Type GlobalLongBoxBuiltinType(es2panda_Context context);
    es2panda_Type GlobalFloatBoxBuiltinType(es2panda_Context context);
    es2panda_Type GlobalDoubleBoxBuiltinType(es2panda_Context context);
    u32 VariadicFunctionTypeThreshold(es2panda_Context context);
    es2panda_Type GlobalFunctionBuiltinType(es2panda_Context context, u32 nargs, Es2pandaScriptFunctionFlags flags);
    es2panda_Type GlobalArrayBuiltinType(es2panda_Context context);
    es2panda_Type GlobalClassOutOfMemoryErrorBuiltinType(es2panda_Context context);
    es2panda_Type GlobalNoSuchMethodErrorBuiltinType(es2panda_Context context);
    es2panda_Type GlobalAssertionErrorBuiltinType(es2panda_Context context);
    es2panda_Type GlobalDivideByZeroErrorBuiltinType(es2panda_Context context);
    es2panda_Type GlobalNullPointerErrorBuiltinType(es2panda_Context context);
    es2panda_Type GlobalUncaughtExceptionErrorBuiltinType(es2panda_Context context);
    es2panda_Type GlobalMapBuiltinType(es2panda_Context context);
    es2panda_Type GlobalRegExpBuiltinType(es2panda_Context context);
    es2panda_Type GlobalSetBuiltinType(es2panda_Context context);
    es2panda_Type GlobalJSRuntimeBuiltinType(es2panda_Context context);
    es2panda_Type GlobalJSValueBuiltinType(es2panda_Context context);
    es2panda_Type GlobalTypeError(es2panda_Context context);
    void InitializeBuiltin(es2panda_Context context, char name, es2panda_Type type);
};

[Entity=Class] interface LongType {
    static es2panda_Type CreateLongType(es2panda_Context context);

    static es2panda_Type CreateLongType1(es2panda_Context context, i64 value);



    i64 GetValueConst(es2panda_Context context);
};

[Entity=Class] interface BigintLiteralType {
    static es2panda_Type CreateBigintLiteralType(es2panda_Context context, char value, bool negative);



    char ValueConst(es2panda_Context context);
    bool NegativeConst(es2panda_Context context);
};

[Entity=Class] interface ETSAsyncFuncReturnType {
    static es2panda_Type CreateETSAsyncFuncReturnType(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type promiseType);



    es2panda_Type GetPromiseTypeArgConst(es2panda_Context context);
    es2panda_Type GetPromiseTypeArg(es2panda_Context context);
    es2panda_Type PromiseTypeConst(es2panda_Context context);
    es2panda_Type PromiseType(es2panda_Context context);
};

[Entity=Class] interface VoidType {
    static es2panda_Type CreateVoidType(es2panda_Context context);



};

[Entity=Class] interface DoubleType {
    static es2panda_Type CreateDoubleType(es2panda_Context context);

    static es2panda_Type CreateDoubleType1(es2panda_Context context, double value);



    double GetValueConst(es2panda_Context context);
};

[Entity=Class] interface ETSExtensionFuncHelperType {
    static es2panda_Type CreateETSExtensionFuncHelperType(es2panda_Context context, es2panda_Type classMethodType, es2panda_Type extensionFunctionType);



    es2panda_Type ClassMethodType(es2panda_Context context);
    es2panda_Type ExtensionMethodType(es2panda_Context context);
};

[Entity=Class] interface NullType {
    static es2panda_Type CreateNullType(es2panda_Context context);



};

[Entity=Class] interface ETSVoidType {
    static es2panda_Type CreateETSVoidType(es2panda_Context context);



};

[Entity=Class] interface ETSNonNullishType {
    static es2panda_Type CreateETSNonNullishType(es2panda_Context context, es2panda_Type tparam);



    es2panda_Type GetUnderlyingConst(es2panda_Context context);
};

[Entity=Class] interface BigintType {
    static es2panda_Type CreateBigintType(es2panda_Context context);



};

[Entity=Class] interface ETSStringType {
    static es2panda_Type CreateETSStringType(es2panda_Context context, es2panda_Type super);

    static es2panda_Type CreateETSStringType1(es2panda_Context context, es2panda_Type super, es2panda_TypeRelation relation);

    static es2panda_Type CreateETSStringType2(es2panda_Context context, es2panda_Type super, es2panda_TypeRelation relation, char value);



    char GetValueConst(es2panda_Context context);
    bool IsConvertibleToConst(es2panda_Context context, es2panda_Type to);
};

[Entity=Class] interface TypeParameter {
    static es2panda_Type CreateTypeParameter(es2panda_Context context, es2panda_Type constraint, es2panda_Type defaultType);



    es2panda_Type ConstraintTypeConst(es2panda_Context context);
    es2panda_Type DefaultType(es2panda_Context context);
    sequence<es2panda_Type> DefaultTypeRef(es2panda_Context context);
    void SetDefaultType(es2panda_Context context, es2panda_Type type);
};

[Entity=Class] interface IntType {
    static es2panda_Type CreateIntType(es2panda_Context context);

    static es2panda_Type CreateIntType1(es2panda_Context context, i32 value);



    i32 GetValueConst(es2panda_Context context);
};

[Entity=Class] interface NumberLiteralType {
    static es2panda_Type CreateNumberLiteralType(es2panda_Context context, double value);



    double ValueConst(es2panda_Context context);
};

[Entity=Class] interface ETSEnumType {
    static es2panda_Type CreateETSEnumType(es2panda_Context context, es2panda_AstNode enumDecl, i32 ordinal, es2panda_AstNode member, Es2pandaTypeFlag typeFlag);



    es2panda_AstNode GetDeclConst(es2panda_Context context);
    es2panda_Type BoxedTypeConst(es2panda_Context context);
    sequence<es2panda_AstNode> GetMembersConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_Variable GetMemberVarConst(es2panda_Context context);
    char GetNameConst(es2panda_Context context);
    i32 GetOrdinalConst(es2panda_Context context);
    es2panda_Type LookupConstantConst(es2panda_Context context, es2panda_AstNode expression, es2panda_AstNode prop);
    es2panda_Type LookupMethodConst(es2panda_Context context, es2panda_AstNode expression, es2panda_AstNode prop);
    bool IsLiteralTypeConst(es2panda_Context context);
    bool IsSameEnumTypeConst(es2panda_Context context, es2panda_Type other);
    bool IsSameEnumLiteralTypeConst(es2panda_Context context, es2panda_Type other);
    bool IsEnumInstanceExpressionConst(es2panda_Context context, es2panda_AstNode expression);
    bool IsEnumLiteralExpressionConst(es2panda_Context context, es2panda_AstNode expression);
    bool IsEnumTypeExpressionConst(es2panda_Context context, es2panda_AstNode expression);
    es2panda_Signature ToStringMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
    void SetToStringMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
    es2panda_Signature ValueOfMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
    void SetValueOfMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
    es2panda_Signature GetNameMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
    void SetGetNameMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
    es2panda_Signature GetValueOfMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
    void SetGetValueOfMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
    es2panda_Signature ValuesMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
    void SetValuesMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
    es2panda_Signature FromIntMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
    void SetFromIntMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
    es2panda_Signature BoxedFromIntMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
    void SetBoxedFromIntMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
    es2panda_Signature UnboxMethodConst(es2panda_Context context, sequence<es2panda_Type> returnTypeMemberProxyType);
    void SetUnboxMethod(es2panda_Context context, es2panda_Signature globalSignature, es2panda_Type memberProxyType);
};

[Entity=Class] interface ETSIntEnumType {
    static es2panda_Type CreateETSIntEnumType(es2panda_Context context, es2panda_AstNode enumDecl, i32 ordinal, es2panda_AstNode member);



};

[Entity=Class] interface ETSStringEnumType {
    static es2panda_Type CreateETSStringEnumType(es2panda_Context context, es2panda_AstNode enumDecl, i32 ordinal, es2panda_AstNode member);



};

[Entity=Class] interface ETSDynamicType {


    es2panda_Variable GetPropertyDynamicConst(es2panda_Context context, char name);
    bool HasDeclConst(es2panda_Context context);
    bool IsConvertible(es2panda_Context context, es2panda_Type target);
};

[Entity=Class] interface CharType {
    static es2panda_Type CreateCharType(es2panda_Context context);

    static es2panda_Type CreateCharType1(es2panda_Context context, i16 value);



    i16 GetValueConst(es2panda_Context context);
};

[Entity=Class] interface UndefinedType {
    static es2panda_Type CreateUndefinedType(es2panda_Context context);



};

[Entity=Class] interface StringType {
    static es2panda_Type CreateStringType(es2panda_Context context);



};

[Entity=Class] interface NonPrimitiveType {
    static es2panda_Type CreateNonPrimitiveType(es2panda_Context context);



};

[Entity=Class] interface ETSNullType {
    static es2panda_Type CreateETSNullTypeChecker(es2panda_Context context);



};

[Entity=Class] interface ETSUndefinedType {
    static es2panda_Type CreateETSUndefinedTypeChecker(es2panda_Context context);



};

[Entity=Class] interface Type {


    bool IsETSStringTypeConst(es2panda_Context context);
    bool IsETSBigIntTypeConst(es2panda_Context context);
    bool IsETSArrowTypeConst(es2panda_Context context);
    bool IsETSPrimitiveTypeConst(es2panda_Context context);
    bool IsETSReferenceTypeConst(es2panda_Context context);
    bool IsETSAsyncFuncReturnTypeConst(es2panda_Context context);
    bool IsETSUnboxableObjectConst(es2panda_Context context);
    bool PossiblyETSNullConst(es2panda_Context context);
    bool PossiblyETSUndefinedConst(es2panda_Context context);
    bool PossiblyETSNullishConst(es2panda_Context context);
    bool DefinitelyETSNullishConst(es2panda_Context context);
    bool DefinitelyNotETSNullishConst(es2panda_Context context);
    bool PossiblyETSStringConst(es2panda_Context context);
    bool PossiblyETSValueTypedConst(es2panda_Context context);
    bool PossiblyETSValueTypedExceptNullishConst(es2panda_Context context);
    es2panda_Type AsETSStringType(es2panda_Context context);
    es2panda_Type AsETSStringTypeConst(es2panda_Context context);
    es2panda_Type AsETSBigIntTypeConst(es2panda_Context context);
    bool IsETSDynamicTypeConst(es2panda_Context context);
    es2panda_Type AsETSDynamicType(es2panda_Context context);
    es2panda_Type AsETSDynamicTypeConst(es2panda_Context context);
    es2panda_Type AsETSAsyncFuncReturnType(es2panda_Context context);
    es2panda_Type AsETSAsyncFuncReturnTypeConst(es2panda_Context context);
    bool IsETSDynamicFunctionTypeConst(es2panda_Context context);
    es2panda_Type AsETSDynamicFunctionType(es2panda_Context context);
    es2panda_Type AsETSDynamicFunctionTypeConst(es2panda_Context context);
    bool IsConditionalExprTypeConst(es2panda_Context context);
    bool IsConstantTypeConst(es2panda_Context context);
    Es2pandaTypeFlag TypeFlagsConst(es2panda_Context context);
    bool HasTypeFlagConst(es2panda_Context context, Es2pandaTypeFlag typeFlag);
    void AddTypeFlag(es2panda_Context context, Es2pandaTypeFlag typeFlag);
    void RemoveTypeFlag(es2panda_Context context, Es2pandaTypeFlag typeFlag);
    u64 IdConst(es2panda_Context context);
    void SetVariable(es2panda_Context context, es2panda_Variable variable);
    es2panda_Variable Variable(es2panda_Context context);
    es2panda_Variable VariableConst(es2panda_Context context);
    char ToAssemblerTypeViewConst(es2panda_Context context);
    bool IsLambdaObjectConst(es2panda_Context context);
    char ToStringConst(es2panda_Context context);
    char ToStringPreciseConst(es2panda_Context context);
    char ToStringAsSrcConst(es2panda_Context context);
    Es2pandaTypeFacts GetTypeFactsConst(es2panda_Context context);
    u32 RankConst(es2panda_Context context);
    void Identical(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type other);
    void AssignmentTarget(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type source);
    bool AssignmentSource(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type target);
    void Compare(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type other);
    void Cast(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type target);
    void CastTarget(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type source);
    void IsSupertypeOf(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type source);
    void IsSubtypeOf(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type target);
    es2panda_Type AsSuper(es2panda_Context context, es2panda_Variable sourceVar);
    u32 GetPrecedence(es2panda_Context context, es2panda_Type type);
    es2panda_Type Instantiate(es2panda_Context context, es2panda_TypeRelation relation, es2panda_GlobalTypesHolder globalTypes);
    es2panda_Type Clone(es2panda_Context context);
    es2panda_Type Substitute(es2panda_Context context, es2panda_TypeRelation relation, sequence<es2panda_Type> substitutionKeyArray, sequence<es2panda_Type> substitutionValueArray, u32 substitutionLen);
};

[Entity=Class] interface ETSTupleType {
    static es2panda_Type CreateETSTupleType(es2panda_Context context, es2panda_Type elementType, es2panda_Type spreadType);

    static es2panda_Type CreateETSTupleType1(es2panda_Context context, i32 size, es2panda_Type elementType, es2panda_Type spreadType);

    static es2panda_Type CreateETSTupleType2(es2panda_Context context, sequence<es2panda_Type> typeList, u32 typeListLen, es2panda_Type elementType, es2panda_Type spreadType);



    i32 GetTupleSizeConst(es2panda_Context context);
    i32 GetMinTupleSizeConst(es2panda_Context context);
    sequence<es2panda_Type> GetTupleTypesListConst(es2panda_Context context, u32 returnTypeLen);
    bool HasSpreadTypeConst(es2panda_Context context);
    es2panda_Type GetSpreadTypeConst(es2panda_Context context);
    void SetSpreadType(es2panda_Context context, es2panda_Type newSpreadType);
    es2panda_Type GetTypeAtIndexConst(es2panda_Context context, i32 index);
};

[Entity=Class] interface TypeRelation {
    static es2panda_TypeRelation CreateTypeRelation(es2panda_Context context);



    bool IsTrueConst(es2panda_Context context);
    bool IsErrorConst(es2panda_Context context);
    bool ApplyNarrowingConst(es2panda_Context context);
    bool ApplyWideningConst(es2panda_Context context);
    bool ApplyBoxingConst(es2panda_Context context);
    bool ApplyUnboxingConst(es2panda_Context context);
    bool ApplyStringToCharConst(es2panda_Context context);
    bool NoReturnTypeCheckConst(es2panda_Context context);
    bool DirectReturnConst(es2panda_Context context);
    bool InAssignmentContextConst(es2panda_Context context);
    bool OnlyCheckWideningConst(es2panda_Context context);
    bool OnlyCheckBoxingUnboxingConst(es2panda_Context context);
    bool IgnoreTypeParametersConst(es2panda_Context context);
    bool InCastingContextConst(es2panda_Context context);
    bool UncheckedCastConst(es2panda_Context context);
    bool NoThrowConst(es2panda_Context context);
    bool NoThrowGenericTypeAliasConst(es2panda_Context context);
    bool IsOverridingCheckConst(es2panda_Context context);
    bool IsBridgeCheckConst(es2panda_Context context);
    Es2pandaTypeRelationFlag GetTypeRelationFlagsConst(es2panda_Context context);
    es2panda_AstNode GetNodeConst(es2panda_Context context);
    void IncreaseTypeRecursionCount(es2panda_Context context, es2panda_Type type);
    bool IsAtTypeDepthLimit(es2panda_Context context, es2panda_Type type);
    void DecreaseTypeRecursionCount(es2panda_Context context, es2panda_Type type);
    bool IsIdenticalTo(es2panda_Context context, es2panda_Type source, es2panda_Type target);
    bool IsIdenticalTo1(es2panda_Context context, es2panda_Type source, es2panda_Type target);
    bool IsIdenticalTo2(es2panda_Context context, es2panda_IndexInfo source, es2panda_IndexInfo target);
    bool IsCompatibleTo(es2panda_Context context, es2panda_Signature source, es2panda_Signature target);
    bool IsAssignableTo(es2panda_Context context, es2panda_Type source, es2panda_Type target);
    bool IsComparableTo(es2panda_Context context, es2panda_Type source, es2panda_Type target);
    bool IsCastableTo(es2panda_Context context, es2panda_Type source, es2panda_Type target);
    bool IsSupertypeOf(es2panda_Context context, es2panda_Type super, es2panda_Type sub);
    bool IsSupertypeOf1(es2panda_Context context, es2panda_Type super, es2panda_Type sub);
    void RaiseErrorConst(es2panda_Context context, char errMsg, es2panda_SourcePosition loc);
    void SetNode(es2panda_Context context, es2panda_AstNode node);
    void SetFlags(es2panda_Context context, Es2pandaTypeRelationFlag flags);
    void RemoveFlags(es2panda_Context context, Es2pandaTypeRelationFlag flags);
};

[Entity=Class] interface EnumLiteralType {
    static es2panda_Type CreateEnumLiteralType(es2panda_Context context, char name, es2panda_Scope scope, Es2pandaEnumLiteralTypeKind kind);



    es2panda_Scope Scope(es2panda_Context context);
    es2panda_Scope ScopeConst(es2panda_Context context);
    Es2pandaEnumLiteralTypeKind KindConst(es2panda_Context context);
};

[Entity=Class] interface FloatType {
    static es2panda_Type CreateFloatType(es2panda_Context context);

    static es2panda_Type CreateFloatType1(es2panda_Context context, float value);



    float GetValueConst(es2panda_Context context);
};

[Entity=Class] interface ByteType {
    static es2panda_Type CreateByteType(es2panda_Context context);

    static es2panda_Type CreateByteType1(es2panda_Context context, i8 value);



    i8 GetValueConst(es2panda_Context context);
};

[Entity=Class] interface ETSTypeParameter {
    static es2panda_Type CreateETSTypeParameter(es2panda_Context context);

    static es2panda_Type CreateETSTypeParameter1(es2panda_Context context, es2panda_Type defaultType, es2panda_Type constraintType);



    void SetDeclNode(es2panda_Context context, es2panda_AstNode decl);
    es2panda_AstNode GetDeclNodeConst(es2panda_Context context);
    es2panda_Type GetOriginalConst(es2panda_Context context);
    char NameConst(es2panda_Context context);
    void SetDefaultType(es2panda_Context context, es2panda_Type type);
    es2panda_Type GetDefaultTypeConst(es2panda_Context context);
    void SetConstraintType(es2panda_Context context, es2panda_Type type);
    es2panda_Type GetConstraintTypeConst(es2panda_Context context);
};

[Entity=Class] interface ETSUnionType {
    static es2panda_Type CreateETSUnionTypeChecker(es2panda_Context context, sequence<es2panda_Type> constituentTypes, u32 constituentTypesLen);



    sequence<es2panda_Type> CheckerConstituentTypesConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_Type CheckerFindTypeIsCastableToThisConst(es2panda_Context context, es2panda_AstNode node, es2panda_TypeRelation relation, es2panda_Type source);
    es2panda_Type CheckerFindTypeIsCastableToSomeTypeConst(es2panda_Context context, es2panda_AstNode node, es2panda_TypeRelation relation, es2panda_Type target);
    es2panda_Type CheckerFindUnboxableTypeConst(es2panda_Context context);
    bool CheckerHasObjectTypeConst(es2panda_Context context, Es2pandaETSObjectFlags flag);
    bool CheckerHasUndefinedTypeConst(es2panda_Context context);
    bool CheckerHasTypeConst(es2panda_Context context, es2panda_Type type);
    bool CheckerHasNullishTypeConst(es2panda_Context context);
    bool CheckerIsOverlapWith(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type type);
    es2panda_Type CheckerFindExactOrBoxedTypeConst(es2panda_Context context, es2panda_Type type);
    void CheckerNormalizeTypes(es2panda_Context context, es2panda_TypeRelation relation, sequence<es2panda_Type> types, u32 typesLen);
    sequence<es2panda_Type> CheckerGetNonConstantTypes(es2panda_Context context, sequence<es2panda_Type> types, u32 typesLen, u32 returnTypeLen);
    es2panda_Type CheckerGetAssemblerLUBConst(es2panda_Context context);
    es2panda_Type CheckerGetAssignableTypeConst(es2panda_Context context, es2panda_Type sourceType);
    es2panda_Type CheckerGetComplimentaryType(es2panda_Context context, es2panda_Type sourceType, sequence<es2panda_Type> returnTypeSecond);
};

[Entity=Class] interface EnumType {
    static es2panda_Type CreateEnumType(es2panda_Context context, es2panda_Variable enumLiteralVar, es2panda_Variable enumVar);



    es2panda_Variable EnumLiteralVarConst(es2panda_Context context);
    es2panda_Variable EnumVarConst(es2panda_Context context);
};

[Entity=Class] interface WildcardType {
    static es2panda_Type CreateWildcardType(es2panda_Context context);



};

[Entity=Class] interface ETSBooleanType {
    static es2panda_Type CreateETSBooleanType(es2panda_Context context);

    static es2panda_Type CreateETSBooleanType1(es2panda_Context context, bool value);



    bool GetValueConst(es2panda_Context context);
};

[Entity=Class] interface BooleanLiteralType {
    static es2panda_Type CreateBooleanLiteralType(es2panda_Context context, bool value);



    bool ValueConst(es2panda_Context context);
};

[Entity=Class] interface ETSObjectType {
    static es2panda_Type CreateETSObjectType(es2panda_Context context, char name, char internalName, es2panda_AstNode declNode, Es2pandaETSObjectFlags flags);



    void AddConstructSignature(es2panda_Context context, es2panda_Signature signature);
    void AddConstructSignatureConst(es2panda_Context context, sequence<es2panda_Signature> signatures, u32 signaturesLen);
    void AddInterface(es2panda_Context context, es2panda_Type interface);
    void SetSuperType(es2panda_Context context, es2panda_Type super);
    void SetTypeArguments(es2panda_Context context, sequence<es2panda_Type> typeArgs, u32 typeArgsLen);
    void SetEnclosingType(es2panda_Context context, es2panda_Type enclosingType);
    void SetRelation(es2panda_Context context, es2panda_TypeRelation relation);
    es2panda_TypeRelation GetRelationConst(es2panda_Context context);
    sequence<char> InstanceMethodsConst(es2panda_Context context, sequence<sequence<es2panda_Variable>> arenaMapValueArray, u32 returnTypeLen);
    sequence<char> InstanceFieldsConst(es2panda_Context context, sequence<sequence<es2panda_Variable>> arenaMapValueArray, u32 returnTypeLen);
    sequence<char> InstanceDeclsConst(es2panda_Context context, sequence<sequence<es2panda_Variable>> arenaMapValueArray, u32 returnTypeLen);
    sequence<char> StaticMethodsConst(es2panda_Context context, sequence<sequence<es2panda_Variable>> arenaMapValueArray, u32 returnTypeLen);
    sequence<char> StaticFieldsConst(es2panda_Context context, sequence<sequence<es2panda_Variable>> arenaMapValueArray, u32 returnTypeLen);
    sequence<char> StaticDeclsConst(es2panda_Context context, sequence<sequence<es2panda_Variable>> arenaMapValueArray, u32 returnTypeLen);
    sequence<es2panda_Type> TypeArgumentsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Signature> ConstructSignaturesConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Signature> ConstructSignatures(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Type> InterfacesConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Type> Interfaces(es2panda_Context context, u32 returnTypeLen);
    es2panda_AstNode GetDeclNodeConst(es2panda_Context context);
    es2panda_Type SuperTypeConst(es2panda_Context context);
    es2panda_Type SuperType(es2panda_Context context);
    es2panda_Type EnclosingTypeConst(es2panda_Context context);
    es2panda_Type EnclosingType(es2panda_Context context);
    es2panda_Type OutermostClass(es2panda_Context context);
    void SetBaseType(es2panda_Context context, es2panda_Type baseType);
    es2panda_Type GetBaseType(es2panda_Context context);
    es2panda_Type GetBaseTypeConst(es2panda_Context context);
    es2panda_Type GetOriginalBaseTypeConst(es2panda_Context context);
    bool IsGlobalETSObjectTypeConst(es2panda_Context context);
    bool IsPropertyInherited(es2panda_Context context, es2panda_Variable var);
    bool IsPropertyOfAscendantConst(es2panda_Context context, es2panda_Variable var);
    bool IsSignatureInherited(es2panda_Context context, es2panda_Signature signature);
    bool IsDescendantOfConst(es2panda_Context context, es2panda_Type ascendant);
    char NameConst(es2panda_Context context);
    char AssemblerNameConst(es2panda_Context context);
    Es2pandaETSObjectFlags ObjectFlagsConst(es2panda_Context context);
    void AddObjectFlag(es2panda_Context context, Es2pandaETSObjectFlags flag);
    void RemoveObjectFlag(es2panda_Context context, Es2pandaETSObjectFlags flag);
    bool HasObjectFlagConst(es2panda_Context context, Es2pandaETSObjectFlags flag);
    es2panda_Type GetFunctionalInterfaceInvokeTypeConst(es2panda_Context context);
    Es2pandaETSObjectFlags BuiltInKindConst(es2panda_Context context);
    Es2pandaETSObjectFlags UnboxableKindConst(es2panda_Context context);
    es2panda_Type GetUnboxedEnumTypeConst(es2panda_Context context);
    es2panda_Type GetInstantiatedType(es2panda_Context context, char hash);
    es2panda_Scope GetTypeArgumentScopeConst(es2panda_Context context);
    sequence<char> GetInstantiationMap(es2panda_Context context, sequence<sequence<es2panda_Type>> arenaMapValueArray, u32 returnTypeLen);
    bool IsGenericConst(es2panda_Context context);
    bool IsPartialConst(es2panda_Context context);
    sequence<es2panda_Variable> ForeignPropertiesConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_Variable GetPropertyConst(es2panda_Context context, char name, Es2pandaPropertySearchFlags flags);
    sequence<es2panda_Variable> GetAllPropertiesConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_Variable CopyProperty(es2panda_Context context, es2panda_Variable prop, es2panda_TypeRelation relation, es2panda_GlobalTypesHolder globalTypes);
    sequence<es2panda_Variable> MethodsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Variable> FieldsConst(es2panda_Context context, u32 returnTypeLen);
    es2panda_Variable CreateSyntheticVarFromEverySignatureConst(es2panda_Context context, char name, Es2pandaPropertySearchFlags flags);
    es2panda_Variable CollectSignaturesForSyntheticTypeConst(es2panda_Context context, es2panda_Type funcType, char name, Es2pandaPropertySearchFlags flags);
    bool CheckIdenticalFlagsConst(es2panda_Context context, es2panda_Type other);
    void IterateConst(es2panda_Context context, PropertyTraverser cb);
    void UpdateTypeProperties(es2panda_Context context, PropertyProcessor func);
    es2panda_Type Substitute(es2panda_Context context, es2panda_TypeRelation relation, sequence<es2panda_Type> substitutionKeyArray, sequence<es2panda_Type> substitutionValueArray, u32 substitutionLen, bool cache);
    es2panda_Type SubstituteArguments(es2panda_Context context, es2panda_TypeRelation relation, sequence<es2panda_Type> arguments, u32 argumentsLen);
    bool CastNumericObject(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type target);
    bool DefaultObjectTypeChecks(es2panda_Context context, es2panda_TypeRelation relation, es2panda_Type source);
    char NameToDescriptor(es2panda_Context context, char name);
    void AddReExports(es2panda_Context context, es2panda_Type reExport);
    void AddReExportAlias(es2panda_Context context, char value, char key);
    char GetReExportAliasValueConst(es2panda_Context context, char key);
    bool IsReExportHaveAliasValueConst(es2panda_Context context, char key);
    sequence<es2panda_Type> ReExportsConst(es2panda_Context context, u32 returnTypeLen);
    u32 GetPrecedence(es2panda_Context context, es2panda_Type type);
    bool IsPropertiesInstantiatedConst(es2panda_Context context);
};

[Entity=Class] interface ArrayType {
    static es2panda_Type CreateArrayType(es2panda_Context context, es2panda_Type elementType);



    es2panda_Type ElementType(es2panda_Context context);
    es2panda_Type ElementTypeConst(es2panda_Context context);
};

[Entity=Class] interface ShortType {
    static es2panda_Type CreateShortType(es2panda_Context context);

    static es2panda_Type CreateShortType1(es2panda_Context context, i16 value);



    i16 GetValueConst(es2panda_Context context);
};

[Entity=Class] interface Checker {


};

[Entity=Class] interface ETSChecker {


};

[Entity=Class] interface CheckerContext {
    static es2panda_CheckerContext CreateCheckerContext(es2panda_Context context, Es2pandaCheckerStatus newStatus);

    static es2panda_CheckerContext CreateCheckerContext1(es2panda_Context context, Es2pandaCheckerStatus newStatus, es2panda_Type containingClass);

    static es2panda_CheckerContext CreateCheckerContext2(es2panda_Context context, Es2pandaCheckerStatus newStatus, es2panda_Type containingClass, es2panda_Signature containingSignature);



    sequence<es2panda_Variable> CapturedVarsConst(es2panda_Context context, sequence<sequence<es2panda_SourcePosition>> arenaMapValueArray, u32 returnTypeLen);
    sequence<es2panda_Variable> CapturedVars(es2panda_Context context, sequence<sequence<es2panda_SourcePosition>> arenaMapValueArray, u32 returnTypeLen);
    Es2pandaCheckerStatus StatusConst(es2panda_Context context);
    es2panda_Type ContainingClassConst(es2panda_Context context);
    es2panda_Signature ContainingSignatureConst(es2panda_Context context);
    Es2pandaCheckerStatus Status(es2panda_Context context);
    void SetContainingSignature(es2panda_Context context, es2panda_Signature containingSignature);
    void SetContainingClass(es2panda_Context context, es2panda_Type containingClass);
    void AddCapturedVar(es2panda_Context context, es2panda_Variable var, es2panda_SourcePosition pos);
    es2panda_AstNode ContainingLambdaConst(es2panda_Context context);
    void SetContainingLambda(es2panda_Context context, es2panda_AstNode containingLambda);
    void ClearSmartCasts(es2panda_Context context);
    void RemoveSmartCast(es2panda_Context context, es2panda_Variable variable);
    void SetSmartCast(es2panda_Context context, es2panda_Variable variable, es2panda_Type smartType);
    es2panda_Type GetSmartCastConst(es2panda_Context context, es2panda_Variable variable);
    bool IsInTestExpressionConst(es2panda_Context context);
    bool IsInLoopConst(es2panda_Context context);
    void EnterPath(es2panda_Context context);
    bool ExitPath(es2panda_Context context);
    void CheckTestSmartCastCondition(es2panda_Context context, Es2pandaTokenType operatorType);
    void CheckIdentifierSmartCastCondition(es2panda_Context context, es2panda_AstNode identifier);
    void CheckUnarySmartCastCondition(es2panda_Context context, es2panda_AstNode unaryExpression);
    void CheckBinarySmartCastCondition(es2panda_Context context, es2panda_AstNode binaryExpression);
    void OnBreakStatement(es2panda_Context context, es2panda_AstNode breakStatement);
    void CombineBreakSmartCasts(es2panda_Context context, es2panda_AstNode targetStatement);
};

[Entity=Class] interface ResolveResult {
    static es2panda_ResolveResult CreateResolveResult(es2panda_Context context, es2panda_Variable v, Es2pandaResolvedKind kind);



    es2panda_Variable Variable(es2panda_Context context);
    Es2pandaResolvedKind Kind(es2panda_Context context);
};


[Entity=Class] interface Variable {


    es2panda_Declaration DeclarationConst(es2panda_Context context);
    es2panda_Declaration Declaration(es2panda_Context context);
    Es2pandaVariableFlags FlagsConst(es2panda_Context context);
    es2panda_Type TsTypeConst(es2panda_Context context);
    es2panda_Scope GetScopeConst(es2panda_Context context);
    void SetTsType(es2panda_Context context, es2panda_Type tsType);
    void SetScope(es2panda_Context context, es2panda_Scope scope);
    void AddFlag(es2panda_Context context, Es2pandaVariableFlags flag);
    bool HasFlagConst(es2panda_Context context, Es2pandaVariableFlags flag);
    void RemoveFlag(es2panda_Context context, Es2pandaVariableFlags flag);
    void Reset(es2panda_Context context, es2panda_Declaration decl, Es2pandaVariableFlags flags);
    bool LexicalBoundConst(es2panda_Context context);
    char NameConst(es2panda_Context context);
    void SetLexical(es2panda_Context context, es2panda_Scope scope);
};

[Entity=Class] interface LocalVariable {
    static es2panda_Variable CreateLocalVariable(es2panda_Context context, es2panda_Declaration decl, Es2pandaVariableFlags flags);

    static es2panda_Variable CreateLocalVariable1(es2panda_Context context, Es2pandaVariableFlags flags);



    void BindVReg(es2panda_Context context, es2panda_VReg vreg);
    void BindLexEnvSlot(es2panda_Context context, u32 slot);
    es2panda_VReg VregConst(es2panda_Context context);
    es2panda_VReg Vreg(es2panda_Context context);
    u32 LexIdxConst(es2panda_Context context);
    es2panda_Variable CopyConst(es2panda_Context context, es2panda_Declaration decl);
};

[Entity=Class] interface GlobalVariable {
    static es2panda_Variable CreateGlobalVariable(es2panda_Context context, es2panda_Declaration decl, Es2pandaVariableFlags flags);



};

[Entity=Class] interface ModuleVariable {
    static es2panda_Variable CreateModuleVariable(es2panda_Context context, es2panda_Declaration decl, Es2pandaVariableFlags flags);



    es2panda_VReg ModuleReg(es2panda_Context context);
    es2panda_VReg ModuleRegConst(es2panda_Context context);
    char ExoticNameConst(es2panda_Context context);
    char ExoticName(es2panda_Context context);
};

[Entity=Class] interface EnumVariable {
    static es2panda_Variable CreateEnumVariable(es2panda_Context context, es2panda_Declaration decl, bool backReference);



    void SetValue(es2panda_Context context, es2panda_variantDoubleCharArrayBool value);
    es2panda_variantDoubleCharArrayBool ValueConst(es2panda_Context context);
    bool BackReferenceConst(es2panda_Context context);
    void SetBackReference(es2panda_Context context);
    void ResetDecl(es2panda_Context context, es2panda_Declaration decl);
};

[Entity=Class] interface Scope {


    Es2pandaScopeType TypeConst(es2panda_Context context);
    bool IsVariableScopeConst(es2panda_Context context);
    bool IsFunctionVariableScopeConst(es2panda_Context context);
    es2panda_Scope AsFunctionVariableScope(es2panda_Context context);
    es2panda_Scope AsFunctionVariableScopeConst(es2panda_Context context);
    es2panda_Scope AsVariableScope(es2panda_Context context);
    es2panda_Scope AsVariableScopeConst(es2panda_Context context);
    es2panda_Scope EnclosingVariableScope(es2panda_Context context);
    es2panda_Scope EnclosingVariableScopeConst(es2panda_Context context);
    es2panda_Scope EnclosingClassScope(es2panda_Context context);
    es2panda_Scope EnclosingClassScopeConst(es2panda_Context context);
    void AddFlag(es2panda_Context context, Es2pandaScopeFlags flag);
    void ClearFlag(es2panda_Context context, Es2pandaScopeFlags flag);
    bool HasFlagConst(es2panda_Context context, Es2pandaScopeFlags flag);
    sequence<es2panda_Declaration> Decls(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Declaration> DeclsConst(es2panda_Context context, u32 returnTypeLen);
    void SetParent(es2panda_Context context, es2panda_Scope parent);
    es2panda_Scope Parent(es2panda_Context context);
    es2panda_Scope ParentConst(es2panda_Context context);
    es2panda_IRNode ScopeStartConst(es2panda_Context context);
    es2panda_IRNode ScopeEndConst(es2panda_Context context);
    void SetScopeStart(es2panda_Context context, es2panda_IRNode ins);
    void SetScopeEnd(es2panda_Context context, es2panda_IRNode ins);
    es2panda_AstNode Node(es2panda_Context context);
    es2panda_AstNode NodeConst(es2panda_Context context);
    void BindNode(es2panda_Context context, es2panda_AstNode node);
    es2panda_Variable AddDecl(es2panda_Context context, es2panda_Declaration decl);
    es2panda_Variable AddTsDecl(es2panda_Context context, es2panda_Declaration decl);
    void MergeBindings(es2panda_Context context, sequence<char> bindingsKeyArray, sequence<es2panda_Variable> bindingsValueArray, u32 bindingsLen);
    u32 EraseBinding(es2panda_Context context, char name);
    sequence<char> BindingsConst(es2panda_Context context, sequence<sequence<es2panda_Variable>> arenaMapValueArray, u32 returnTypeLen);
    sequence<char> OrderedBindingsConst(es2panda_Context context, sequence<sequence<es2panda_Variable>> arenaMapValueArray, u32 returnTypeLen);
    es2panda_Variable AddBinding(es2panda_Context context, es2panda_Variable currentVariable, es2panda_Declaration newDecl);
    es2panda_Variable FindLocalConst(es2panda_Context context, char name, Es2pandaResolveBindingOptions options);
    bool IsSuperscopeOfConst(es2panda_Context context, es2panda_Scope subscope);
    es2panda_ScopeFindResult FindConst(es2panda_Context context, char name, Es2pandaResolveBindingOptions options);
    es2panda_ScopeFindResult Find(es2panda_Context context, char name, Es2pandaResolveBindingOptions options);
    es2panda_ScopeFindResult FindInGlobalConst(es2panda_Context context, char name, Es2pandaResolveBindingOptions options);
    es2panda_ScopeFindResult FindInFunctionScopeConst(es2panda_Context context, char name, Es2pandaResolveBindingOptions options);
    es2panda_Declaration FindDeclConst(es2panda_Context context, char name);
};

[Entity=Class] interface VariableScope {


    u32 NextSlot(es2panda_Context context);
    u32 LexicalSlotsConst(es2panda_Context context);
    bool NeedLexEnvConst(es2panda_Context context);
    u32 EvalBindingsConst(es2panda_Context context);
    void CheckDirectEval(es2panda_Context context);
};

[Entity=Class] interface ParamScope {


    sequence<es2panda_Variable> Params(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Variable> ParamsConst(es2panda_Context context, u32 returnTypeLen);
};

[Entity=Class] interface FunctionParamScope {
    static es2panda_Scope CreateFunctionParamScope(es2panda_Context context, es2panda_Scope parent);



    es2panda_Scope GetFunctionScopeConst(es2panda_Context context);
    void BindFunctionScope(es2panda_Context context, es2panda_Scope funcScope);
    es2panda_Variable NameVarConst(es2panda_Context context);
    void BindName(es2panda_Context context, char name);
};

[Entity=Class] interface LocalScope {
    static es2panda_Scope CreateLocalScope(es2panda_Context context, es2panda_Scope parent);

    static es2panda_Scope CreateLocalScope1(es2panda_Context context, es2panda_Scope parent, Es2pandaScopeFlags flags);



};

[Entity=Class] interface LocalScopeWithTypeAlias {
    static es2panda_Scope CreateLocalScopeWithTypeAlias(es2panda_Context context, es2panda_Scope parent);

    static es2panda_Scope CreateLocalScopeWithTypeAlias1(es2panda_Context context, es2panda_Scope parent, Es2pandaScopeFlags flags);



    es2panda_Scope TypeAliasScopeConst(es2panda_Context context);
    es2panda_Scope TypeAliasScope(es2panda_Context context);
};

[Entity=Class] interface FunctionScope {
    static es2panda_Scope CreateFunctionScope(es2panda_Context context, es2panda_Scope parent);



    void BindName(es2panda_Context context, char name);
    void BindInternalName(es2panda_Context context, char internalName);
    char NameConst(es2panda_Context context);
    char InternalNameConst(es2panda_Context context);
    es2panda_Scope TypeAliasScopeConst(es2panda_Context context);
    es2panda_Variable InsertBindingIfAbsentInScope(es2panda_Context context, es2panda_Variable currentVariable, es2panda_Declaration newDecl, Es2pandaVariableFlags flag);
};

[Entity=Class] interface ClassScope {
    static es2panda_Scope CreateClassScope(es2panda_Context context, es2panda_Scope parent);



    es2panda_Scope StaticDeclScope(es2panda_Context context);
    es2panda_Scope StaticDeclScopeConst(es2panda_Context context);
    es2panda_Scope StaticFieldScope(es2panda_Context context);
    es2panda_Scope StaticFieldScopeConst(es2panda_Context context);
    es2panda_Scope StaticMethodScope(es2panda_Context context);
    es2panda_Scope StaticMethodScopeConst(es2panda_Context context);
    es2panda_Scope InstanceFieldScope(es2panda_Context context);
    es2panda_Scope InstanceFieldScopeConst(es2panda_Context context);
    es2panda_Scope InstanceMethodScope(es2panda_Context context);
    es2panda_Scope InstanceMethodScopeConst(es2panda_Context context);
    es2panda_Scope InstanceDeclScope(es2panda_Context context);
    es2panda_Scope InstanceDeclScopeConst(es2panda_Context context);
    u32 GetAndIncrementAnonymousClassIdxConst(es2panda_Context context);
    void SetBindingProps(es2panda_Context context, es2panda_Declaration newDecl, es2panda_BindingProps props, bool isStatic);
};

[Entity=Class] interface AnnotationScope {
    static es2panda_Scope CreateAnnotationScope(es2panda_Context context, es2panda_Scope parent);



};

[Entity=Class] interface AnnotationParamScope {
    static es2panda_Scope CreateAnnotationParamScope(es2panda_Context context, es2panda_Scope parent);



};

[Entity=Class] interface CatchParamScope {
    static es2panda_Scope CreateCatchParamScope(es2panda_Context context, es2panda_Scope parent);



};

[Entity=Class] interface CatchScope {
    static es2panda_Scope CreateCatchScope(es2panda_Context context, es2panda_Scope parent);



};

[Entity=Class] interface LoopDeclarationScope {
    static es2panda_Scope CreateLoopDeclarationScope(es2panda_Context context, es2panda_Scope parent);



    es2panda_Scope InitScope(es2panda_Context context);
    void ConvertToVariableScope(es2panda_Context context);
};

[Entity=Class] interface LoopScope {
    static es2panda_Scope CreateLoopScope(es2panda_Context context, es2panda_Scope parent);



    es2panda_Scope DeclScope(es2panda_Context context);
    void BindDecls(es2panda_Context context, es2panda_Scope declScope);
    void ConvertToVariableScope(es2panda_Context context);
};

[Entity=Class] interface GlobalScope {
    static es2panda_Scope CreateGlobalScope(es2panda_Context context);



    bool IsForeignBindingConst(es2panda_Context context, char name);
};

[Entity=Class] interface ModuleScope {
    static es2panda_Scope CreateModuleScope(es2panda_Context context);



    sequence<es2panda_Variable> LocalExportsConst(es2panda_Context context, sequence<sequence<char>> arenaMapValueArray, u32 returnTypeLen);
    void AddImportDecl(es2panda_Context context, es2panda_AstNode importDecl, sequence<es2panda_Declaration> decls, u32 declsLen);
    void AddExportDecl(es2panda_Context context, es2panda_AstNode exportDecl, es2panda_Declaration decl);
    void AddExportDecl1(es2panda_Context context, es2panda_AstNode exportDecl, sequence<es2panda_Declaration> decls, u32 declsLen);
    bool ExportAnalysis(es2panda_Context context);
};

[Entity=Class] interface VarBinder {


};

[Entity=Class] interface ETSBinder {


    void ResolveReferenceForScope(es2panda_Context context, es2panda_AstNode node, es2panda_Scope scope);
    void ResolveReferencesForScope(es2panda_Context context, es2panda_AstNode parent, es2panda_Scope scope);
    void ResolveReferencesForScopeWithContext(es2panda_Context context, es2panda_AstNode node, es2panda_Scope scope);
};

[Entity=Class] interface Decl {


    Es2pandaDeclType TypeConst(es2panda_Context context);
    char NameConst(es2panda_Context context);
    es2panda_AstNode Node(es2panda_Context context);
    es2panda_AstNode NodeConst(es2panda_Context context);
    void BindNode(es2panda_Context context, es2panda_AstNode node);
    bool IsLetOrConstDeclConst(es2panda_Context context);
    bool PossibleTDZConst(es2panda_Context context);
};

[Entity=Class] interface EnumLiteralDecl {
    static es2panda_Declaration CreateEnumLiteralDecl(es2panda_Context context, char name, bool isConst);

    static es2panda_Declaration CreateEnumLiteralDecl1(es2panda_Context context, char name, es2panda_AstNode declNode, bool isConst);



    bool IsConstConst(es2panda_Context context);
    void BindScope(es2panda_Context context, es2panda_Scope scope);
    es2panda_Scope Scope(es2panda_Context context);
};

[Entity=Class] interface InterfaceDecl {
    static es2panda_Declaration CreateInterfaceDecl(es2panda_Context context, char name);

    static es2panda_Declaration CreateInterfaceDecl1(es2panda_Context context, char name, es2panda_AstNode declNode);



};

[Entity=Class] interface ClassDecl {
    static es2panda_Declaration CreateClassDecl(es2panda_Context context, char name);

    static es2panda_Declaration CreateClassDecl1(es2panda_Context context, char name, es2panda_AstNode node);



};

[Entity=Class] interface FunctionDecl {
    static es2panda_Declaration CreateFunctionDecl(es2panda_Context context, char name, es2panda_AstNode node);



};

[Entity=Class] interface TypeParameterDecl {
    static es2panda_Declaration CreateTypeParameterDecl(es2panda_Context context, char name);



};

[Entity=Class] interface PropertyDecl {
    static es2panda_Declaration CreatePropertyDecl(es2panda_Context context, char name);



};

[Entity=Class] interface MethodDecl {
    static es2panda_Declaration CreateMethodDecl(es2panda_Context context, char name);



};

[Entity=Class] interface EnumDecl {
    static es2panda_Declaration CreateEnumDecl(es2panda_Context context, char name);



};

[Entity=Class] interface TypeAliasDecl {
    static es2panda_Declaration CreateTypeAliasDecl(es2panda_Context context, char name);

    static es2panda_Declaration CreateTypeAliasDecl1(es2panda_Context context, char name, es2panda_AstNode node);



};

[Entity=Class] interface NameSpaceDecl {
    static es2panda_Declaration CreateNameSpaceDecl(es2panda_Context context, char name);



};

[Entity=Class] interface VarDecl {
    static es2panda_Declaration CreateVarDecl(es2panda_Context context, char name);



};

[Entity=Class] interface LetDecl {
    static es2panda_Declaration CreateLetDecl(es2panda_Context context, char name);

    static es2panda_Declaration CreateLetDecl1(es2panda_Context context, char name, es2panda_AstNode declNode);



};

[Entity=Class] interface ConstDecl {
    static es2panda_Declaration CreateConstDecl(es2panda_Context context, char name);

    static es2panda_Declaration CreateConstDecl1(es2panda_Context context, char name, es2panda_AstNode declNode);



};

[Entity=Class] interface LabelDecl {
    static es2panda_Declaration CreateLabelDecl(es2panda_Context context, char name);

    static es2panda_Declaration CreateLabelDecl1(es2panda_Context context, char name, es2panda_AstNode declNode);



};

[Entity=Class] interface ReadonlyDecl {
    static es2panda_Declaration CreateReadonlyDecl(es2panda_Context context, char name);

    static es2panda_Declaration CreateReadonlyDecl1(es2panda_Context context, char name, es2panda_AstNode declNode);



};

[Entity=Class] interface ParameterDecl {
    static es2panda_Declaration CreateParameterDecl(es2panda_Context context, char name);



};

[Entity=Class] interface AnnotationDecl {
    static es2panda_Declaration CreateAnnotationDecl(es2panda_Context context, char name);

    static es2panda_Declaration CreateAnnotationDecl1(es2panda_Context context, char name, es2panda_AstNode node);



};

[Entity=Class] interface AnnotationUsage {
    static es2panda_Declaration CreateAnnotationUsageVarbinder(es2panda_Context context, char name);

    static es2panda_Declaration CreateAnnotationUsageVarbinder1(es2panda_Context context, char name, es2panda_AstNode node);



};

[Entity=Class] interface ImportDecl {
    static es2panda_Declaration CreateImportDecl(es2panda_Context context, char importName, char localName);

    static es2panda_Declaration CreateImportDecl1(es2panda_Context context, char importName, char localName, es2panda_AstNode node);



    char ImportNameConst(es2panda_Context context);
    char LocalNameConst(es2panda_Context context);
};

[Entity=Class] interface ExportDecl {
    static es2panda_Declaration CreateExportDecl(es2panda_Context context, char exportName, char localName);

    static es2panda_Declaration CreateExportDecl1(es2panda_Context context, char exportName, char localName, es2panda_AstNode node);



    char ExportNameConst(es2panda_Context context);
    char LocalNameConst(es2panda_Context context);
};

[Entity=Class] interface RecordTable {
    static es2panda_RecordTable CreateRecordTable(es2panda_Context context, Es2pandaRecordTableFlags flags);



    bool IsExternalConst(es2panda_Context context);
    sequence<es2panda_AstNode> ClassDefinitions(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> ClassDefinitionsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> InterfaceDeclarations(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> InterfaceDeclarationsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> AnnotationDeclarations(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_AstNode> AnnotationDeclarationsConst(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Scope> Signatures(es2panda_Context context, u32 returnTypeLen);
    sequence<es2panda_Scope> SignaturesConst(es2panda_Context context, u32 returnTypeLen);
    void SetClassDefinition(es2panda_Context context, es2panda_AstNode classDefinition);
    es2panda_AstNode ClassDefinition(es2panda_Context context);
    es2panda_AstNode ClassDefinitionConst(es2panda_Context context);
    void SetInterfaceDeclaration(es2panda_Context context, es2panda_AstNode interfaceDeclaration);
    es2panda_AstNode InterfaceDeclaration(es2panda_Context context);
    es2panda_AstNode InterfaceDeclarationConst(es2panda_Context context);
    void SetAnnotationDeclaration(es2panda_Context context, es2panda_AstNode annotationDeclaration);
    es2panda_AstNode AnnotationDeclaration(es2panda_Context context);
    es2panda_AstNode AnnotationDeclarationConst(es2panda_Context context);
    void SetProgram(es2panda_Context context);
    char RecordNameConst(es2panda_Context context);
};

[Entity=Class] interface BoundContext {


    char FormRecordNameConst(es2panda_Context context);
};


[Entity=Class] interface ETSParser {


    void AddDirectImportsToDirectExternalSourcesConst(es2panda_Context context, sequence<char> directImportsFromMainSource, u32 directImportsFromMainSourceLen);
    sequence<es2panda_AstNode> ParseDefaultSources(es2panda_Context context, char srcFile, char importSrc, u32 returnTypeLen);
    char FormattingFileName(es2panda_Context context);
    es2panda_AstNode CreateExpression(es2panda_Context context, char sourceCode, Es2pandaExpressionParseFlags flags);
    es2panda_AstNode CreateFormattedExpression(es2panda_Context context, char sourceCode, sequence<es2panda_AstNode> insertingNodes, u32 insertingNodesLen);
    es2panda_AstNode CreateFormattedStatement(es2panda_Context context, char sourceCode, sequence<es2panda_AstNode> insertingNodes, u32 insertingNodesLen);
    sequence<es2panda_AstNode> CreateStatements(es2panda_Context context, char sourceCode, u32 returnTypeLen);
    sequence<es2panda_AstNode> CreateFormattedStatements(es2panda_Context context, char sourceCode, sequence<es2panda_AstNode> insertingNodes, u32 insertingNodesLen, u32 returnTypeLen);
    es2panda_AstNode ParseTopLevelAnnotation(es2panda_Context context, Es2pandaModifierFlags memberModifiers);
    sequence<es2panda_AstNode> ParseAnnotations(es2panda_Context context, bool isTopLevelSt, u32 returnTypeLen);
    es2panda_AstNode CreateFormattedClassDeclaration(es2panda_Context context, char sourceCode, sequence<es2panda_AstNode> insertingNodes, u32 insertingNodesLen, bool allowStatic);
    es2panda_AstNode CreateFormattedClassElement(es2panda_Context context, char sourceCode, sequence<es2panda_AstNode> insertingNodes, u32 insertingNodesLen, sequence<es2panda_AstNode> properties, u32 propertiesLen, Es2pandaClassDefinitionModifiers modifiers);
    es2panda_AstNode CreateFormattedClassFieldDefinition(es2panda_Context context, char sourceCode, sequence<es2panda_AstNode> insertingNodes, u32 insertingNodesLen);
    es2panda_AstNode CreateFormattedClassMethodDefinition(es2panda_Context context, char sourceCode, sequence<es2panda_AstNode> insertingNodes, u32 insertingNodesLen);
    es2panda_AstNode CreateFormattedTopLevelStatement(es2panda_Context context, char sourceCode, sequence<es2panda_AstNode> insertingNodes, u32 insertingNodesLen);
    void ApplyAnnotationsToNode(es2panda_Context context, es2panda_AstNode node, sequence<es2panda_AstNode> annotations, u32 annotationsLen, es2panda_SourcePosition pos);
};


[Entity=Class] interface ASTVerifier {
    static es2panda_AstVerifier CreateASTVerifier(es2panda_Context context);



    void Verify(es2panda_Context context, char phaseName);
    void IntroduceNewInvariants(es2panda_Context context, char phaseName);
    void DumpMessagesConst(es2panda_Context context);
    bool TreatAsWarningConst(es2panda_Context context, Es2pandaEnum id);
    bool TreatAsErrorConst(es2panda_Context context, Es2pandaEnum id);
    bool HasErrorsConst(es2panda_Context context);
    bool HasWarningsConst(es2panda_Context context);
};

[Entity=Class] interface CheckMessage {
    static es2panda_VerifierMessage CreateCheckMessage(es2panda_Context context, char cause, char message, u32 line);



};

